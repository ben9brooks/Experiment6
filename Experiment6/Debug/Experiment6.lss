
Experiment6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00003c7e  00003d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800294  00800294  00003ea6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ea6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006cb8  00000000  00000000  00004284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f9a  00000000  00000000  0000af3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cf9  00000000  00000000  0000ced6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a74  00000000  00000000  0000fbd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001130  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004725  00000000  00000000  00011774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00015e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__ctors_end>
       4:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
       8:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
       c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      10:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      14:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      18:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      1c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      20:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      24:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      28:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      2c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      30:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      34:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      38:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      3c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      40:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      44:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      48:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      4c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      50:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      54:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      58:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      5c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      60:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      64:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      68:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      6c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      70:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      74:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      78:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      7c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      80:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      84:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      88:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      8c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      90:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      94:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      98:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      9c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      a0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      a4:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      a8:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      ac:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      b0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      b4:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      b8:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      bc:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      c0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      c4:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      c8:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
      cc:	cc 14       	cp	r12, r12
      ce:	d4 14       	cp	r13, r4
      d0:	c4 14       	cp	r12, r4
      d2:	bc 14       	cp	r11, r12
      d4:	b4 14       	cp	r11, r4
      d6:	ac 14       	cp	r10, r12
      d8:	a4 14       	cp	r10, r4
      da:	9c 14       	cp	r9, r12
      dc:	94 14       	cp	r9, r4
      de:	8c 14       	cp	r8, r12
      e0:	84 14       	cp	r8, r4
      e2:	7c 14       	cp	r7, r12

000000e4 <CONFIG2>:
      e4:	3a 00 64 3a 65 bb 08 3a 09 bb 50 10 52 67 51 77     :.d:e..:..P.RgQw
      f4:	18 04 05 a1 54 01 55 21 07 00 06 0c 0b 03 50 10     ....T.U!......P.
     104:	51 00 52 04 61 0f 64 55 65 55 18 04 05 a1 ff ff     Q.R.a.dUeU......
     114:	ff ff                                               ..

00000116 <CONFIG>:
     116:	3a 01 2a 04 28 00 29 00 20 00 21 00 22 00 23 00     :.*.(.). .!.".#.
     126:	24 00 25 00 26 00 27 00 28 01 28 02 21 8f 28 03     $.%.&.'.(.(.!.(.
     136:	21 00 28 04 28 05 28 06 28 07 28 08 28 09 28 0a     !.(.(.(.(.(.(.(.
     146:	28 0b 28 0c 20 80 21 90 28 0d 20 00 21 00 28 0e     (.(. .!.(. .!.(.
     156:	20 81 21 91 28 0f 20 00 21 92 28 10 21 00 28 11      .!.(. .!.(.!.(.
     166:	21 93 28 12 21 00 28 13 28 14 28 15 20 82 28 16     !.(.!.(.(.(. .(.
     176:	20 00 28 17 28 18 28 19 21 94 28 1a 21 95 28 1b      .(.(.(.!.(.!.(.
     186:	21 96 28 1c 21 00 28 1d 20 83 28 1e 20 00 28 1f     !.(.!.(. .(. .(.
     196:	21 97 28 20 21 00 28 21 28 22 28 23 28 24 28 25     !.( !.(!("(#($(%
     1a6:	28 26 28 27 28 28 28 29 28 2a 20 84 28 2b 20 00     (&('((()(* .(+ .
     1b6:	28 2c 28 2d 28 2e 28 2f 28 30 28 31 28 32 20 85     (,(-(.(/(0(1(2 .
     1c6:	28 33 20 00 28 34 28 35 28 36 28 37 21 98 28 38     (3 .(4(5(6(7!.(8
     1d6:	21 00 28 39 28 3a 28 3b 28 3c 28 3d 28 3e 28 3f     !.(9(:(;(<(=(>(?
     1e6:	28 40 28 41 28 42 28 43 28 44 28 45 28 46 28 47     (@(A(B(C(D(E(F(G
     1f6:	28 48 28 49 28 4a 28 4b 28 4c 28 4d 28 4e 28 4f     (H(I(J(K(L(M(N(O
     206:	28 50 28 51 28 52 28 53 28 54 28 55 28 56 28 57     (P(Q(R(S(T(U(V(W
     216:	28 58 28 59 28 5a 28 5b 28 5c 28 5d 28 5e 28 5f     (X(Y(Z([(\(](^(_
     226:	28 60 28 61 28 62 21 99 28 63 21 00 28 64 28 65     (`(a(b!.(c!.(d(e
     236:	28 66 28 67 28 68 28 69 28 6a 28 6b 28 6c 28 6d     (f(g(h(i(j(k(l(m
     246:	28 6e 28 6f 28 70 28 71 28 72 28 73 28 74 28 75     (n(o(p(q(r(s(t(u
     256:	28 76 28 77 28 78 28 79 28 7a 28 7b 28 7c 28 7d     (v(w(x(y(z({(|(}
     266:	28 7e 28 7f 28 80 28 81 28 82 28 83 28 84 28 85     (~(.(.(.(.(.(.(.
     276:	28 86 28 87 28 88 28 89 28 8a 28 8b 28 8c 28 8d     (.(.(.(.(.(.(.(.
     286:	28 8e 28 8f 28 90 28 91 20 86 28 92 20 87 28 93     (.(.(.(. .(. .(.
     296:	20 00 28 94 28 95 28 96 28 97 28 98 28 99 28 9a      .(.(.(.(.(.(.(.
     2a6:	28 9b 28 9c 28 9d 28 9e 28 9f 21 9a 28 a0 21 00     (.(.(.(.(.!.(.!.
     2b6:	28 a1 28 a2 28 a3 28 a4 28 a5 28 a6 28 a7 28 a8     (.(.(.(.(.(.(.(.
     2c6:	28 a9 28 aa 28 ab 28 ac 28 ad 28 ae 28 af 28 b0     (.(.(.(.(.(.(.(.
     2d6:	28 b1 28 b2 28 b3 28 b4 28 b5 28 b6 28 b7 28 b8     (.(.(.(.(.(.(.(.
     2e6:	28 b9 20 88 28 ba 20 00 28 bb 20 89 28 bc 20 00     (. .(. .(. .(. .
     2f6:	28 bd 28 be 28 bf 28 c0 28 c1 28 c2 28 c3 21 9b     (.(.(.(.(.(.(.!.
     306:	28 c4 21 00 28 c5 28 c6 28 c7 28 c8 28 c9 28 ca     (.!.(.(.(.(.(.(.
     316:	28 cb 28 cc 28 cd 28 ce 28 cf 28 d0 28 d1 28 d2     (.(.(.(.(.(.(.(.
     326:	28 d3 28 d4 28 d5 28 d6 28 d7 28 d8 28 d9 28 da     (.(.(.(.(.(.(.(.
     336:	28 db 28 dc 28 dd 28 de 28 df 28 e0 28 e1 20 8a     (.(.(.(.(.(.(. .
     346:	28 e2 20 8b 28 e3 20 00 28 e4 28 e5 28 e6 28 e7     (. .(. .(.(.(.(.
     356:	28 e8 28 e9 28 ea 28 eb 28 ec 28 ed 28 ee 28 ef     (.(.(.(.(.(.(.(.
     366:	28 f0 28 f1 28 f2 28 f3 28 f4 28 f5 28 f6 28 f7     (.(.(.(.(.(.(.(.
     376:	28 f8 20 8c 28 f9 20 00 21 9c 28 fa 21 9d 28 fb     (. .(. .!.(.!.(.
     386:	20 8d 21 9e 28 fc 20 8e 21 9f 28 fd 20 00 21 00      .!.(. .!.(. .!.
     396:	28 fe 28 ff 2a 01 28 00 22 01 23 95 24 89 25 07     (.(.*.(.".#.$.%.
     3a6:	26 a4 27 07 28 01 21 c7 22 00 23 80 26 c4 27 0c     &.'.(.!.".#.&.'.
     3b6:	28 02 20 09 21 1c 22 04 26 aa 27 0a 28 03 20 00     (. .!.".&.'.(. .
     3c6:	21 00 22 00 23 a6 26 a0 27 07 28 04 28 05 20 05     !.".#.&.'.(.(. .
     3d6:	23 84 26 b4 27 09 28 06 20 00 22 03 23 00 24 81     #.&.'.(. .".#.$.
     3e6:	25 c0 26 ab 27 0a 28 07 21 ae 22 00 23 95 24 89     %.&.'.(.!.".#.$.
     3f6:	25 07 26 a4 27 00 28 08 21 48 22 01 23 80 26 c4     %.&.'.(.!H".#.&.
     406:	27 0c 28 09 20 09 21 04 22 04 26 aa 27 0a 28 0a     '.(. .!.".&.'.(.
     416:	20 00 21 00 22 00 23 a8 26 a4 27 07 28 0b 28 0c      .!.".#.&.'.(.(.
     426:	21 40 22 20 23 80 26 c4 27 0c 28 0d 22 24 26 c6     !@" #.&.'.(."$&.
     436:	28 0e 21 9e 22 00 26 c8 28 0f 20 09 21 02 22 14     (.!.".&.(. .!.".
     446:	26 aa 27 0a 28 10 20 05 21 00 22 00 23 84 26 b4     &.'.(. .!.".#.&.
     456:	27 09 28 11 20 00 21 01 23 00 24 01 25 c0 26 ab     '.(. .!.#.$.%.&.
     466:	27 0a 28 12 21 c3 23 95 24 89 25 07 26 20 27 00     '.(.!.#.$.%.& '.
     476:	28 13 20 03 21 c2 23 83 26 26 27 0d 28 14 21 b3     (. .!.#.&&'.(.!.
     486:	22 08 28 15 20 00 21 c6 22 00 23 95 26 00 27 08     ".(. .!.".#.&.'.
     496:	28 16 21 00 23 00 24 96 25 03 26 aa 27 0a 28 17     (.!.#.$.%.&.'.(.
     4a6:	20 42 21 b6 23 80 24 89 25 07 28 18 20 00 21 00      B!.#.$.%.(. .!.
     4b6:	23 94 26 0e 28 19 20 0f 23 84 26 b4 27 09 28 1a     #.&.(. .#.&.'.(.
     4c6:	20 00 23 93 26 a8 27 03 28 1b 26 28 27 00 28 1c      .#.&.'.(.&('.(.
     4d6:	21 01 23 00 24 01 25 c0 26 ab 27 0a 28 1d 21 c5     !.#.$.%.&.'.(.!.
     4e6:	23 95 24 89 25 07 26 20 27 00 28 1e 21 00 23 94     #.$.%.& '.(.!.#.
     4f6:	26 00 27 0a 28 1f 26 0e 28 20 20 03 21 79 22 01     &.'.(.&.(  .!y".
     506:	23 83 26 26 27 0d 28 21 21 32 28 22 20 00 21 04     #.&&'.(!!2(" .!.
     516:	22 00 23 80 24 00 25 fc 26 aa 27 0a 28 23 21 00     ".#.$.%.&.'.(#!.
     526:	23 00 25 00 28 24 21 a3 22 0d 23 80 24 9e 25 3b     #.%.($!.".#.$.%;
     536:	28 25 20 42 21 57 22 01 24 89 25 07 28 26 20 00     (% B!W".$.%.(& .
     546:	21 43 22 0d 24 00 25 38 28 27 21 08 22 98 23 95     !C".$.%8('!.".#.
     556:	24 89 25 07 26 24 27 00 28 28 20 42 21 93 22 01     $.%.&$'.(( B!.".
     566:	23 80 26 aa 27 0a 28 29 20 03 21 7e 22 04 23 83     #.&.'.() .!~".#.
     576:	26 26 27 0d 28 2a 20 00 21 b0 22 00 23 95 26 a0     &&'.(* .!.".#.&.
     586:	27 07 28 2b 21 00 23 00 24 0c 25 04 26 aa 27 0a     '.(+!.#.$.%.&.'.
     596:	28 2c 21 02 23 80 24 86 25 c3 26 ab 28 2d 20 42     (,!.#.$.%.&.(- B
     5a6:	21 97 22 01 24 89 25 07 26 aa 28 2e 20 00 21 00     !.".$.%.&.(. .!.
     5b6:	22 00 24 1f 25 04 28 2f 21 b2 23 95 24 89 25 07     ".$.%.(/!.#.$.%.
     5c6:	26 20 27 04 28 30 20 42 21 8b 22 04 23 80 26 aa     & '.(0 B!.".#.&.
     5d6:	27 0a 28 31 20 00 21 b1 22 00 23 95 26 a0 27 07     '.(1 .!.".#.&.'.
     5e6:	28 32 20 03 21 75 22 04 23 83 26 26 27 0d 28 33     (2 .!u".#.&&'.(3
     5f6:	20 05 21 00 22 00 23 84 26 b4 27 09 28 34 20 00      .!.".#.&.'.(4 .
     606:	21 60 23 00 24 01 25 c0 26 ab 27 0a 28 35 21 08     !`#.$.%.&.'.(5!.
     616:	22 98 23 95 24 89 25 07 26 24 27 00 28 36 21 bc     ".#.$.%.&$'.(6!.
     626:	22 00 28 37 21 a3 22 0d 23 00 24 01 25 c0 26 ab     ".(7!.".#.$.%.&.
     636:	27 0a 28 38 21 60 22 00 23 80 24 00 25 38 26 aa     '.(8!`".#.$.%8&.
     646:	28 39 21 06 22 98 23 95 24 89 25 07 26 24 27 00     (9!.".#.$.%.&$'.
     656:	28 3a 21 be 22 00 28 3b 20 05 21 00 23 84 26 b4     (:!.".(; .!.#.&.
     666:	27 09 28 3c 20 00 21 60 23 00 24 01 25 c0 26 ab     '.(< .!`#.$.%.&.
     676:	27 0a 28 3d 21 42 22 01 23 95 24 89 25 07 26 24     '.(=!B".#.$.%.&$
     686:	27 00 28 3e 21 0c 22 98 26 a4 27 07 28 3f 21 08     '.(>!.".&.'.(?!.
     696:	28 40 21 60 22 00 23 00 24 01 25 c0 26 ab 27 0a     (@!`".#.$.%.&.'.
     6a6:	28 41 21 0c 22 98 23 95 24 89 25 07 26 24 27 00     (A!.".#.$.%.&$'.
     6b6:	28 42 20 05 21 00 22 00 23 84 26 b4 27 09 28 43     (B .!.".#.&.'.(C
     6c6:	20 00 23 80 24 00 25 10 26 ab 27 0a 28 44 21 22      .#.$.%.&.'.(D!"
     6d6:	22 01 23 95 24 89 25 07 26 24 27 00 28 45 21 00     ".#.$.%.&$'.(E!.
     6e6:	22 00 23 00 24 04 25 12 26 aa 27 0a 28 46 20 03     ".#.$.%.&.'.(F .
     6f6:	21 d4 22 05 23 83 24 89 25 07 26 26 27 0d 28 47     !.".#.$.%.&&'.(G
     706:	20 00 21 60 22 00 23 00 24 01 25 c0 26 ab 27 0a      .!`".#.$.%.&.'.
     716:	28 48 21 b3 23 95 24 89 25 07 26 00 27 08 28 49     (H!.#.$.%.&.'.(I
     726:	21 00 23 00 24 09 25 00 26 aa 27 0a 28 4a 21 02     !.#.$.%.&.'.(J!.
     736:	23 80 24 86 25 3b 28 4b 20 42 21 dd 22 05 24 89     #.$.%;(K B!.".$.
     746:	25 07 28 4c 20 00 21 00 22 00 24 1f 25 00 28 4d     %.(L .!.".$.%.(M
     756:	21 b3 23 95 24 89 25 07 26 20 27 00 28 4e 21 00     !.#.$.%.& '.(N!.
     766:	23 00 24 97 25 03 26 aa 27 0a 28 4f 20 42 21 e2     #.$.%.&.'.(O B!.
     776:	22 05 23 80 24 89 25 07 28 50 20 00 21 10 22 00     ".#.$.%.(P .!.".
     786:	23 00 24 80 25 cc 26 ab 28 51 21 00 22 40 23 b4     #.$.%.&.(Q!."@#.
     796:	24 89 25 07 26 aa 27 04 28 52 22 00 23 b0 26 92     $.%.&.'.(R".#.&.
     7a6:	27 09 28 53 21 14 22 01 23 95 26 00 27 08 28 54     '.(S!.".#.&.'.(T
     7b6:	21 48 23 a4 26 2a 27 00 28 55 21 00 22 00 23 00     !H#.&*'.(U!.".#.
     7c6:	24 09 25 00 26 aa 27 0a 28 56 21 08 23 80 24 86     $.%.&.'.(V!.#.$.
     7d6:	25 3b 28 57 20 42 21 11 22 07 24 89 25 07 28 58     %;(W B!.".$.%.(X
     7e6:	20 00 21 00 22 00 24 1f 25 00 28 59 21 14 22 01      .!.".$.%.(Y!.".
     7f6:	23 95 24 89 25 07 26 20 27 00 28 5a 21 16 26 02     #.$.%.& '.(Z!.&.
     806:	27 09 28 5b 21 00 22 00 23 00 24 80 25 48 26 aa     '.([!.".#.$.%H&.
     816:	27 0a 28 5c 23 a0 24 89 25 07 26 14 27 09 28 5d     '.(\#.$.%.&.'.(]
     826:	24 80 25 50 26 a4 27 04 28 5e 21 16 22 01 23 95     $.%P&.'.(^!.".#.
     836:	24 89 25 07 27 00 28 5f 21 04 22 00 23 00 24 9c     $.%.'.(_!.".#.$.
     846:	25 78 26 aa 27 0a 28 60 21 43 22 0d 24 01 25 c4     %x&.'.(`!C".$.%.
     856:	26 ab 28 61 21 03 22 00 24 15 28 62 21 00 24 00     &.(a!.".$.(b!.$.
     866:	25 00 26 aa 28 63 21 5e 23 95 24 89 25 07 26 10     %.&.(c!^#.$.%.&.
     876:	27 09 28 64 21 03 23 00 24 15 25 c4 26 ab 27 0a     '.(d!.#.$.%.&.'.
     886:	28 65 21 00 23 80 24 00 25 06 26 aa 28 66 24 8f     (e!.#.$.%.&.(f$.
     896:	25 e3 26 ab 28 67 20 42 21 cd 22 07 24 89 25 07     %.&.(g B!.".$.%.
     8a6:	26 aa 28 68 20 00 21 60 22 00 23 00 24 01 25 c0     &.(h .!`".#.$.%.
     8b6:	26 ab 28 69 21 00 23 80 24 8f 25 03 26 aa 28 6a     &.(i!.#.$.%.&.(j
     8c6:	20 42 21 dd 22 07 24 89 25 07 28 6b 20 00 21 43      B!.".$.%.(k .!C
     8d6:	22 0d 23 00 24 01 25 c0 26 ab 28 6c 21 00 22 00     ".#.$.%.&.(l!.".
     8e6:	24 00 25 04 26 aa 28 6d 20 03 21 7f 22 01 23 83     $.%.&.(m .!.".#.
     8f6:	24 89 25 07 26 26 27 0d 28 6e 21 62 28 6f 20 05     $.%.&&'.(n!b(o .
     906:	21 00 22 00 23 84 26 b4 27 09 28 70 20 00 21 06     !.".#.&.'.(p .!.
     916:	23 95 26 00 27 08 28 71 21 01 23 00 24 97 25 3b     #.&.'.(q!.#.$.%;
     926:	26 aa 27 0a 28 72 20 42 21 0e 22 08 23 80 24 89     &.'.(r B!.".#.$.
     936:	25 07 28 73 20 03 21 3c 22 0b 23 83 26 26 27 0d     %.(s .!<".#.&&'.
     946:	28 74 20 00 21 03 22 00 23 95 26 02 27 08 28 75     (t .!.".#.&.'.(u
     956:	21 27 23 00 24 81 25 c4 26 ab 27 0a 28 76 21 00     !'#.$.%.&.'.(v!.
     966:	23 80 24 09 25 48 26 aa 28 77 21 58 22 34 23 a3     #.$.%H&.(w!X"4#.
     976:	24 89 25 07 26 2a 27 00 28 78 21 00 22 00 23 a0     $.%.&*'.(x!.".#.
     986:	26 00 27 09 28 79 21 07 23 80 24 03 25 39 26 aa     &.'.(y!.#.$.%9&.
     996:	27 0a 28 7a 21 04 23 00 24 1c 25 38 28 7b 21 07     '.(z!.#.$.%8({!.
     9a6:	23 80 24 83 25 39 28 7c 21 03 23 95 24 89 25 07     #.$.%9(|!.#.$.%.
     9b6:	26 02 27 08 28 7d 21 27 23 00 24 81 25 c4 26 ab     &.'.(}!'#.$.%.&.
     9c6:	27 0a 28 7e 21 00 23 80 24 09 25 48 26 aa 28 7f     '.(~!.#.$.%H&.(.
     9d6:	21 58 22 34 23 a3 24 89 25 07 26 2a 27 00 28 80     !X"4#.$.%.&*'.(.
     9e6:	21 06 22 00 23 00 24 81 25 c0 26 93 27 01 28 81     !.".#.$.%.&.'.(.
     9f6:	21 00 23 80 24 89 25 48 26 aa 27 0a 28 82 20 02     !.#.$.%H&.'.(. .
     a06:	21 66 22 08 23 00 24 00 25 66 28 83 20 00 21 00     !f".#.$.%f(. .!.
     a16:	22 00 23 80 24 1f 25 02 28 84 21 06 24 89 25 07     ".#.$.%.(.!.$.%.
     a26:	26 dc 27 0c 28 85 21 00 23 aa 26 aa 27 0a 28 86     &.'.(.!.#.&.'.(.
     a36:	23 b6 26 00 27 08 28 87 23 80 24 86 25 3b 26 aa     #.&.'.(.#.$.%;&.
     a46:	27 0a 28 88 21 05 24 89 25 07 26 dc 27 0c 28 89     '.(.!.$.%.&.'.(.
     a56:	21 00 23 aa 26 aa 27 0a 28 8a 23 b6 26 00 27 08     !.#.&.'.(.#.&.'.
     a66:	28 8b 23 80 24 86 25 3b 26 aa 27 0a 28 8c 20 42     (.#.$.%;&.'.(. B
     a76:	21 7b 22 08 24 89 25 07 28 8d 20 00 21 00 22 00     !{".$.%.(. .!.".
     a86:	23 00 24 01 25 82 28 8e 21 05 24 81 25 c2 26 ab     #.$.%.(.!.$.%.&.
     a96:	28 8f 20 03 21 93 22 08 23 83 24 89 25 07 26 26     (. .!.".#.$.%.&&
     aa6:	27 0d 28 90 20 00 21 05 22 00 23 00 24 81 25 c0     '.(. .!.".#.$.%.
     ab6:	26 13 27 01 28 91 21 00 23 80 24 89 25 48 26 aa     &.'.(.!.#.$.%H&.
     ac6:	27 0a 28 92 20 02 21 7e 22 08 23 00 24 00 25 66     '.(. .!~".#.$.%f
     ad6:	28 93 20 00 21 00 22 00 23 80 24 1f 25 02 28 94     (. .!.".#.$.%.(.
     ae6:	21 05 24 89 25 07 26 dc 27 0c 28 95 21 00 23 aa     !.$.%.&.'.(.!.#.
     af6:	26 aa 27 0a 28 96 23 b6 26 00 27 08 28 97 23 80     &.'.(.#.&.'.(.#.
     b06:	24 86 25 3b 26 aa 27 0a 28 98 21 05 24 89 25 07     $.%;&.'.(.!.$.%.
     b16:	26 dc 27 0c 28 99 21 00 23 aa 26 aa 27 0a 28 9a     &.'.(.!.#.&.'.(.
     b26:	23 80 24 1f 25 02 28 9b 21 01 23 00 24 81 25 c2     #.$.%.(.!.#.$.%.
     b36:	26 ab 28 9c 20 03 21 93 22 08 23 83 24 89 25 07     &.(. .!.".#.$.%.
     b46:	26 26 27 0d 28 9d 20 00 21 04 22 00 23 95 26 12     &&'.(. .!.".#.&.
     b56:	27 08 28 9e 21 60 23 c4 26 aa 27 04 28 9f 21 00     '.(.!`#.&.'.(.!.
     b66:	23 c0 26 00 27 09 28 a0 20 42 21 cb 22 08 23 80     #.&.'.(. B!.".#.
     b76:	26 aa 27 0a 28 a1 20 70 21 54 22 b8 23 95 26 12     &.'.(. p!T".#.&.
     b86:	27 08 28 a2 20 02 21 cc 22 08 23 80 26 aa 27 0a     '.(. .!.".#.&.'.
     b96:	28 a3 20 03 21 ca 22 0f 23 83 26 26 27 0d 28 a4     (. .!.".#.&&'.(.
     ba6:	20 00 21 00 22 00 23 00 24 8c 25 0c 26 aa 27 0a      .!.".#.$.%.&.'.
     bb6:	28 a5 21 04 24 82 25 78 28 a6 21 00 23 80 24 89     (.!.$.%x(.!.#.$.
     bc6:	25 48 26 12 27 04 28 a7 20 03 21 de 22 0f 23 83     %H&.'.(. .!.".#.
     bd6:	25 07 26 26 27 0d 28 a8 20 00 21 01 22 00 23 00     %.&&'.(. .!.".#.
     be6:	24 9c 25 78 26 aa 27 0a 28 a9 21 00 23 80 24 81     $.%x&.'.(.!.#.$.
     bf6:	25 40 28 aa 20 03 21 cf 22 0f 23 83 24 89 25 07     %@(. .!.".#.$.%.
     c06:	26 26 27 0d 28 ab 20 70 21 08 22 b8 23 95 26 a0     &&'.(. p!.".#.&.
     c16:	27 04 28 ac 20 03 21 d4 22 0f 23 83 26 26 27 0d     '.(. .!.".#.&&'.
     c26:	28 ad 21 27 22 0b 28 ae 20 70 21 63 22 b8 23 95     (.!'".(. p!c".#.
     c36:	26 12 27 08 28 af 20 00 21 01 22 00 23 80 24 86     &.'.(. .!.".#.$.
     c46:	25 cb 26 ab 27 0a 28 b0 20 42 21 dd 22 08 24 89     %.&.'.(. B!.".$.
     c56:	25 07 26 aa 28 b1 20 00 21 18 22 80 23 95 26 a4     %.&.(. .!.".#.&.
     c66:	27 00 28 b2 20 03 21 d9 22 0f 23 83 26 26 27 0d     '.(. .!.".#.&&'.
     c76:	28 b3 20 70 21 0a 22 b8 23 95 26 a0 27 00 28 b4     (. p!.".#.&.'.(.
     c86:	20 02 21 e0 22 08 23 80 26 aa 27 0a 28 b5 20 70      .!.".#.&.'.(. p
     c96:	21 0a 22 b8 23 95 26 a0 27 00 28 b6 21 54 26 02     !.".#.&.'.(.!T&.
     ca6:	27 08 28 b7 20 00 21 18 22 80 26 a4 27 00 28 b8     '.(. .!.".&.'.(.
     cb6:	21 00 22 00 23 80 24 80 25 48 26 aa 27 0a 28 b9     !.".#.$.%H&.'.(.
     cc6:	20 70 21 5e 22 b8 23 95 24 89 25 07 26 12 27 08      p!^".#.$.%.&.'.
     cd6:	28 ba 20 00 21 00 22 00 23 80 24 09 25 4b 26 aa     (. .!.".#.$.%K&.
     ce6:	27 0a 28 bb 20 70 21 5f 22 b8 23 95 24 89 25 07     '.(. p!_".#.$.%.
     cf6:	26 10 27 08 28 bc 20 00 21 00 22 00 23 00 24 1c     &.'.(. .!.".#.$.
     d06:	25 83 26 ab 27 0a 28 bd 20 03 21 32 22 09 23 83     %.&.'.(. .!2".#.
     d16:	24 89 25 07 26 26 27 0d 28 be 20 00 21 00 22 00     $.%.&&'.(. .!.".
     d26:	23 00 24 82 25 8c 26 ab 27 0a 28 bf 20 03 21 25     #.$.%.&.'.(. .!%
     d36:	22 09 23 83 24 89 25 07 26 26 27 0d 28 c0 20 42     ".#.$.%.&&'.(. B
     d46:	21 bc 23 80 26 aa 27 0a 28 c1 20 00 21 01 22 00     !.#.&.'.(. .!.".
     d56:	23 00 24 01 25 c0 26 ab 28 c2 20 70 21 0f 22 b8     #.$.%.&.(. p!.".
     d66:	23 95 24 89 25 07 26 20 27 00 28 c3 20 03 21 e3     #.$.%.& '.(. .!.
     d76:	22 0f 23 83 26 26 27 0d 28 c4 20 05 21 00 22 00     ".#.&&'.(. .!.".
     d86:	23 84 26 b4 27 09 28 c5 20 00 21 03 23 95 26 14     #.&.'.(. .!.#.&.
     d96:	27 08 28 c6 21 a6 23 a4 26 2a 27 05 28 c7 21 00     '.(.!.#.&*'.(.!.
     da6:	23 a0 26 44 27 09 28 c8 21 18 22 6d 23 80 24 9e     #.&D'.(.!."m#.$.
     db6:	25 7b 26 aa 27 0a 28 c9 20 42 21 13 22 0b 24 89     %{&.'.(. B!.".$.
     dc6:	25 07 28 ca 20 00 21 ae 22 00 23 95 26 24 27 00     %.(. .!.".#.&$'.
     dd6:	28 cb 21 00 22 03 23 80 24 87 25 7b 26 aa 27 0a     (.!.".#.$.%{&.'.
     de6:	28 cc 20 42 21 16 22 0b 24 89 25 07 28 cd 20 00     (. B!.".$.%.(. .
     df6:	21 ae 22 00 23 95 26 24 27 00 28 ce 20 05 21 00     !.".#.&$'.(. .!.
     e06:	23 84 26 b4 27 09 28 cf 20 03 21 0d 22 0b 23 83     #.&.'.(. .!.".#.
     e16:	26 26 27 0d 28 d0 20 00 21 00 22 00 23 00 24 80     &&'.(. .!.".#.$.
     e26:	26 02 27 00 28 d1 23 80 24 09 25 48 26 1e 28 d2     &.'.(.#.$.%H&.(.
     e36:	21 58 22 34 23 33 24 80 25 07 26 2a 28 d3 21 00     !X"4#3$.%.&*(.!.
     e46:	22 00 23 00 26 80 27 10 28 d4 21 10 23 63 26 2a     ".#.&.'.(.!.#c&*
     e56:	27 00 28 d5 21 00 23 60 26 a8 27 12 28 d6 21 af     '.(.!.#`&.'.(.!.
     e66:	22 4c 23 00 26 c8 27 0c 28 d7 21 00 22 00 26 80     "L#.&.'.(.!.".&.
     e76:	27 05 28 d8 23 80 24 86 25 3b 26 1e 27 00 28 d9     '.(.#.$.%;&.'.(.
     e86:	20 42 21 1c 22 0e 23 00 24 80 25 07 28 da 20 00      B!.".#.$.%.(. .
     e96:	21 35 22 29 26 c4 27 0c 28 db 20 02 21 1d 22 0e     !5")&.'.(. .!.".
     ea6:	26 1e 27 00 28 dc 20 00 21 7f 22 34 26 c4 27 0c     &.'.(. .!."4&.'.
     eb6:	28 dd 21 00 22 00 23 90 24 9f 25 04 26 10 27 0a     (.!.".#.$.%.&.'.
     ec6:	28 de 23 00 24 84 25 00 26 80 27 10 28 df 21 06     (.#.$.%.&.'.(.!.
     ed6:	23 63 24 80 25 07 26 2a 27 00 28 e0 21 00 23 80     #c$.%.&*'.(.!.#.
     ee6:	24 89 26 aa 27 0a 28 e1 20 05 23 84 26 b4 27 09     $.&.'.(. .#.&.'.
     ef6:	28 e2 20 70 21 61 22 b8 23 95 26 12 27 08 28 e3     (. p!a".#.&.'.(.
     f06:	20 00 21 01 22 00 23 80 24 86 25 c3 26 ab 27 0a      .!.".#.$.%.&.'.
     f16:	28 e4 20 42 21 ce 22 0f 24 89 25 07 26 aa 28 e5     (. B!.".$.%.&.(.
     f26:	20 70 21 50 22 b8 23 95 26 12 27 08 28 e6 20 05      p!P".#.&.'.(. .
     f36:	21 00 22 00 23 84 26 b4 27 09 28 e7 20 70 21 64     !.".#.&.'.(. p!d
     f46:	22 b8 23 95 26 12 27 08 28 e8 20 00 21 01 22 00     ".#.&.'.(. .!.".
     f56:	23 80 24 86 25 c3 26 ab 27 0a 28 e9 20 42 21 d3     #.$.%.&.'.(. B!.
     f66:	22 0f 24 89 25 07 26 aa 28 ea 20 70 21 51 22 b8     ".$.%.&.(. p!Q".
     f76:	23 95 26 12 27 08 28 eb 20 05 21 00 22 00 23 84     #.&.'.(. .!.".#.
     f86:	26 b4 27 09 28 ec 20 70 21 65 22 b8 23 95 26 12     &.'.(. p!e".#.&.
     f96:	27 08 28 ed 20 00 21 01 22 00 23 80 24 86 25 c3     '.(. .!.".#.$.%.
     fa6:	26 ab 27 0a 28 ee 20 42 21 d8 22 0f 24 89 25 07     &.'.(. B!.".$.%.
     fb6:	26 aa 28 ef 20 70 21 52 22 b8 23 95 26 12 27 08     &.(. p!R".#.&.'.
     fc6:	28 f0 20 05 21 00 22 00 23 84 26 b4 27 09 28 f1     (. .!.".#.&.'.(.
     fd6:	20 70 21 61 22 b8 23 95 26 02 27 08 28 f2 20 00      p!a".#.&.'.(. .
     fe6:	21 01 22 00 23 80 24 86 25 c3 26 ab 27 0a 28 f3     !.".#.$.%.&.'.(.
     ff6:	20 42 21 dd 22 0f 24 89 25 07 26 aa 28 f4 20 70      B!.".$.%.&.(. p
    1006:	21 50 22 b8 23 95 26 02 27 08 28 f5 20 05 21 00     !P".#.&.'.(. .!.
    1016:	22 00 23 84 26 b4 27 09 28 f6 20 00 21 01 23 80     ".#.&.'.(. .!.#.
    1026:	24 86 25 cb 26 ab 27 0a 28 f7 20 42 21 e1 22 0f     $.%.&.'.(. B!.".
    1036:	24 89 25 07 26 aa 28 f8 20 00 21 02 22 00 23 00     $.%.&.(. .!.".#.
    1046:	24 81 25 c4 26 ab 28 f9 21 00 23 80 24 89 25 48     $.%.&.(.!.#.$.%H
    1056:	26 aa 28 fa 20 05 23 84 25 07 26 b4 27 09 28 fb     &.(. .#.%.&.'.(.
    1066:	20 70 21 4e 22 b8 23 95 26 10 27 08 28 fc 20 00      p!N".#.&.'.(. .
    1076:	21 00 22 00 23 80 24 86 25 c3 26 ab 27 0a 28 fd     !.".#.$.%.&.'.(.
    1086:	20 42 21 e7 22 0f 24 89 25 07 26 aa 28 fe 20 00      B!.".$.%.&.(. .
    1096:	21 bb 22 00 23 95 26 20 27 00 28 ff 20 05 21 00     !.".#.& '.(. .!.
    10a6:	23 84 26 b4 27 09 2a 08 10 01 ff ff ff ff           #.&.'.*.......

000010b4 <Prnt_bytes_prnt>:
    10b4:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
    10c4:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
    10d4:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
    10e4:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

000010f4 <Config_Complete_prnt>:
    10f4:	43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 43 6f     Configuration Co
    1104:	6d 70 6c 65 74 65 0a 0d 00                          mplete...

0000110d <STA_rec_prnt>:
    110d:	4f 75 74 70 75 74 20 66 72 6f 6d 20 53 54 41 30     Output from STA0
    111d:	31 33 3a 20 00                                      13: .

00001122 <STA_sent_prnt>:
    1122:	53 65 6e 74 20 74 6f 20 53 54 41 30 31 33 3a 20     Sent to STA013: 
	...

00001133 <Number_written_prnt>:
    1133:	4e 75 6d 62 65 72 20 6f 66 20 76 61 6c 75 65 73     Number of values
    1143:	20 77 72 69 74 74 65 6e 3a 20 00                     written: .

0000114e <Second_config_prnt>:
    114e:	53 65 63 6f 6e 64 20 63 6f 6e 66 69 67 75 72 61     Second configura
    115e:	74 69 6f 6e 20 66 69 6c 65 20 73 65 6e 74 2e 2e     tion file sent..
    116e:	2e 0a 0d 00                                         ....

00001172 <First_config_prnt>:
    1172:	46 69 72 73 74 20 63 6f 6e 66 69 67 75 72 61 74     First configurat
    1182:	69 6f 6e 20 66 69 6c 65 20 73 65 6e 74 2e 2e 2e     ion file sent...
    1192:	0a 0d 00                                            ...

00001195 <ID_Reg_prnt>:
    1195:	4f 75 74 70 75 74 20 66 72 6f 6d 20 49 44 20 72     Output from ID r
    11a5:	65 67 69 73 74 65 72 3a 20 00                       egister: .

000011af <Error_prnt>:
    11af:	65 72 72 6f 72 20 66 6c 61 67 3a 20 00              error flag: .

000011bc <STA_cfg_data>:
    11bc:	07 10 09 02 b8 00 00 00 06 05 a1 00 04 05 07 07     ................
    11cc:	00 01                                               ..

000011ce <STA_cfg_addr>:
    11ce:	54 55 06 0b 52 51 65 64 50 61 05 0d 18 0c 46 48     TU..RQedPa....FH
    11de:	7d 72                                               }r

000011e0 <__ctors_end>:
    11e0:	11 24       	eor	r1, r1
    11e2:	1f be       	out	0x3f, r1	; 63
    11e4:	cf ef       	ldi	r28, 0xFF	; 255
    11e6:	d8 e0       	ldi	r29, 0x08	; 8
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	cd bf       	out	0x3d, r28	; 61

000011ec <__do_copy_data>:
    11ec:	12 e0       	ldi	r17, 0x02	; 2
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b1 e0       	ldi	r27, 0x01	; 1
    11f2:	ee e7       	ldi	r30, 0x7E	; 126
    11f4:	fc e3       	ldi	r31, 0x3C	; 60
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <__do_copy_data+0x10>
    11f8:	05 90       	lpm	r0, Z+
    11fa:	0d 92       	st	X+, r0
    11fc:	a4 39       	cpi	r26, 0x94	; 148
    11fe:	b1 07       	cpc	r27, r17
    1200:	d9 f7       	brne	.-10     	; 0x11f8 <__do_copy_data+0xc>

00001202 <__do_clear_bss>:
    1202:	23 e0       	ldi	r18, 0x03	; 3
    1204:	a4 e9       	ldi	r26, 0x94	; 148
    1206:	b2 e0       	ldi	r27, 0x02	; 2
    1208:	01 c0       	rjmp	.+2      	; 0x120c <.do_clear_bss_start>

0000120a <.do_clear_bss_loop>:
    120a:	1d 92       	st	X+, r1

0000120c <.do_clear_bss_start>:
    120c:	a2 31       	cpi	r26, 0x12	; 18
    120e:	b2 07       	cpc	r27, r18
    1210:	e1 f7       	brne	.-8      	; 0x120a <.do_clear_bss_loop>
    1212:	0e 94 31 0c 	call	0x1862	; 0x1862 <main>
    1216:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <_exit>

0000121a <__bad_interrupt>:
    121a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000121e <export_drive_values>:
************************************************************************/

FS_values_t * export_drive_values(void)
{
   return &Drive_values;
}
    121e:	84 ee       	ldi	r24, 0xE4	; 228
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	08 95       	ret

00001224 <print_directory>:
************************************************************************/



uint16_t  print_directory(uint32_t Sector_num, uint8_t * array_in)
{ 
    1224:	2f 92       	push	r2
    1226:	3f 92       	push	r3
    1228:	4f 92       	push	r4
    122a:	5f 92       	push	r5
    122c:	6f 92       	push	r6
    122e:	7f 92       	push	r7
    1230:	8f 92       	push	r8
    1232:	9f 92       	push	r9
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	27 97       	sbiw	r28, 0x07	; 7
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	4b 01       	movw	r8, r22
    125a:	5c 01       	movw	r10, r24
    125c:	5a 83       	std	Y+2, r21	; 0x02
    125e:	49 83       	std	Y+1, r20	; 0x01
   uint16_t i, entries;
   uint8_t temp8, j, attr, out_val, error_flag;
   uint8_t * values;
   char *prnt_bffr;

   prnt_bffr=export_print_buffer();
    1260:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <export_print_buffer>
    1264:	8c 83       	std	Y+4, r24	; 0x04
    1266:	9d 83       	std	Y+5, r25	; 0x05
   
   values=array_in;
   entries=0;
   i=0;
   if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
    1268:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Drive_values+0x1>
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	49 f4       	brne	.+18     	; 0x1282 <print_directory+0x5e>
   { 
      max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
    1270:	40 90 f6 02 	lds	r4, 0x02F6	; 0x8002f6 <Drive_values+0x12>
    1274:	50 90 f7 02 	lds	r5, 0x02F7	; 0x8002f7 <Drive_values+0x13>
    1278:	60 90 f8 02 	lds	r6, 0x02F8	; 0x8002f8 <Drive_values+0x14>
    127c:	70 90 f9 02 	lds	r7, 0x02F9	; 0x8002f9 <Drive_values+0x15>
    1280:	05 c0       	rjmp	.+10     	; 0x128c <print_directory+0x68>
   }
   else
   {
      max_sectors=Drive_values.SecPerClus;
    1282:	40 90 e4 02 	lds	r4, 0x02E4	; 0x8002e4 <Drive_values>
    1286:	51 2c       	mov	r5, r1
    1288:	61 2c       	mov	r6, r1
    128a:	71 2c       	mov	r7, r1
   }
   Sector=Sector_num;
   error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
    128c:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <Drive_values+0x4>
    1290:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <Drive_values+0x5>
    1294:	29 81       	ldd	r18, Y+1	; 0x01
    1296:	3a 81       	ldd	r19, Y+2	; 0x02
    1298:	c5 01       	movw	r24, r10
    129a:	b4 01       	movw	r22, r8
    129c:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
   if(error_flag==no_errors)
    12a0:	81 11       	cpse	r24, r1
    12a2:	cd c0       	rjmp	.+410    	; 0x143e <print_directory+0x21a>
    12a4:	75 01       	movw	r14, r10
    12a6:	64 01       	movw	r12, r8
    12a8:	00 e0       	ldi	r16, 0x00	; 0
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	1f 82       	std	Y+7, r1	; 0x07
    12ae:	1e 82       	std	Y+6, r1	; 0x06
   {
     do
     {
        temp8=read_value_8(0+i,values);  // read first byte to see if empty
    12b0:	69 81       	ldd	r22, Y+1	; 0x01
    12b2:	7a 81       	ldd	r23, Y+2	; 0x02
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    12bc:	38 2e       	mov	r3, r24
        if((temp8!=0xE5)&&(temp8!=0x00))
    12be:	25 ee       	ldi	r18, 0xE5	; 229
    12c0:	82 17       	cp	r24, r18
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <print_directory+0xa2>
    12c4:	8a c0       	rjmp	.+276    	; 0x13da <print_directory+0x1b6>
    12c6:	88 23       	and	r24, r24
    12c8:	09 f4       	brne	.+2      	; 0x12cc <print_directory+0xa8>
    12ca:	87 c0       	rjmp	.+270    	; 0x13da <print_directory+0x1b6>
	    {  
	       attr=read_value_8(0x0b+i,values);
    12cc:	69 81       	ldd	r22, Y+1	; 0x01
    12ce:	7a 81       	ldd	r23, Y+2	; 0x02
    12d0:	8e 81       	ldd	r24, Y+6	; 0x06
    12d2:	9f 81       	ldd	r25, Y+7	; 0x07
    12d4:	0b 96       	adiw	r24, 0x0b	; 11
    12d6:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    12da:	8b 83       	std	Y+3, r24	; 0x03
		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
    12dc:	8e 70       	andi	r24, 0x0E	; 14
    12de:	09 f0       	breq	.+2      	; 0x12e2 <print_directory+0xbe>
    12e0:	7c c0       	rjmp	.+248    	; 0x13da <print_directory+0x1b6>
		   {
		      entries++;
    12e2:	0f 5f       	subi	r16, 0xFF	; 255
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
			  sprintf(prnt_bffr,"%5d. ",entries);  // print entry number with a fixed width specifier
    12e6:	1f 93       	push	r17
    12e8:	0f 93       	push	r16
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9f 93       	push	r25
    12f0:	8f 93       	push	r24
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	8f 93       	push	r24
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	9f 93       	push	r25
    12fa:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
		      UART_transmit_string(UART1,prnt_bffr,0);
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	6c 81       	ldd	r22, Y+4	; 0x04
    1302:	7d 81       	ldd	r23, Y+5	; 0x05
    1304:	88 ec       	ldi	r24, 0xC8	; 200
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			  for(j=0;j<8;j++)
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	21 2c       	mov	r2, r1
    131a:	0e c0       	rjmp	.+28     	; 0x1338 <print_directory+0x114>
			  {
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
    131c:	69 81       	ldd	r22, Y+1	; 0x01
    131e:	7a 81       	ldd	r23, Y+2	; 0x02
    1320:	8e 81       	ldd	r24, Y+6	; 0x06
    1322:	9f 81       	ldd	r25, Y+7	; 0x07
    1324:	82 0d       	add	r24, r2
    1326:	91 1d       	adc	r25, r1
    1328:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
			     UART_transmit(UART1,out_val);
    132c:	68 2f       	mov	r22, r24
    132e:	88 ec       	ldi	r24, 0xC8	; 200
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
		   {
		      entries++;
			  sprintf(prnt_bffr,"%5d. ",entries);  // print entry number with a fixed width specifier
		      UART_transmit_string(UART1,prnt_bffr,0);
			  for(j=0;j<8;j++)
    1336:	23 94       	inc	r2
    1338:	27 e0       	ldi	r18, 0x07	; 7
    133a:	22 15       	cp	r18, r2
    133c:	78 f7       	brcc	.-34     	; 0x131c <print_directory+0xf8>
			  {
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
			     UART_transmit(UART1,out_val);
			  }
              if((attr&0x10)==0x10)  // indicates directory
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	84 fd       	sbrc	r24, 4
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <print_directory+0x140>
    1344:	26 c0       	rjmp	.+76     	; 0x1392 <print_directory+0x16e>
			  {
			     for(j=8;j<11;j++)
			     {
			        out_val=read_value_8(i+j,values);
    1346:	69 81       	ldd	r22, Y+1	; 0x01
    1348:	7a 81       	ldd	r23, Y+2	; 0x02
    134a:	8e 81       	ldd	r24, Y+6	; 0x06
    134c:	9f 81       	ldd	r25, Y+7	; 0x07
    134e:	82 0d       	add	r24, r2
    1350:	91 1d       	adc	r25, r1
    1352:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
			        UART_transmit(UART1,out_val);
    1356:	68 2f       	mov	r22, r24
    1358:	88 ec       	ldi	r24, 0xC8	; 200
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
			     out_val=read_value_8(i+j,values);   // print the 8 byte name
			     UART_transmit(UART1,out_val);
			  }
              if((attr&0x10)==0x10)  // indicates directory
			  {
			     for(j=8;j<11;j++)
    1360:	23 94       	inc	r2
    1362:	03 c0       	rjmp	.+6      	; 0x136a <print_directory+0x146>
    1364:	68 94       	set
    1366:	22 24       	eor	r2, r2
    1368:	23 f8       	bld	r2, 3
    136a:	9a e0       	ldi	r25, 0x0A	; 10
    136c:	92 15       	cp	r25, r2
    136e:	58 f7       	brcc	.-42     	; 0x1346 <print_directory+0x122>
			     {
			        out_val=read_value_8(i+j,values);
			        UART_transmit(UART1,out_val);
			     }
			     sprintf(prnt_bffr,"[DIR]\r\n");
    1370:	88 e0       	ldi	r24, 0x08	; 8
    1372:	e6 e0       	ldi	r30, 0x06	; 6
    1374:	f1 e0       	ldi	r31, 0x01	; 1
    1376:	ac 81       	ldd	r26, Y+4	; 0x04
    1378:	bd 81       	ldd	r27, Y+5	; 0x05
    137a:	01 90       	ld	r0, Z+
    137c:	0d 92       	st	X+, r0
    137e:	8a 95       	dec	r24
    1380:	e1 f7       	brne	.-8      	; 0x137a <print_directory+0x156>
				 UART_transmit_string(UART1,prnt_bffr,0);
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	6c 81       	ldd	r22, Y+4	; 0x04
    1386:	7d 81       	ldd	r23, Y+5	; 0x05
    1388:	88 ec       	ldi	r24, 0xC8	; 200
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    1390:	24 c0       	rjmp	.+72     	; 0x13da <print_directory+0x1b6>
			  }
			  else       // print a period and the three byte extension for a file
			  {
			     UART_transmit(UART1,0x2E);       
    1392:	6e e2       	ldi	r22, 0x2E	; 46
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
			     for(j=8;j<11;j++)
    139c:	68 94       	set
    139e:	22 24       	eor	r2, r2
    13a0:	23 f8       	bld	r2, 3
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <print_directory+0x19c>
			     {
			        out_val=read_value_8(i+j,values);
    13a4:	69 81       	ldd	r22, Y+1	; 0x01
    13a6:	7a 81       	ldd	r23, Y+2	; 0x02
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 0d       	add	r24, r2
    13ae:	91 1d       	adc	r25, r1
    13b0:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
			        UART_transmit(UART1,out_val);
    13b4:	68 2f       	mov	r22, r24
    13b6:	88 ec       	ldi	r24, 0xC8	; 200
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
				 UART_transmit_string(UART1,prnt_bffr,0);
			  }
			  else       // print a period and the three byte extension for a file
			  {
			     UART_transmit(UART1,0x2E);       
			     for(j=8;j<11;j++)
    13be:	23 94       	inc	r2
    13c0:	2a e0       	ldi	r18, 0x0A	; 10
    13c2:	22 15       	cp	r18, r2
    13c4:	78 f7       	brcc	.-34     	; 0x13a4 <print_directory+0x180>
			     {
			        out_val=read_value_8(i+j,values);
			        UART_transmit(UART1,out_val);
			     }
			     UART_transmit(UART1,CR);
    13c6:	6d e0       	ldi	r22, 0x0D	; 13
    13c8:	88 ec       	ldi	r24, 0xC8	; 200
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
                 UART_transmit(UART1,LF);
    13d0:	6a e0       	ldi	r22, 0x0A	; 10
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
			  }
		    }
		}
		    i=i+32;  // next entry
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	80 96       	adiw	r24, 0x20	; 32
    13e0:	9f 83       	std	Y+7, r25	; 0x07
    13e2:	8e 83       	std	Y+6, r24	; 0x06
		    if(i>510)
    13e4:	8f 3f       	cpi	r24, 0xFF	; 255
    13e6:	91 40       	sbci	r25, 0x01	; 1
    13e8:	38 f1       	brcs	.+78     	; 0x1438 <print_directory+0x214>
		    {
			  Sector++;
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	c8 1a       	sub	r12, r24
    13ee:	d8 0a       	sbc	r13, r24
    13f0:	e8 0a       	sbc	r14, r24
    13f2:	f8 0a       	sbc	r15, r24
              if((Sector-Sector_num)<max_sectors)
    13f4:	d7 01       	movw	r26, r14
    13f6:	c6 01       	movw	r24, r12
    13f8:	88 19       	sub	r24, r8
    13fa:	99 09       	sbc	r25, r9
    13fc:	aa 09       	sbc	r26, r10
    13fe:	bb 09       	sbc	r27, r11
    1400:	84 15       	cp	r24, r4
    1402:	95 05       	cpc	r25, r5
    1404:	a6 05       	cpc	r26, r6
    1406:	b7 05       	cpc	r27, r7
    1408:	78 f4       	brcc	.+30     	; 0x1428 <print_directory+0x204>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
    140a:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <Drive_values+0x4>
    140e:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <Drive_values+0x5>
    1412:	29 81       	ldd	r18, Y+1	; 0x01
    1414:	3a 81       	ldd	r19, Y+2	; 0x02
    1416:	c7 01       	movw	r24, r14
    1418:	b6 01       	movw	r22, r12
    141a:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
			     if(error_flag!=no_errors)
    141e:	81 11       	cpse	r24, r1
    1420:	06 c0       	rjmp	.+12     	; 0x142e <print_directory+0x20a>
			     {
			        entries=0;   // no entries found indicates disk read error
				    temp8=0;     // forces a function exit
			     }
                 i=0;
    1422:	1f 82       	std	Y+7, r1	; 0x07
    1424:	1e 82       	std	Y+6, r1	; 0x06
    1426:	08 c0       	rjmp	.+16     	; 0x1438 <print_directory+0x214>
			  }
			  else
			  {
			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
    1428:	10 68       	ori	r17, 0x80	; 128
			     temp8=0;                       // forces a function exit
    142a:	31 2c       	mov	r3, r1
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <print_directory+0x214>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			        entries=0;   // no entries found indicates disk read error
				    temp8=0;     // forces a function exit
    142e:	31 2c       	mov	r3, r1
              if((Sector-Sector_num)<max_sectors)
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			        entries=0;   // no entries found indicates disk read error
    1430:	00 e0       	ldi	r16, 0x00	; 0
    1432:	10 e0       	ldi	r17, 0x00	; 0
				    temp8=0;     // forces a function exit
			     }
                 i=0;
    1434:	1f 82       	std	Y+7, r1	; 0x07
    1436:	1e 82       	std	Y+6, r1	; 0x06
			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
			     temp8=0;                       // forces a function exit
			  }
		    }
         
	  }while(temp8!=0);
    1438:	31 10       	cpse	r3, r1
    143a:	3a cf       	rjmp	.-396    	; 0x12b0 <print_directory+0x8c>
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <print_directory+0x21e>
	}
	else
	{
	   entries=0;    // no entries found indicates disk read error
    143e:	00 e0       	ldi	r16, 0x00	; 0
    1440:	10 e0       	ldi	r17, 0x00	; 0
	}
   return entries;
 }
    1442:	c8 01       	movw	r24, r16
    1444:	27 96       	adiw	r28, 0x07	; 7
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	9f 90       	pop	r9
    1466:	8f 90       	pop	r8
    1468:	7f 90       	pop	r7
    146a:	6f 90       	pop	r6
    146c:	5f 90       	pop	r5
    146e:	4f 90       	pop	r4
    1470:	3f 90       	pop	r3
    1472:	2f 90       	pop	r2
    1474:	08 95       	ret

00001476 <read_dir_entry>:
         a directory entry, clear for a file.  Bit 31 set for error.
CAUTION: 
************************************************************************/

uint32_t read_dir_entry(uint32_t Sector_num, uint16_t Entry, uint8_t * array_in)
{ 
    1476:	2f 92       	push	r2
    1478:	3f 92       	push	r3
    147a:	4f 92       	push	r4
    147c:	5f 92       	push	r5
    147e:	6f 92       	push	r6
    1480:	7f 92       	push	r7
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	2c 97       	sbiw	r28, 0x0c	; 12
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	6b 01       	movw	r12, r22
    14aa:	7c 01       	movw	r14, r24
    14ac:	5a 87       	std	Y+10, r21	; 0x0a
    14ae:	49 87       	std	Y+9, r20	; 0x09
    14b0:	19 01       	movw	r2, r18

   values=array_in;
   entries=0;
   i=0;
   return_clus=0;
   if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
    14b2:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Drive_values+0x1>
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	49 f4       	brne	.+18     	; 0x14cc <read_dir_entry+0x56>
   { 
      max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
    14ba:	80 90 f6 02 	lds	r8, 0x02F6	; 0x8002f6 <Drive_values+0x12>
    14be:	90 90 f7 02 	lds	r9, 0x02F7	; 0x8002f7 <Drive_values+0x13>
    14c2:	a0 90 f8 02 	lds	r10, 0x02F8	; 0x8002f8 <Drive_values+0x14>
    14c6:	b0 90 f9 02 	lds	r11, 0x02F9	; 0x8002f9 <Drive_values+0x15>
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <read_dir_entry+0x62>
   }
   else
   {
      max_sectors=Drive_values.SecPerClus;
    14cc:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <Drive_values>
    14d0:	88 2e       	mov	r8, r24
    14d2:	91 2c       	mov	r9, r1
    14d4:	a1 2c       	mov	r10, r1
    14d6:	b1 2c       	mov	r11, r1
   }
   Sector=Sector_num;
   error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
    14d8:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <Drive_values+0x4>
    14dc:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <Drive_values+0x5>
    14e0:	91 01       	movw	r18, r2
    14e2:	c7 01       	movw	r24, r14
    14e4:	b6 01       	movw	r22, r12
    14e6:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
   if(error_flag==no_errors)
    14ea:	81 11       	cpse	r24, r1
    14ec:	c7 c0       	rjmp	.+398    	; 0x167c <read_dir_entry+0x206>
    14ee:	26 01       	movw	r4, r12
    14f0:	37 01       	movw	r6, r14
    14f2:	18 86       	std	Y+8, r1	; 0x08
    14f4:	1f 82       	std	Y+7, r1	; 0x07
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	1a 82       	std	Y+2, r1	; 0x02
    14fa:	1b 82       	std	Y+3, r1	; 0x03
    14fc:	1c 82       	std	Y+4, r1	; 0x04
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3c 87       	std	Y+12, r19	; 0x0c
    1504:	2b 87       	std	Y+11, r18	; 0x0b
   {
     do
     {
        temp8=read_value_8(0+i,values);  // read first byte to see if empty
    1506:	b1 01       	movw	r22, r2
    1508:	8b 85       	ldd	r24, Y+11	; 0x0b
    150a:	9c 85       	ldd	r25, Y+12	; 0x0c
    150c:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    1510:	18 2f       	mov	r17, r24
        if((temp8!=0xE5)&&(temp8!=0x00))
    1512:	85 3e       	cpi	r24, 0xE5	; 229
    1514:	09 f4       	brne	.+2      	; 0x1518 <read_dir_entry+0xa2>
    1516:	7c c0       	rjmp	.+248    	; 0x1610 <read_dir_entry+0x19a>
    1518:	88 23       	and	r24, r24
    151a:	09 f4       	brne	.+2      	; 0x151e <read_dir_entry+0xa8>
    151c:	79 c0       	rjmp	.+242    	; 0x1610 <read_dir_entry+0x19a>
	    {  
	       attr=read_value_8(0x0b+i,values);
    151e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1520:	5c 85       	ldd	r21, Y+12	; 0x0c
    1522:	45 5f       	subi	r20, 0xF5	; 245
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    1526:	5e 83       	std	Y+6, r21	; 0x06
    1528:	4d 83       	std	Y+5, r20	; 0x05
    152a:	b1 01       	movw	r22, r2
    152c:	ca 01       	movw	r24, r20
    152e:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
		   if((attr&0x0E)==0)    // if hidden do not print
    1532:	8e 70       	andi	r24, 0x0E	; 14
    1534:	09 f0       	breq	.+2      	; 0x1538 <read_dir_entry+0xc2>
    1536:	6c c0       	rjmp	.+216    	; 0x1610 <read_dir_entry+0x19a>
		   {
		      entries++;
    1538:	8f 81       	ldd	r24, Y+7	; 0x07
    153a:	98 85       	ldd	r25, Y+8	; 0x08
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	98 87       	std	Y+8, r25	; 0x08
    1540:	8f 83       	std	Y+7, r24	; 0x07
              if(entries==Entry)
    1542:	a9 85       	ldd	r26, Y+9	; 0x09
    1544:	ba 85       	ldd	r27, Y+10	; 0x0a
    1546:	8a 17       	cp	r24, r26
    1548:	9b 07       	cpc	r25, r27
    154a:	09 f0       	breq	.+2      	; 0x154e <read_dir_entry+0xd8>
    154c:	61 c0       	rjmp	.+194    	; 0x1610 <read_dir_entry+0x19a>
              {
			    if(Drive_values.FATtype==FAT32)
    154e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Drive_values+0x1>
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	31 f5       	brne	.+76     	; 0x15a2 <read_dir_entry+0x12c>
                {
                   return_clus=read_value_8(21+i,values);
    1556:	b1 01       	movw	r22, r2
    1558:	8b 85       	ldd	r24, Y+11	; 0x0b
    155a:	9c 85       	ldd	r25, Y+12	; 0x0c
    155c:	45 96       	adiw	r24, 0x15	; 21
    155e:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a0 e0       	ldi	r26, 0x00	; 0
    1566:	b0 e0       	ldi	r27, 0x00	; 0
				   return_clus=return_clus<<8;
    1568:	22 27       	eor	r18, r18
    156a:	38 2f       	mov	r19, r24
    156c:	49 2f       	mov	r20, r25
    156e:	5a 2f       	mov	r21, r26
    1570:	29 83       	std	Y+1, r18	; 0x01
    1572:	3a 83       	std	Y+2, r19	; 0x02
    1574:	4b 83       	std	Y+3, r20	; 0x03
    1576:	5c 83       	std	Y+4, r21	; 0x04
                   return_clus|=read_value_8(20+i,values);
    1578:	b1 01       	movw	r22, r2
    157a:	8b 85       	ldd	r24, Y+11	; 0x0b
    157c:	9c 85       	ldd	r25, Y+12	; 0x0c
    157e:	44 96       	adiw	r24, 0x14	; 20
    1580:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    1584:	29 81       	ldd	r18, Y+1	; 0x01
    1586:	3a 81       	ldd	r19, Y+2	; 0x02
    1588:	4b 81       	ldd	r20, Y+3	; 0x03
    158a:	5c 81       	ldd	r21, Y+4	; 0x04
    158c:	28 2b       	or	r18, r24
    158e:	da 01       	movw	r26, r20
    1590:	c9 01       	movw	r24, r18
                   return_clus=return_clus<<8;
    1592:	22 27       	eor	r18, r18
    1594:	38 2f       	mov	r19, r24
    1596:	49 2f       	mov	r20, r25
    1598:	5a 2f       	mov	r21, r26
    159a:	29 83       	std	Y+1, r18	; 0x01
    159c:	3a 83       	std	Y+2, r19	; 0x02
    159e:	4b 83       	std	Y+3, r20	; 0x03
    15a0:	5c 83       	std	Y+4, r21	; 0x04
                }
                return_clus|=read_value_8(27+i,values);
    15a2:	b1 01       	movw	r22, r2
    15a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a8:	4b 96       	adiw	r24, 0x1b	; 27
    15aa:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    15ae:	29 81       	ldd	r18, Y+1	; 0x01
    15b0:	3a 81       	ldd	r19, Y+2	; 0x02
    15b2:	4b 81       	ldd	r20, Y+3	; 0x03
    15b4:	5c 81       	ldd	r21, Y+4	; 0x04
    15b6:	28 2b       	or	r18, r24
    15b8:	da 01       	movw	r26, r20
    15ba:	c9 01       	movw	r24, r18
			    return_clus=return_clus<<8;
    15bc:	22 27       	eor	r18, r18
    15be:	38 2f       	mov	r19, r24
    15c0:	49 2f       	mov	r20, r25
    15c2:	5a 2f       	mov	r21, r26
    15c4:	29 83       	std	Y+1, r18	; 0x01
    15c6:	3a 83       	std	Y+2, r19	; 0x02
    15c8:	4b 83       	std	Y+3, r20	; 0x03
    15ca:	5c 83       	std	Y+4, r21	; 0x04
                return_clus|=read_value_8(26+i,values);
    15cc:	b1 01       	movw	r22, r2
    15ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d2:	4a 96       	adiw	r24, 0x1a	; 26
    15d4:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    15d8:	29 81       	ldd	r18, Y+1	; 0x01
    15da:	3a 81       	ldd	r19, Y+2	; 0x02
    15dc:	4b 81       	ldd	r20, Y+3	; 0x03
    15de:	5c 81       	ldd	r21, Y+4	; 0x04
    15e0:	28 2b       	or	r18, r24
    15e2:	29 83       	std	Y+1, r18	; 0x01
    15e4:	3a 83       	std	Y+2, r19	; 0x02
    15e6:	4b 83       	std	Y+3, r20	; 0x03
    15e8:	5c 83       	std	Y+4, r21	; 0x04
			    attr=read_value_8(0x0b+i,values);
    15ea:	b1 01       	movw	r22, r2
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
			    if(attr&0x10) return_clus|=directory_bit;
    15f4:	84 ff       	sbrs	r24, 4
    15f6:	0b c0       	rjmp	.+22     	; 0x160e <read_dir_entry+0x198>
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	ab 81       	ldd	r26, Y+3	; 0x03
    15fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1600:	b0 61       	ori	r27, 0x10	; 16
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	ab 83       	std	Y+3, r26	; 0x03
    1608:	bc 83       	std	Y+4, r27	; 0x04
                temp8=0;    // forces a function exit
    160a:	10 e0       	ldi	r17, 0x00	; 0
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <read_dir_entry+0x19a>
    160e:	10 e0       	ldi	r17, 0x00	; 0
              }
              
		    }
		}
		    i=i+32;  // next entry
    1610:	ab 85       	ldd	r26, Y+11	; 0x0b
    1612:	bc 85       	ldd	r27, Y+12	; 0x0c
    1614:	90 96       	adiw	r26, 0x20	; 32
    1616:	bc 87       	std	Y+12, r27	; 0x0c
    1618:	ab 87       	std	Y+11, r26	; 0x0b
		    if(i>510)
    161a:	af 3f       	cpi	r26, 0xFF	; 255
    161c:	b1 40       	sbci	r27, 0x01	; 1
    161e:	58 f1       	brcs	.+86     	; 0x1676 <read_dir_entry+0x200>
		    {
			  Sector++;
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	43 1a       	sub	r4, r19
    1624:	53 0a       	sbc	r5, r19
    1626:	63 0a       	sbc	r6, r19
    1628:	73 0a       	sbc	r7, r19
			  if((Sector-Sector_num)<max_sectors)
    162a:	d3 01       	movw	r26, r6
    162c:	c2 01       	movw	r24, r4
    162e:	8c 19       	sub	r24, r12
    1630:	9d 09       	sbc	r25, r13
    1632:	ae 09       	sbc	r26, r14
    1634:	bf 09       	sbc	r27, r15
    1636:	88 15       	cp	r24, r8
    1638:	99 05       	cpc	r25, r9
    163a:	aa 05       	cpc	r26, r10
    163c:	bb 05       	cpc	r27, r11
    163e:	70 f4       	brcc	.+28     	; 0x165c <read_dir_entry+0x1e6>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
    1640:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <Drive_values+0x4>
    1644:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <Drive_values+0x5>
    1648:	91 01       	movw	r18, r2
    164a:	c3 01       	movw	r24, r6
    164c:	b2 01       	movw	r22, r4
    164e:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
			     if(error_flag!=no_errors)
    1652:	81 11       	cpse	r24, r1
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <read_dir_entry+0x1ea>
			     {
			         return_clus=no_entry_found;
                     temp8=0; 
			     }
			     i=0;
    1656:	1c 86       	std	Y+12, r1	; 0x0c
    1658:	1b 86       	std	Y+11, r1	; 0x0b
    165a:	0d c0       	rjmp	.+26     	; 0x1676 <read_dir_entry+0x200>
			  }
			  else
			  {
			     temp8=0;                       // forces a function exit
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	0b c0       	rjmp	.+22     	; 0x1676 <read_dir_entry+0x200>
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			         return_clus=no_entry_found;
                     temp8=0; 
    1660:	10 e0       	ldi	r17, 0x00	; 0
			     }
			     i=0;
    1662:	1c 86       	std	Y+12, r1	; 0x0c
    1664:	1b 86       	std	Y+11, r1	; 0x0b
			  if((Sector-Sector_num)<max_sectors)
			  {
                 error_flag=read_sector(Sector,Drive_values.BytesPerSec,values);
			     if(error_flag!=no_errors)
			     {
			         return_clus=no_entry_found;
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e8       	ldi	r27, 0x80	; 128
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	9a 83       	std	Y+2, r25	; 0x02
    1672:	ab 83       	std	Y+3, r26	; 0x03
    1674:	bc 83       	std	Y+4, r27	; 0x04
			  {
			     temp8=0;                       // forces a function exit
			  }
		    }
         
	  }while(temp8!=0);
    1676:	11 11       	cpse	r17, r1
    1678:	46 cf       	rjmp	.-372    	; 0x1506 <read_dir_entry+0x90>
    167a:	08 c0       	rjmp	.+16     	; 0x168c <read_dir_entry+0x216>
	}
	else
	{
	   return_clus=no_entry_found;
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e8       	ldi	r21, 0x80	; 128
    1684:	29 83       	std	Y+1, r18	; 0x01
    1686:	3a 83       	std	Y+2, r19	; 0x02
    1688:	4b 83       	std	Y+3, r20	; 0x03
    168a:	5c 83       	std	Y+4, r21	; 0x04
	}
	if(return_clus==0) return_clus=no_entry_found;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	ab 81       	ldd	r26, Y+3	; 0x03
    1692:	bc 81       	ldd	r27, Y+4	; 0x04
    1694:	89 2b       	or	r24, r25
    1696:	8a 2b       	or	r24, r26
    1698:	8b 2b       	or	r24, r27
    169a:	41 f4       	brne	.+16     	; 0x16ac <read_dir_entry+0x236>
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	50 e8       	ldi	r21, 0x80	; 128
    16a4:	29 83       	std	Y+1, r18	; 0x01
    16a6:	3a 83       	std	Y+2, r19	; 0x02
    16a8:	4b 83       	std	Y+3, r20	; 0x03
    16aa:	5c 83       	std	Y+4, r21	; 0x04
   return return_clus;
 }
    16ac:	69 81       	ldd	r22, Y+1	; 0x01
    16ae:	7a 81       	ldd	r23, Y+2	; 0x02
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	2c 96       	adiw	r28, 0x0c	; 12
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	df 90       	pop	r13
    16cc:	cf 90       	pop	r12
    16ce:	bf 90       	pop	r11
    16d0:	af 90       	pop	r10
    16d2:	9f 90       	pop	r9
    16d4:	8f 90       	pop	r8
    16d6:	7f 90       	pop	r7
    16d8:	6f 90       	pop	r6
    16da:	5f 90       	pop	r5
    16dc:	4f 90       	pop	r4
    16de:	3f 90       	pop	r3
    16e0:	2f 90       	pop	r2
    16e2:	08 95       	ret

000016e4 <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
    16e4:	fc 01       	movw	r30, r24
    16e6:	21 81       	ldd	r18, Z+1	; 0x01
    16e8:	62 2b       	or	r22, r18
    16ea:	61 83       	std	Z+1, r22	; 0x01
    16ec:	08 95       	ret

000016ee <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
    16ee:	fc 01       	movw	r30, r24
    16f0:	22 81       	ldd	r18, Z+2	; 0x02
    16f2:	62 2b       	or	r22, r18
    16f4:	62 83       	std	Z+2, r22	; 0x02
    16f6:	08 95       	ret

000016f8 <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
    16f8:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
    16fa:	92 81       	ldd	r25, Z+2	; 0x02
    16fc:	60 95       	com	r22
    16fe:	69 23       	and	r22, r25
    1700:	62 83       	std	Z+2, r22	; 0x02
    1702:	08 95       	ret

00001704 <GPIO_output_init>:
***************************************************************/

void GPIO_output_init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
    1704:	fc 01       	movw	r30, r24
    1706:	21 81       	ldd	r18, Z+1	; 0x01
    1708:	62 2b       	or	r22, r18
    170a:	61 83       	std	Z+1, r22	; 0x01
    170c:	08 95       	ret

0000170e <LEDS_on>:
*            Alternative version below eliminates the if for faster execution
***************************************************************/

void LEDS_on(volatile GPIO_t * port_addr, uint8_t pin_mask, uint8_t active)
{
	if(ACTIVE_LOW==active)
    170e:	41 11       	cpse	r20, r1
    1710:	06 c0       	rjmp	.+12     	; 0x171e <LEDS_on+0x10>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    1712:	fc 01       	movw	r30, r24
    1714:	22 81       	ldd	r18, Z+2	; 0x02
    1716:	60 95       	com	r22
    1718:	62 23       	and	r22, r18
    171a:	62 83       	std	Z+2, r22	; 0x02
    171c:	08 95       	ret
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    171e:	fc 01       	movw	r30, r24
    1720:	22 81       	ldd	r18, Z+2	; 0x02
    1722:	62 2b       	or	r22, r18
    1724:	62 83       	std	Z+2, r22	; 0x02
    1726:	08 95       	ret

00001728 <LEDS_off>:
*            Alternative version below eliminates the if for faster execution
***************************************************************/

void LEDS_off(volatile GPIO_t * port_addr, uint8_t pin_mask, uint8_t active)
{
	if(ACTIVE_LOW==active)
    1728:	41 11       	cpse	r20, r1
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <LEDS_off+0xe>
    172c:	fc 01       	movw	r30, r24
    172e:	22 81       	ldd	r18, Z+2	; 0x02
    1730:	62 2b       	or	r22, r18
    1732:	62 83       	std	Z+2, r22	; 0x02
    1734:	08 95       	ret
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    1736:	fc 01       	movw	r30, r24
    1738:	22 81       	ldd	r18, Z+2	; 0x02
    173a:	60 95       	com	r22
    173c:	62 23       	and	r22, r18
    173e:	62 83       	std	Z+2, r22	; 0x02
    1740:	08 95       	ret

00001742 <long_serial_input>:
RETURNS: unsigned long
CAUTION: UART must be initialized first
************************************************************************/

uint32_t long_serial_input(volatile UART_t * UART_addr)
{
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	2b 97       	sbiw	r28, 0x0b	; 11
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	7c 01       	movw	r14, r24
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	08 c0       	rjmp	.+16     	; 0x177c <long_serial_input+0x3a>
      {
        input_values[index]=0;
    176c:	e1 e0       	ldi	r30, 0x01	; 1
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	ec 0f       	add	r30, r28
    1772:	fd 1f       	adc	r31, r29
    1774:	e8 0f       	add	r30, r24
    1776:	f1 1d       	adc	r31, r1
    1778:	10 82       	st	Z, r1
uint32_t long_serial_input(volatile UART_t * UART_addr)
{
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
    177a:	8f 5f       	subi	r24, 0xFF	; 255
    177c:	8b 30       	cpi	r24, 0x0B	; 11
    177e:	b0 f3       	brcs	.-20     	; 0x176c <long_serial_input+0x2a>
    1780:	88 24       	eor	r8, r8
    1782:	8a 94       	dec	r8
    1784:	98 2c       	mov	r9, r8
    1786:	54 01       	movw	r10, r8
    1788:	00 e0       	ldi	r16, 0x00	; 0
      }
      output_value=0xffffffff;
      index=0;
      do
      {
         input=UART_receive(UART_addr);
    178a:	c7 01       	movw	r24, r14
    178c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_receive>
    1790:	18 2f       	mov	r17, r24
         if((input>=0x30)&&(input<=0x39))
    1792:	80 ed       	ldi	r24, 0xD0	; 208
    1794:	81 0f       	add	r24, r17
    1796:	8a 30       	cpi	r24, 0x0A	; 10
    1798:	68 f4       	brcc	.+26     	; 0x17b4 <long_serial_input+0x72>
         {
           UART_transmit(UART_addr,input);    // echo valid inputs only
    179a:	61 2f       	mov	r22, r17
    179c:	c7 01       	movw	r24, r14
    179e:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
		   input_values[index]=input;
    17a2:	e1 e0       	ldi	r30, 0x01	; 1
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	ec 0f       	add	r30, r28
    17a8:	fd 1f       	adc	r31, r29
    17aa:	e0 0f       	add	r30, r16
    17ac:	f1 1d       	adc	r31, r1
    17ae:	10 83       	st	Z, r17
           index++;
    17b0:	0f 5f       	subi	r16, 0xFF	; 255
    17b2:	2d c0       	rjmp	.+90     	; 0x180e <long_serial_input+0xcc>
         }
         else if ((input==BS)||(input==DEL))  // Putty uses DEL (127) or BS (0x08) for backspace
    17b4:	18 30       	cpi	r17, 0x08	; 8
    17b6:	11 f0       	breq	.+4      	; 0x17bc <long_serial_input+0x7a>
    17b8:	1f 37       	cpi	r17, 0x7F	; 127
    17ba:	a9 f4       	brne	.+42     	; 0x17e6 <long_serial_input+0xa4>
         {
           index--;
    17bc:	01 50       	subi	r16, 0x01	; 1
           input_values[index]=0;
    17be:	e1 e0       	ldi	r30, 0x01	; 1
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	ec 0f       	add	r30, r28
    17c4:	fd 1f       	adc	r31, r29
    17c6:	e0 0f       	add	r30, r16
    17c8:	f1 1d       	adc	r31, r1
    17ca:	10 82       	st	Z, r1
		   UART_transmit(UART_addr,BS);
    17cc:	68 e0       	ldi	r22, 0x08	; 8
    17ce:	c7 01       	movw	r24, r14
    17d0:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
           UART_transmit(UART_addr,space);
    17d4:	60 e2       	ldi	r22, 0x20	; 32
    17d6:	c7 01       	movw	r24, r14
    17d8:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
           UART_transmit(UART_addr,BS);
    17dc:	68 e0       	ldi	r22, 0x08	; 8
    17de:	c7 01       	movw	r24, r14
    17e0:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <long_serial_input+0xcc>
         }
		 //*** Added '.' as a replacement for ENTER since CR or LF does not work for Atmel Studio Data Visualizer ****//
         else if ((input==CR)||(input==LF)||(input=='.'))
    17e6:	1d 30       	cpi	r17, 0x0D	; 13
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <long_serial_input+0xb0>
    17ea:	1a 30       	cpi	r17, 0x0A	; 10
    17ec:	11 f0       	breq	.+4      	; 0x17f2 <long_serial_input+0xb0>
    17ee:	1e 32       	cpi	r17, 0x2E	; 46
    17f0:	71 f4       	brne	.+28     	; 0x180e <long_serial_input+0xcc>
         {
            output_value=atol(input_values);
    17f2:	ce 01       	movw	r24, r28
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	0e 94 17 1b 	call	0x362e	; 0x362e <atol>
    17fa:	4b 01       	movw	r8, r22
    17fc:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
    17fe:	6d e0       	ldi	r22, 0x0D	; 13
    1800:	c7 01       	movw	r24, r14
    1802:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
			UART_transmit(UART_addr,LF);
    1806:	6a e0       	ldi	r22, 0x0A	; 10
    1808:	c7 01       	movw	r24, r14
    180a:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
         }
         if(index==10)
    180e:	0a 30       	cpi	r16, 0x0A	; 10
    1810:	71 f4       	brne	.+28     	; 0x182e <long_serial_input+0xec>
         {
            output_value=atol(input_values);
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	0e 94 17 1b 	call	0x362e	; 0x362e <atol>
    181a:	4b 01       	movw	r8, r22
    181c:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
    181e:	6d e0       	ldi	r22, 0x0D	; 13
    1820:	c7 01       	movw	r24, r14
    1822:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
			UART_transmit(UART_addr,LF);
    1826:	6a e0       	ldi	r22, 0x0A	; 10
    1828:	c7 01       	movw	r24, r14
    182a:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
         }
      }while(output_value==0xffffffff);
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	88 16       	cp	r8, r24
    1832:	98 06       	cpc	r9, r24
    1834:	a8 06       	cpc	r10, r24
    1836:	b8 06       	cpc	r11, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <long_serial_input+0xfa>
    183a:	a7 cf       	rjmp	.-178    	; 0x178a <long_serial_input+0x48>

return output_value;
}
    183c:	c5 01       	movw	r24, r10
    183e:	b4 01       	movw	r22, r8
    1840:	2b 96       	adiw	r28, 0x0b	; 11
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	08 95       	ret

00001862 <main>:


const char test_string[15] PROGMEM = "Hello World!\n\r";

int main(void)
{
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	c9 51       	subi	r28, 0x19	; 25
    1880:	d2 40       	sbci	r29, 0x02	; 2
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
	//TWI vars
	uint8_t error = 0;
	uint32_t i2c_freq = 50000; /* 100k */ 
	uint8_t array[3] = {0,0,0};
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	1a 82       	std	Y+2, r1	; 0x02
    1890:	1b 82       	std	Y+3, r1	; 0x03
	/************
	*
	* Exp #4 TWI - Initialize STA013
	*
	************/
	UART_init(UART1, 9600); /* baud = 9600 */ 
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	55 e2       	ldi	r21, 0x25	; 37
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	88 ec       	ldi	r24, 0xC8	; 200
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 01 1a 	call	0x3402	; 0x3402 <UART_init>

	error = TWI_master_init(TWI1, i2c_freq); 
    18a2:	40 e5       	ldi	r20, 0x50	; 80
    18a4:	53 ec       	ldi	r21, 0xC3	; 195
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	88 ed       	ldi	r24, 0xD8	; 216
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 99 17 	call	0x2f32	; 0x2f32 <TWI_master_init>
	if (error != 0)
    18b2:	88 23       	and	r24, r24
    18b4:	39 f0       	breq	.+14     	; 0x18c4 <main+0x62>
	{
		UART_transmit_string(UART1, "twi_init_fail\n", 14);
    18b6:	4e e0       	ldi	r20, 0x0E	; 14
    18b8:	6e e0       	ldi	r22, 0x0E	; 14
    18ba:	71 e0       	ldi	r23, 0x01	; 1
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>


const char test_string[15] PROGMEM = "Hello World!\n\r";

int main(void)
{
    18c4:	1a e0       	ldi	r17, 0x0A	; 10
		UART_transmit_string(UART1, "twi_init_fail\n", 14);
	}

	do 
	{
	 	error = TWI_master_receive(TWI1, 0x43, 0, 0, 3, array);
    18c6:	ce 01       	movw	r24, r28
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	6c 01       	movw	r12, r24
    18cc:	0f 2e       	mov	r0, r31
    18ce:	f3 e0       	ldi	r31, 0x03	; 3
    18d0:	ef 2e       	mov	r14, r31
    18d2:	f1 2c       	mov	r15, r1
    18d4:	f0 2d       	mov	r31, r0
    18d6:	00 e0       	ldi	r16, 0x00	; 0
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	a9 01       	movw	r20, r18
    18de:	63 e4       	ldi	r22, 0x43	; 67
    18e0:	88 ed       	ldi	r24, 0xD8	; 216
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_master_receive>
	 	timer--;
    18e8:	11 50       	subi	r17, 0x01	; 1
	} while ((error > 0) && (timer>0));
    18ea:	88 23       	and	r24, r24
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <main+0x90>
    18ee:	11 11       	cpse	r17, r1
    18f0:	ea cf       	rjmp	.-44     	; 0x18c6 <main+0x64>
	printError(error);
    18f2:	0e 94 bb 19 	call	0x3376	; 0x3376 <printError>
	STA013_Init();
    18f6:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <STA013_Init>
	
	sta_debug_test();
    18fa:	0e 94 2d 19 	call	0x325a	; 0x325a <sta_debug_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18fe:	9f ef       	ldi	r25, 0xFF	; 255
    1900:	23 ed       	ldi	r18, 0xD3	; 211
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	91 50       	subi	r25, 0x01	; 1
    1906:	20 40       	sbci	r18, 0x00	; 0
    1908:	80 40       	sbci	r24, 0x00	; 0
    190a:	e1 f7       	brne	.-8      	; 0x1904 <main+0xa2>
    190c:	00 c0       	rjmp	.+0      	; 0x190e <main+0xac>
    190e:	00 00       	nop
	_delay_ms(1000);

	UART_transmit_string(UART1, "\nEND\n", 5);
    1910:	45 e0       	ldi	r20, 0x05	; 5
    1912:	6d e1       	ldi	r22, 0x1D	; 29
    1914:	71 e0       	ldi	r23, 0x01	; 1
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
	*
	* Exp #5 FAT - Read SD card
	*
	************/
	
	SPI_master_init(SPI0, 400000U);
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5a e1       	ldi	r21, 0x1A	; 26
    1922:	66 e0       	ldi	r22, 0x06	; 6
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	8c e4       	ldi	r24, 0x4C	; 76
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 c7 13 	call	0x278e	; 0x278e <SPI_master_init>
	
	/* initialize SS AKA CS */
	GPIO_Output_Init(PB, (1<<4));
    192e:	60 e1       	ldi	r22, 0x10	; 16
    1930:	83 e2       	ldi	r24, 0x23	; 35
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_Output_Init>
	
	do
	{
		typederror = SD_init(SPI0);
    1938:	8c e4       	ldi	r24, 0x4C	; 76
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <SD_init>
    1940:	18 2f       	mov	r17, r24
		if (typederror != 0)
    1942:	88 23       	and	r24, r24
    1944:	29 f0       	breq	.+10     	; 0x1950 <main+0xee>
		{
			display_error(UART1, typederror);
    1946:	68 2f       	mov	r22, r24
    1948:	88 ec       	ldi	r24, 0xC8	; 200
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 6f 14 	call	0x28de	; 0x28de <display_error>
		}
	}while(typederror != 0);
    1950:	11 11       	cpse	r17, r1
    1952:	f2 cf       	rjmp	.-28     	; 0x1938 <main+0xd6>
	
	FS_values_t* accessor_fileSystem = export_drive_values();
    1954:	0e 94 0f 09 	call	0x121e	; 0x121e <export_drive_values>
    1958:	8c 01       	movw	r16, r24
	FS_values_t file_system;
	mount_drive(&file_system);
    195a:	ce 01       	movw	r24, r28
    195c:	8c 5f       	subi	r24, 0xFC	; 252
    195e:	9d 4f       	sbci	r25, 0xFD	; 253
    1960:	0e 94 55 10 	call	0x20aa	; 0x20aa <mount_drive>
	
	/* Fills the file system struct to match */
	*accessor_fileSystem = file_system;
    1964:	86 e1       	ldi	r24, 0x16	; 22
    1966:	fe 01       	movw	r30, r28
    1968:	ec 5f       	subi	r30, 0xFC	; 252
    196a:	fd 4f       	sbci	r31, 0xFD	; 253
    196c:	d8 01       	movw	r26, r16
    196e:	01 90       	ld	r0, Z+
    1970:	0d 92       	st	X+, r0
    1972:	8a 95       	dec	r24
    1974:	e1 f7       	brne	.-8      	; 0x196e <main+0x10c>
	
	uint32_t FirstRootDirSector = first_sector(0);
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	cb 01       	movw	r24, r22
    197c:	0e 94 32 12 	call	0x2464	; 0x2464 <first_sector>
    1980:	4b 01       	movw	r8, r22
    1982:	5c 01       	movw	r10, r24

	/* SPI can be reinitialized at a faster freq, now that the SD has been initialized. */
	SPI_master_init(SPI0, 8000000U);
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	52 e1       	ldi	r21, 0x12	; 18
    1988:	6a e7       	ldi	r22, 0x7A	; 122
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	8c e4       	ldi	r24, 0x4C	; 76
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 c7 13 	call	0x278e	; 0x278e <SPI_master_init>
	
	while (1)
	{
		typederror = read_sector(FirstRootDirSector, 512, mem_block);
    1994:	9e 01       	movw	r18, r28
    1996:	2c 5f       	subi	r18, 0xFC	; 252
    1998:	3f 4f       	sbci	r19, 0xFF	; 255
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	52 e0       	ldi	r21, 0x02	; 2
    199e:	c5 01       	movw	r24, r10
    19a0:	b4 01       	movw	r22, r8
    19a2:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
		
		if(typederror != 0)
    19a6:	81 11       	cpse	r24, r1
    19a8:	3e c0       	rjmp	.+124    	; 0x1a26 <main+0x1c4>
		
		
		userDirNum = FirstRootDirSector;
		while(1)
		{
			numEntries = print_directory(userDirNum, mem_block);
    19aa:	ae 01       	movw	r20, r28
    19ac:	4c 5f       	subi	r20, 0xFC	; 252
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	c5 01       	movw	r24, r10
    19b2:	b4 01       	movw	r22, r8
    19b4:	0e 94 12 09 	call	0x1224	; 0x1224 <print_directory>
    19b8:	f8 2e       	mov	r15, r24
			UART_transmit_string(UART1, "Entry Number:\n", 14);
    19ba:	4e e0       	ldi	r20, 0x0E	; 14
    19bc:	63 e2       	ldi	r22, 0x23	; 35
    19be:	71 e0       	ldi	r23, 0x01	; 1
    19c0:	88 ec       	ldi	r24, 0xC8	; 200
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			userDirNum = long_serial_input(UART1);
    19c8:	88 ec       	ldi	r24, 0xC8	; 200
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 a1 0b 	call	0x1742	; 0x1742 <long_serial_input>
			
			while(userDirNum > numEntries)
    19d0:	0b c0       	rjmp	.+22     	; 0x19e8 <main+0x186>
			{
				UART_transmit_string(UART1, "Invalid Entry Number. Provide a new one:\n", 41);
    19d2:	49 e2       	ldi	r20, 0x29	; 41
    19d4:	62 e3       	ldi	r22, 0x32	; 50
    19d6:	71 e0       	ldi	r23, 0x01	; 1
    19d8:	88 ec       	ldi	r24, 0xC8	; 200
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
				userDirNum = long_serial_input(UART1);
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <long_serial_input>
		{
			numEntries = print_directory(userDirNum, mem_block);
			UART_transmit_string(UART1, "Entry Number:\n", 14);
			userDirNum = long_serial_input(UART1);
			
			while(userDirNum > numEntries)
    19e8:	0f 2d       	mov	r16, r15
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	06 17       	cp	r16, r22
    19f2:	17 07       	cpc	r17, r23
    19f4:	28 07       	cpc	r18, r24
    19f6:	39 07       	cpc	r19, r25
    19f8:	60 f3       	brcs	.-40     	; 0x19d2 <main+0x170>
			{
				UART_transmit_string(UART1, "Invalid Entry Number. Provide a new one:\n", 41);
				userDirNum = long_serial_input(UART1);
			}
			
			userClusNum = read_dir_entry(FirstRootDirSector, userDirNum, mem_block);
    19fa:	9e 01       	movw	r18, r28
    19fc:	2c 5f       	subi	r18, 0xFC	; 252
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	ab 01       	movw	r20, r22
    1a02:	c5 01       	movw	r24, r10
    1a04:	b4 01       	movw	r22, r8
    1a06:	0e 94 3b 0a 	call	0x1476	; 0x1476 <read_dir_entry>
			
			/* For Directory */
			if((userClusNum & 0x10000000) != 0)
    1a0a:	94 ff       	sbrs	r25, 4
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <main+0x1b8>
			{
				userClusNum &= 0x0FFFFFFF; /* mask upper 4 off */
    1a0e:	9f 70       	andi	r25, 0x0F	; 15
				userDirNum = first_sector(userClusNum);
    1a10:	0e 94 32 12 	call	0x2464	; 0x2464 <first_sector>
    1a14:	4b 01       	movw	r8, r22
    1a16:	5c 01       	movw	r10, r24
    1a18:	c8 cf       	rjmp	.-112    	; 0x19aa <main+0x148>
				FirstRootDirSector = userDirNum;
			}
			/* For File */
			else
			{
				print_file(userClusNum, mem_block);
    1a1a:	ae 01       	movw	r20, r28
    1a1c:	4c 5f       	subi	r20, 0xFC	; 252
    1a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a20:	0e 94 bc 12 	call	0x2578	; 0x2578 <print_file>
    1a24:	c2 cf       	rjmp	.-124    	; 0x19aa <main+0x148>
	{
		typederror = read_sector(FirstRootDirSector, 512, mem_block);
		
		if(typederror != 0)
		{
			display_error(UART1, typederror);
    1a26:	68 2f       	mov	r22, r24
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 6f 14 	call	0x28de	; 0x28de <display_error>
				userDirNum = FirstRootDirSector;
			}
		}
		
	}
}
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	c7 5e       	subi	r28, 0xE7	; 231
    1a36:	dd 4f       	sbci	r29, 0xFD	; 253
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	bf 90       	pop	r11
    1a54:	af 90       	pop	r10
    1a56:	9f 90       	pop	r9
    1a58:	8f 90       	pop	r8
    1a5a:	08 95       	ret

00001a5c <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(uint8_t * array_in, uint16_t offset)
{
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	8c 01       	movw	r16, r24
    1a6c:	6b 01       	movw	r12, r22
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
    1a6e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <export_print_buffer>
    1a72:	f8 2e       	mov	r15, r24
    1a74:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
    1a76:	0c 0d       	add	r16, r12
    1a78:	1d 1d       	adc	r17, r13
   sprintf(prnt_bffr, "%p ",input);
    1a7a:	1f 93       	push	r17
    1a7c:	0f 93       	push	r16
    1a7e:	8c e5       	ldi	r24, 0x5C	; 92
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	9f 93       	push	r25
    1a84:	8f 93       	push	r24
    1a86:	df 93       	push	r29
    1a88:	ff 92       	push	r15
    1a8a:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	6f 2d       	mov	r22, r15
    1a92:	7d 2f       	mov	r23, r29
    1a94:	88 ec       	ldi	r24, 0xC8	; 200
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
    1a9c:	df 92       	push	r13
    1a9e:	cf 92       	push	r12
    1aa0:	80 e6       	ldi	r24, 0x60	; 96
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	9f 93       	push	r25
    1aa6:	8f 93       	push	r24
    1aa8:	df 93       	push	r29
    1aaa:	ff 92       	push	r15
    1aac:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	6f 2d       	mov	r22, r15
    1ab4:	7d 2f       	mov	r23, r29
    1ab6:	88 ec       	ldi	r24, 0xC8	; 200
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
   for (index=0;index<16;index++)
    1abe:	8d b7       	in	r24, 0x3d	; 61
    1ac0:	9e b7       	in	r25, 0x3e	; 62
    1ac2:	0c 96       	adiw	r24, 0x0c	; 12
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	9e bf       	out	0x3e, r25	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	8d bf       	out	0x3d, r24	; 61
    1ace:	c0 e0       	ldi	r28, 0x00	; 0
    1ad0:	1c c0       	rjmp	.+56     	; 0x1b0a <print_16bytes+0xae>
   {
      dat=*(input+index);
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	ec 0f       	add	r30, r28
    1ad6:	f1 1d       	adc	r31, r1
    1ad8:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
    1ada:	1f 92       	push	r1
    1adc:	8f 93       	push	r24
    1ade:	2a e6       	ldi	r18, 0x6A	; 106
    1ae0:	31 e0       	ldi	r19, 0x01	; 1
    1ae2:	3f 93       	push	r19
    1ae4:	2f 93       	push	r18
    1ae6:	df 93       	push	r29
    1ae8:	ff 92       	push	r15
    1aea:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
	  UART_transmit_string(print_port,prnt_bffr,0);
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	6f 2d       	mov	r22, r15
    1af2:	7d 2f       	mov	r23, r29
    1af4:	88 ec       	ldi	r24, 0xC8	; 200
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_transmit_string(print_port,prnt_bffr,0);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_transmit_string(print_port,prnt_bffr,0);
   for (index=0;index<16;index++)
    1afc:	cf 5f       	subi	r28, 0xFF	; 255
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	c0 31       	cpi	r28, 0x10	; 16
    1b0c:	10 f3       	brcs	.-60     	; 0x1ad2 <print_16bytes+0x76>
    1b0e:	c0 e0       	ldi	r28, 0x00	; 0
    1b10:	0e c0       	rjmp	.+28     	; 0x1b2e <print_16bytes+0xd2>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
    1b12:	f8 01       	movw	r30, r16
    1b14:	ec 0f       	add	r30, r28
    1b16:	f1 1d       	adc	r31, r1
    1b18:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
    1b1a:	80 ee       	ldi	r24, 0xE0	; 224
    1b1c:	86 0f       	add	r24, r22
    1b1e:	80 36       	cpi	r24, 0x60	; 96
    1b20:	08 f0       	brcs	.+2      	; 0x1b24 <print_16bytes+0xc8>
    1b22:	6e e2       	ldi	r22, 0x2E	; 46
      UART_transmit(print_port,dat);
    1b24:	88 ec       	ldi	r24, 0xC8	; 200
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
    1b2c:	cf 5f       	subi	r28, 0xFF	; 255
    1b2e:	c0 31       	cpi	r28, 0x10	; 16
    1b30:	80 f3       	brcs	.-32     	; 0x1b12 <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_transmit(print_port,dat);
   }
   UART_transmit(print_port,CR);
    1b32:	6d e0       	ldi	r22, 0x0D	; 13
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
   UART_transmit(print_port,LF);
    1b3c:	6a e0       	ldi	r22, 0x0A	; 10
    1b3e:	88 ec       	ldi	r24, 0xC8	; 200
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	ff 90       	pop	r15
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	08 95       	ret

00001b56 <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(uint8_t * array_in, uint16_t number_of_bytes)
{
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	7c 01       	movw	r14, r24
    1b64:	8b 01       	movw	r16, r22
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
    1b66:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <export_print_buffer>
    1b6a:	ec 01       	movw	r28, r24
   
   input = 0;
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	bc 01       	movw	r22, r24
    1b70:	84 eb       	ldi	r24, 0xB4	; 180
    1b72:	90 e1       	ldi	r25, 0x10	; 16
    1b74:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
   UART_transmit_string(print_port,prnt_bffr,0);
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	be 01       	movw	r22, r28
    1b7c:	88 ec       	ldi	r24, 0xC8	; 200
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
   
   input = 0;
    1b84:	c0 e0       	ldi	r28, 0x00	; 0
    1b86:	d0 e0       	ldi	r29, 0x00	; 0
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
   UART_transmit_string(print_port,prnt_bffr,0);
   do
   {
      print_16bytes(array_in,input);
    1b88:	be 01       	movw	r22, r28
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <print_16bytes>
      input+=16;
    1b90:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
    1b92:	c0 17       	cp	r28, r16
    1b94:	d1 07       	cpc	r29, r17
    1b96:	c0 f3       	brcs	.-16     	; 0x1b88 <print_memory+0x32>
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	08 95       	ret

00001ba6 <SD_CS_active>:
void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin);
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin);

void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
    1ba6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <GPIO_Output_Clear>
    1baa:	08 95       	ret

00001bac <SD_CS_inactive>:
}
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
    1bac:	0e 94 77 0b 	call	0x16ee	; 0x16ee <GPIO_Output_Set>
    1bb0:	08 95       	ret

00001bb2 <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	1f 92       	push	r1
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
    1bcc:	60 34       	cpi	r22, 0x40	; 64
    1bce:	e0 f5       	brcc	.+120    	; 0x1c48 <send_command+0x96>
    1bd0:	49 01       	movw	r8, r18
    1bd2:	5a 01       	movw	r10, r20
    1bd4:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
    1bd6:	16 2f       	mov	r17, r22
    1bd8:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
    1bda:	ae 01       	movw	r20, r28
    1bdc:	4f 5f       	subi	r20, 0xFF	; 255
    1bde:	5f 4f       	sbci	r21, 0xFF	; 255
    1be0:	61 2f       	mov	r22, r17
    1be2:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
    1be6:	81 11       	cpse	r24, r1
    1be8:	30 c0       	rjmp	.+96     	; 0x1c4a <send_command+0x98>
    1bea:	04 e0       	ldi	r16, 0x04	; 4
    1bec:	1c c0       	rjmp	.+56     	; 0x1c26 <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
    1bee:	40 2f       	mov	r20, r16
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	41 50       	subi	r20, 0x01	; 1
    1bf4:	51 09       	sbc	r21, r1
    1bf6:	44 0f       	add	r20, r20
    1bf8:	55 1f       	adc	r21, r21
    1bfa:	44 0f       	add	r20, r20
    1bfc:	55 1f       	adc	r21, r21
    1bfe:	44 0f       	add	r20, r20
    1c00:	55 1f       	adc	r21, r21
    1c02:	c5 01       	movw	r24, r10
    1c04:	b4 01       	movw	r22, r8
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <send_command+0x5e>
    1c08:	96 95       	lsr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	77 95       	ror	r23
    1c0e:	67 95       	ror	r22
    1c10:	4a 95       	dec	r20
    1c12:	d2 f7       	brpl	.-12     	; 0x1c08 <send_command+0x56>
    1c14:	ae 01       	movw	r20, r28
    1c16:	4f 5f       	subi	r20, 0xFF	; 255
    1c18:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
    1c20:	81 11       	cpse	r24, r1
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    1c24:	01 50       	subi	r16, 0x01	; 1
    1c26:	01 11       	cpse	r16, r1
    1c28:	e2 cf       	rjmp	.-60     	; 0x1bee <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
    1c2a:	10 34       	cpi	r17, 0x40	; 64
    1c2c:	11 f0       	breq	.+4      	; 0x1c32 <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
    1c2e:	61 e0       	ldi	r22, 0x01	; 1
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
    1c32:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
    1c34:	18 34       	cpi	r17, 0x48	; 72
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
    1c38:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
    1c3a:	ae 01       	movw	r20, r28
    1c3c:	4f 5f       	subi	r20, 0xFF	; 255
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	c7 01       	movw	r24, r14
    1c42:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
	
	//6: return error status
	return errorStatus;
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <send_command+0x98>
	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
    1c48:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
    1c4a:	0f 90       	pop	r0
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	bf 90       	pop	r11
    1c5a:	af 90       	pop	r10
    1c5c:	9f 90       	pop	r9
    1c5e:	8f 90       	pop	r8
    1c60:	08 95       	ret

00001c62 <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	1f 92       	push	r1
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	7c 01       	movw	r14, r24
    1c7a:	06 2f       	mov	r16, r22
    1c7c:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
    1c7e:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
    1c80:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
    1c82:	ae 01       	movw	r20, r28
    1c84:	4f 5f       	subi	r20, 0xFF	; 255
    1c86:	5f 4f       	sbci	r21, 0xFF	; 255
    1c88:	6f ef       	ldi	r22, 0xFF	; 255
    1c8a:	c7 01       	movw	r24, r14
    1c8c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
		timeout++;
    1c90:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	8f 3f       	cpi	r24, 0xFF	; 255
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <receive_response+0x3a>
    1c98:	11 11       	cpse	r17, r1
    1c9a:	f3 cf       	rjmp	.-26     	; 0x1c82 <receive_response+0x20>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
    1c9c:	11 23       	and	r17, r17
    1c9e:	29 f1       	breq	.+74     	; 0x1cea <receive_response+0x88>
	{
			return ERROR_TIMEOUT;
		}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	9e 7f       	andi	r25, 0xFE	; 254
    1ca4:	21 f0       	breq	.+8      	; 0x1cae <receive_response+0x4c>
	{
		*array = data; //return value to see error
    1ca6:	f6 01       	movw	r30, r12
    1ca8:	80 83       	st	Z, r24
		return ERROR_SD;
    1caa:	8d ef       	ldi	r24, 0xFD	; 253
    1cac:	1f c0       	rjmp	.+62     	; 0x1cec <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
    1cae:	f6 01       	movw	r30, r12
    1cb0:	80 83       	st	Z, r24
		if(number_of_bytes>1)
    1cb2:	02 30       	cpi	r16, 0x02	; 2
    1cb4:	78 f4       	brcc	.+30     	; 0x1cd4 <receive_response+0x72>
    1cb6:	11 c0       	rjmp	.+34     	; 0x1cda <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
    1cb8:	ae 01       	movw	r20, r28
    1cba:	4f 5f       	subi	r20, 0xFF	; 255
    1cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbe:	6f ef       	ldi	r22, 0xFF	; 255
    1cc0:	c7 01       	movw	r24, r14
    1cc2:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
				array[i] = data;
    1cc6:	f6 01       	movw	r30, r12
    1cc8:	e1 0f       	add	r30, r17
    1cca:	f1 1d       	adc	r31, r1
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
    1cd0:	1f 5f       	subi	r17, 0xFF	; 255
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <receive_response+0x74>
    1cd4:	11 e0       	ldi	r17, 0x01	; 1
    1cd6:	01 17       	cp	r16, r17
    1cd8:	78 f7       	brcc	.-34     	; 0x1cb8 <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
    1cda:	ae 01       	movw	r20, r28
    1cdc:	4f 5f       	subi	r20, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	c7 01       	movw	r24, r14
    1ce4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
	// 4. return error value
	return errorStatus;
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <receive_response+0x8a>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
	{
			return ERROR_TIMEOUT;
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
    1cec:	0f 90       	pop	r0
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	df 90       	pop	r13
    1cfc:	cf 90       	pop	r12
    1cfe:	08 95       	ret

00001d00 <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {	
    1d00:	8f 92       	push	r8
    1d02:	9f 92       	push	r9
    1d04:	af 92       	push	r10
    1d06:	bf 92       	push	r11
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	29 97       	sbiw	r28, 0x09	; 9
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	7c 01       	movw	r14, r24
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
    1d26:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
     uint8_t receive_array[8] = {0,0,0,0,0,0,0,0};
    1d28:	fe 01       	movw	r30, r28
    1d2a:	32 96       	adiw	r30, 0x02	; 2
    1d2c:	88 e0       	ldi	r24, 0x08	; 8
    1d2e:	df 01       	movw	r26, r30
    1d30:	1d 92       	st	X+, r1
    1d32:	8a 95       	dec	r24
    1d34:	e9 f7       	brne	.-6      	; 0x1d30 <SD_init+0x30>
	 uint32_t ACMD41_arg = 0x00000000;
	 uint32_t CMD16_arg = 0x00000200;
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
    1d36:	60 e1       	ldi	r22, 0x10	; 16
    1d38:	83 e2       	ldi	r24, 0x23	; 35
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <SD_init+0x54>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
    1d44:	ae 01       	movw	r20, r28
    1d46:	4f 5f       	subi	r20, 0xFF	; 255
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	6f ef       	ldi	r22, 0xFF	; 255
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	0e 94 11 14 	call	0x2822	; 0x2822 <SPI_transmit>
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
    1d52:	1f 5f       	subi	r17, 0xFF	; 255
    1d54:	18 30       	cpi	r17, 0x08	; 8
    1d56:	b0 f3       	brcs	.-20     	; 0x1d44 <SD_init+0x44>
     *
     *  CMD0
     *
     *************/
	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
    1d58:	60 e1       	ldi	r22, 0x10	; 16
    1d5a:	83 e2       	ldi	r24, 0x23	; 35
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <SD_CS_active>

	 errorStatus = send_command(SPI_addr, CMD0, arg);
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	a9 01       	movw	r20, r18
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
	 if (errorStatus == 0)
    1d70:	81 11       	cpse	r24, r1
    1d72:	0c c0       	rjmp	.+24     	; 0x1d8c <SD_init+0x8c>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
    1d74:	ae 01       	movw	r20, r28
    1d76:	4e 5f       	subi	r20, 0xFE	; 254
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <receive_response>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
    1d82:	60 e1       	ldi	r22, 0x10	; 16
    1d84:	83 e2       	ldi	r24, 0x23	; 35
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	 }
	 if(receive_array[0] != 0x01)
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <SD_init+0x94>
    1d92:	dc c0       	rjmp	.+440    	; 0x1f4c <SD_init+0x24c>
     *
     *  CMD8
     *
     *************/
	 //STEP C) send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 SD_CS_active(PB, (1<<4));
    1d94:	60 e1       	ldi	r22, 0x10	; 16
    1d96:	83 e2       	ldi	r24, 0x23	; 35
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <SD_CS_active>
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
    1d9e:	2a ea       	ldi	r18, 0xAA	; 170
    1da0:	31 e0       	ldi	r19, 0x01	; 1
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	68 e0       	ldi	r22, 0x08	; 8
    1da8:	c7 01       	movw	r24, r14
    1daa:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
    1dae:	18 2f       	mov	r17, r24
	 if(errorStatus == 0)
    1db0:	81 11       	cpse	r24, r1
    1db2:	0d c0       	rjmp	.+26     	; 0x1dce <SD_init+0xce>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
    1db4:	ae 01       	movw	r20, r28
    1db6:	4e 5f       	subi	r20, 0xFE	; 254
    1db8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dba:	65 e0       	ldi	r22, 0x05	; 5
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <receive_response>
    1dc2:	18 2f       	mov	r17, r24
	 	SD_CS_inactive(PB, (1<<4));
    1dc4:	60 e1       	ldi	r22, 0x10	; 16
    1dc6:	83 e2       	ldi	r24, 0x23	; 35
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 //check for R1 reponse
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	59 f4       	brne	.+22     	; 0x1dea <SD_init+0xea>
    1dd4:	11 11       	cpse	r17, r1
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <SD_init+0xea>
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <SD_init+0xe0>
    1dde:	b8 c0       	rjmp	.+368    	; 0x1f50 <SD_init+0x250>
    1de0:	8e 81       	ldd	r24, Y+6	; 0x06
    1de2:	8a 3a       	cpi	r24, 0xAA	; 170
    1de4:	49 f0       	breq	.+18     	; 0x1df8 <SD_init+0xf8>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
    1de6:	8c ef       	ldi	r24, 0xFC	; 252
    1de8:	d4 c0       	rjmp	.+424    	; 0x1f92 <SD_init+0x292>
		}
	 }
	 else if(receive_array[0] == 0x05) //old card
    1dea:	85 30       	cpi	r24, 0x05	; 5
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <SD_init+0xf0>
    1dee:	b2 c0       	rjmp	.+356    	; 0x1f54 <SD_init+0x254>
	 {
		ACMD41_arg = 0x00000000; //v1.x
    1df0:	81 2c       	mov	r8, r1
    1df2:	91 2c       	mov	r9, r1
    1df4:	54 01       	movw	r10, r8
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <SD_init+0x102>
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
    1df8:	81 2c       	mov	r8, r1
    1dfa:	91 2c       	mov	r9, r1
    1dfc:	54 01       	movw	r10, r8
    1dfe:	68 94       	set
    1e00:	b6 f8       	bld	r11, 6
	/**************************
	*
	* 	CMD58
	*
	**************************/
	SD_CS_active(PB, (1<<4));
    1e02:	60 e1       	ldi	r22, 0x10	; 16
    1e04:	83 e2       	ldi	r24, 0x23	; 35
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	a9 01       	movw	r20, r18
    1e12:	6a e3       	ldi	r22, 0x3A	; 58
    1e14:	c7 01       	movw	r24, r14
    1e16:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
	
	//check error
	if (errorStatus != 0x00)
    1e1a:	81 11       	cpse	r24, r1
    1e1c:	9d c0       	rjmp	.+314    	; 0x1f58 <SD_init+0x258>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 plus 32bit OCR. bit 30 of OCR should be a 1 for high-capacity. SPI clock freq can be increased if that passes.
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
    1e1e:	ae 01       	movw	r20, r28
    1e20:	4e 5f       	subi	r20, 0xFE	; 254
    1e22:	5f 4f       	sbci	r21, 0xFF	; 255
    1e24:	65 e0       	ldi	r22, 0x05	; 5
    1e26:	c7 01       	movw	r24, r14
    1e28:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <receive_response>
    1e2c:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
    1e2e:	60 e1       	ldi	r22, 0x10	; 16
    1e30:	83 e2       	ldi	r24, 0x23	; 35
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
    1e38:	11 11       	cpse	r17, r1
    1e3a:	90 c0       	rjmp	.+288    	; 0x1f5c <SD_init+0x25c>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <SD_init+0x144>
    1e42:	8e c0       	rjmp	.+284    	; 0x1f60 <SD_init+0x260>
	{
		return ERROR_CMD58;
	}
	if((receive_array[2] & 0xFC) != 0xFC)
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	8c 7f       	andi	r24, 0xFC	; 252
    1e48:	8c 3f       	cpi	r24, 0xFC	; 252
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <SD_init+0x14e>
    1e4c:	8b c0       	rjmp	.+278    	; 0x1f64 <SD_init+0x264>
    1e4e:	00 e0       	ldi	r16, 0x00	; 0
    1e50:	10 e0       	ldi	r17, 0x00	; 0
    1e52:	33 c0       	rjmp	.+102    	; 0x1eba <SD_init+0x1ba>
	*
	**************************/
	
	while(receive_array[0] != 0x00)
	{
		SD_CS_active(PB, (1<<4));
    1e54:	60 e1       	ldi	r22, 0x10	; 16
    1e56:	83 e2       	ldi	r24, 0x23	; 35
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <SD_CS_active>
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	a9 01       	movw	r20, r18
    1e64:	67 e3       	ldi	r22, 0x37	; 55
    1e66:	c7 01       	movw	r24, r14
    1e68:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
		if(errorStatus != 0x00)
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	7c c0       	rjmp	.+248    	; 0x1f68 <SD_init+0x268>
		{
			return ERROR_CMD55;
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
    1e70:	ae 01       	movw	r20, r28
    1e72:	4e 5f       	subi	r20, 0xFE	; 254
    1e74:	5f 4f       	sbci	r21, 0xFF	; 255
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	c7 01       	movw	r24, r14
    1e7a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <receive_response>
		
		if(receive_array[0] != 0x01)
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <SD_init+0x186>
    1e84:	73 c0       	rjmp	.+230    	; 0x1f6c <SD_init+0x26c>
		{
			return ERROR_CMD55;
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
    1e86:	a5 01       	movw	r20, r10
    1e88:	94 01       	movw	r18, r8
    1e8a:	69 e2       	ldi	r22, 0x29	; 41
    1e8c:	c7 01       	movw	r24, r14
    1e8e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
		if(errorStatus != 0x00)
    1e92:	81 11       	cpse	r24, r1
    1e94:	6d c0       	rjmp	.+218    	; 0x1f70 <SD_init+0x270>
		{
			return ERROR_CMD41;
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
    1e96:	ae 01       	movw	r20, r28
    1e98:	4e 5f       	subi	r20, 0xFE	; 254
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	c7 01       	movw	r24, r14
    1ea0:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <receive_response>
		if(errorStatus != 0x00)
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	66 c0       	rjmp	.+204    	; 0x1f74 <SD_init+0x274>
		{
			return ERROR_CMD41;
		}
		timeout++;
    1ea8:	0f 5f       	subi	r16, 0xFF	; 255
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
		if (timeout == 0)
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <SD_init+0x1b0>
    1eae:	64 c0       	rjmp	.+200    	; 0x1f78 <SD_init+0x278>
		{
			return ERROR_CMD41_TIMEOUT;
		}
		SD_CS_inactive(PB, (1<<4));
    1eb0:	60 e1       	ldi	r22, 0x10	; 16
    1eb2:	83 e2       	ldi	r24, 0x23	; 35
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	*
	* 	ACMD41  -- try a new sampling rate, not 10
	*
	**************************/
	
	while(receive_array[0] != 0x00)
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	ca cf       	rjmp	.-108    	; 0x1e54 <SD_init+0x154>
	/**************************
	*
	* 	CMD58 again
	*
	**************************/
	SD_CS_active(PB, (1<<4));
    1ec0:	60 e1       	ldi	r22, 0x10	; 16
    1ec2:	83 e2       	ldi	r24, 0x23	; 35
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	a9 01       	movw	r20, r18
    1ed0:	6a e3       	ldi	r22, 0x3A	; 58
    1ed2:	c7 01       	movw	r24, r14
    1ed4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
	
	//check error
	if (errorStatus != 0x00)
    1ed8:	81 11       	cpse	r24, r1
    1eda:	50 c0       	rjmp	.+160    	; 0x1f7c <SD_init+0x27c>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 + 32bit OCR
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
    1edc:	ae 01       	movw	r20, r28
    1ede:	4e 5f       	subi	r20, 0xFE	; 254
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	65 e0       	ldi	r22, 0x05	; 5
    1ee4:	c7 01       	movw	r24, r14
    1ee6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <receive_response>
    1eea:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
    1eec:	60 e1       	ldi	r22, 0x10	; 16
    1eee:	83 e2       	ldi	r24, 0x23	; 35
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
    1ef6:	11 11       	cpse	r17, r1
    1ef8:	43 c0       	rjmp	.+134    	; 0x1f80 <SD_init+0x280>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	88 23       	and	r24, r24
    1efe:	0c f0       	brlt	.+2      	; 0x1f02 <SD_init+0x202>
    1f00:	41 c0       	rjmp	.+130    	; 0x1f84 <SD_init+0x284>
	{
		return ERROR_CMD58;
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
    1f02:	80 7c       	andi	r24, 0xC0	; 192
    1f04:	80 3c       	cpi	r24, 0xC0	; 192
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <SD_init+0x20a>
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <SD_init+0x288>
	*
	* 	CMD16 
	*
	**************************/
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
    1f0a:	60 e1       	ldi	r22, 0x10	; 16
    1f0c:	83 e2       	ldi	r24, 0x23	; 35
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	32 e0       	ldi	r19, 0x02	; 2
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	60 e1       	ldi	r22, 0x10	; 16
    1f1e:	c7 01       	movw	r24, r14
    1f20:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
	if (errorStatus != 0)
    1f24:	81 11       	cpse	r24, r1
    1f26:	32 c0       	rjmp	.+100    	; 0x1f8c <SD_init+0x28c>
	{
		return ERROR_CMD16;
	}
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
    1f28:	ae 01       	movw	r20, r28
    1f2a:	4e 5f       	subi	r20, 0xFE	; 254
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	61 e0       	ldi	r22, 0x01	; 1
    1f30:	c7 01       	movw	r24, r14
    1f32:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <receive_response>
    1f36:	18 2f       	mov	r17, r24
	
	if(receive_array[0] != 0x00)
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	29 c0       	rjmp	.+82     	; 0x1f90 <SD_init+0x290>
	{
		return ERROR_CMD16;
	}
	SD_CS_inactive(PB, (1<<4));
    1f3e:	60 e1       	ldi	r22, 0x10	; 16
    1f40:	83 e2       	ldi	r24, 0x23	; 35
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	return errorStatus;
    1f48:	81 2f       	mov	r24, r17
    1f4a:	23 c0       	rjmp	.+70     	; 0x1f92 <SD_init+0x292>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
	 }
	 if(receive_array[0] != 0x01)
	 {
		 return ERROR_CMD0;
    1f4c:	8b ef       	ldi	r24, 0xFB	; 251
    1f4e:	21 c0       	rjmp	.+66     	; 0x1f92 <SD_init+0x292>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
    1f50:	8c ef       	ldi	r24, 0xFC	; 252
    1f52:	1f c0       	rjmp	.+62     	; 0x1f92 <SD_init+0x292>
		ACMD41_arg = 0x00000000; //v1.x
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
    1f54:	8a ef       	ldi	r24, 0xFA	; 250
    1f56:	1d c0       	rjmp	.+58     	; 0x1f92 <SD_init+0x292>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
    1f58:	89 ef       	ldi	r24, 0xF9	; 249
    1f5a:	1b c0       	rjmp	.+54     	; 0x1f92 <SD_init+0x292>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
    1f5c:	89 ef       	ldi	r24, 0xF9	; 249
    1f5e:	19 c0       	rjmp	.+50     	; 0x1f92 <SD_init+0x292>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
	{
		return ERROR_CMD58;
    1f60:	89 ef       	ldi	r24, 0xF9	; 249
    1f62:	17 c0       	rjmp	.+46     	; 0x1f92 <SD_init+0x292>
	}
	if((receive_array[2] & 0xFC) != 0xFC)
	{
		return ERROR_CMD58;
    1f64:	89 ef       	ldi	r24, 0xF9	; 249
    1f66:	15 c0       	rjmp	.+42     	; 0x1f92 <SD_init+0x292>
		SD_CS_active(PB, (1<<4));
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD55;
    1f68:	88 ef       	ldi	r24, 0xF8	; 248
    1f6a:	13 c0       	rjmp	.+38     	; 0x1f92 <SD_init+0x292>
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
		
		if(receive_array[0] != 0x01)
		{
			return ERROR_CMD55;
    1f6c:	88 ef       	ldi	r24, 0xF8	; 248
    1f6e:	11 c0       	rjmp	.+34     	; 0x1f92 <SD_init+0x292>
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
    1f70:	87 ef       	ldi	r24, 0xF7	; 247
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <SD_init+0x292>
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
    1f74:	87 ef       	ldi	r24, 0xF7	; 247
    1f76:	0d c0       	rjmp	.+26     	; 0x1f92 <SD_init+0x292>
		}
		timeout++;
		if (timeout == 0)
		{
			return ERROR_CMD41_TIMEOUT;
    1f78:	86 ef       	ldi	r24, 0xF6	; 246
    1f7a:	0b c0       	rjmp	.+22     	; 0x1f92 <SD_init+0x292>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
    1f7c:	89 ef       	ldi	r24, 0xF9	; 249
    1f7e:	09 c0       	rjmp	.+18     	; 0x1f92 <SD_init+0x292>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
    1f80:	89 ef       	ldi	r24, 0xF9	; 249
    1f82:	07 c0       	rjmp	.+14     	; 0x1f92 <SD_init+0x292>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
	{
		return ERROR_CMD58;
    1f84:	89 ef       	ldi	r24, 0xF9	; 249
    1f86:	05 c0       	rjmp	.+10     	; 0x1f92 <SD_init+0x292>
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
	{
		return ERROR_CMD58;
    1f88:	89 ef       	ldi	r24, 0xF9	; 249
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <SD_init+0x292>
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
	if (errorStatus != 0)
	{
		return ERROR_CMD16;
    1f8c:	85 ef       	ldi	r24, 0xF5	; 245
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <SD_init+0x292>
	//listen for R1 maybe
	errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
	
	if(receive_array[0] != 0x00)
	{
		return ERROR_CMD16;
    1f90:	85 ef       	ldi	r24, 0xF5	; 245
	}
	SD_CS_inactive(PB, (1<<4));
	return errorStatus;
 }
    1f92:	29 96       	adiw	r28, 0x09	; 9
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	bf 90       	pop	r11
    1fac:	af 90       	pop	r10
    1fae:	9f 90       	pop	r9
    1fb0:	8f 90       	pop	r8
    1fb2:	08 95       	ret

00001fb4 <read_block>:
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
    1fb4:	8f 92       	push	r8
    1fb6:	9f 92       	push	r9
    1fb8:	af 92       	push	r10
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	1f 92       	push	r1
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	7c 01       	movw	r14, r24
    1fd4:	5b 01       	movw	r10, r22
    1fd6:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
 }
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
    1fda:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t data=0;
	// step a
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
    1fdc:	ae 01       	movw	r20, r28
    1fde:	4f 5f       	subi	r20, 0xFF	; 255
    1fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe2:	6f ef       	ldi	r22, 0xFF	; 255
    1fe4:	c7 01       	movw	r24, r14
    1fe6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
		timeout++;
    1fea:	1f 5f       	subi	r17, 0xFF	; 255
	} while(((data & 0x80) == 0x80) && (errorStatus == 0) && (timeout != 0));
    1fec:	99 81       	ldd	r25, Y+1	; 0x01
    1fee:	99 23       	and	r25, r25
    1ff0:	24 f4       	brge	.+8      	; 0x1ffa <read_block+0x46>
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <read_block+0x46>
    1ff6:	11 11       	cpse	r17, r1
    1ff8:	f1 cf       	rjmp	.-30     	; 0x1fdc <read_block+0x28>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
    1ffa:	81 11       	cpse	r24, r1
    1ffc:	43 c0       	rjmp	.+134    	; 0x2084 <read_block+0xd0>
	{
		return ERROR_CMD0;
	}
	if(data != 0)
    1ffe:	91 11       	cpse	r25, r1
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <read_block+0xd4>
		return ERROR_CMD8;
	}

	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
    2002:	ae 01       	movw	r20, r28
    2004:	4f 5f       	subi	r20, 0xFF	; 255
    2006:	5f 4f       	sbci	r21, 0xFF	; 255
    2008:	6f ef       	ldi	r22, 0xFF	; 255
    200a:	c7 01       	movw	r24, r14
    200c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
    2010:	08 2f       	mov	r16, r24
		timeout++;
    2012:	1f 5f       	subi	r17, 0xFF	; 255
	} while((data == 0xFF) && (errorStatus == 0) && (timeout != 0));
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	8f 3f       	cpi	r24, 0xFF	; 255
    2018:	21 f4       	brne	.+8      	; 0x2022 <read_block+0x6e>
    201a:	01 11       	cpse	r16, r1
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <read_block+0x6e>
    201e:	11 11       	cpse	r17, r1
    2020:	f0 cf       	rjmp	.-32     	; 0x2002 <read_block+0x4e>
	//while ( (data == 0xFF) && (timeout != 0) );


	// check for 0xFE (success) or 0b0000XXXX (error)
	if (data == 0xFE)
    2022:	8e 3f       	cpi	r24, 0xFE	; 254
    2024:	99 f5       	brne	.+102    	; 0x208c <read_block+0xd8>
	{
		// take first byte of data
		SPI_receive(SPI_addr, &data);
    2026:	be 01       	movw	r22, r28
    2028:	6f 5f       	subi	r22, 0xFF	; 255
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	c7 01       	movw	r24, r14
    202e:	0e 94 30 14 	call	0x2860	; 0x2860 <SPI_receive>
		array[0] = data;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	f6 01       	movw	r30, r12
    2036:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
    2038:	88 24       	eor	r8, r8
    203a:	83 94       	inc	r8
    203c:	91 2c       	mov	r9, r1
    203e:	10 c0       	rjmp	.+32     	; 0x2060 <read_block+0xac>
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
    2040:	ae 01       	movw	r20, r28
    2042:	4f 5f       	subi	r20, 0xFF	; 255
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	c7 01       	movw	r24, r14
    204a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <SPI_transfer>
    204e:	08 2f       	mov	r16, r24
		array[i] = data;
    2050:	f6 01       	movw	r30, r12
    2052:	e8 0d       	add	r30, r8
    2054:	f9 1d       	adc	r31, r9
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
    205a:	ff ef       	ldi	r31, 0xFF	; 255
    205c:	8f 1a       	sub	r8, r31
    205e:	9f 0a       	sbc	r9, r31
    2060:	8a 14       	cp	r8, r10
    2062:	9b 04       	cpc	r9, r11
    2064:	68 f3       	brcs	.-38     	; 0x2040 <read_block+0x8c>
    2066:	10 e0       	ldi	r17, 0x00	; 0
    2068:	09 c0       	rjmp	.+18     	; 0x207c <read_block+0xc8>

	// step d

	for(uint8_t i = 0; i < 3; i++)
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
    206a:	ae 01       	movw	r20, r28
    206c:	4f 5f       	subi	r20, 0xFF	; 255
    206e:	5f 4f       	sbci	r21, 0xFF	; 255
    2070:	6f ef       	ldi	r22, 0xFF	; 255
    2072:	c7 01       	movw	r24, r14
    2074:	0e 94 11 14 	call	0x2822	; 0x2822 <SPI_transmit>
    2078:	08 2f       	mov	r16, r24
		array[i] = data;
	}

	// step d

	for(uint8_t i = 0; i < 3; i++)
    207a:	1f 5f       	subi	r17, 0xFF	; 255
    207c:	13 30       	cpi	r17, 0x03	; 3
    207e:	a8 f3       	brcs	.-22     	; 0x206a <read_block+0xb6>
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
    2080:	80 2f       	mov	r24, r16
    2082:	05 c0       	rjmp	.+10     	; 0x208e <read_block+0xda>
	//while ( (data == 0xFF) && (timeout != 0) );

	// step b
	if (errorStatus != 0)
	{
		return ERROR_CMD0;
    2084:	8b ef       	ldi	r24, 0xFB	; 251
    2086:	03 c0       	rjmp	.+6      	; 0x208e <read_block+0xda>
	}
	if(data != 0)
	{
		return ERROR_CMD8;
    2088:	8a ef       	ldi	r24, 0xFA	; 250
    208a:	01 c0       	rjmp	.+2      	; 0x208e <read_block+0xda>
		array[0] = data;
	}
	else
	{
		//error
		return ERROR_TIMEOUT;
    208c:	8f ef       	ldi	r24, 0xFF	; 255
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
}
    208e:	0f 90       	pop	r0
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	df 90       	pop	r13
    209e:	cf 90       	pop	r12
    20a0:	bf 90       	pop	r11
    20a2:	af 90       	pop	r10
    20a4:	9f 90       	pop	r9
    20a6:	8f 90       	pop	r8
    20a8:	08 95       	ret

000020aa <mount_drive>:

uint8_t mount_drive(FS_values_t* fs)
{
    20aa:	2f 92       	push	r2
    20ac:	3f 92       	push	r3
    20ae:	4f 92       	push	r4
    20b0:	5f 92       	push	r5
    20b2:	6f 92       	push	r6
    20b4:	7f 92       	push	r7
    20b6:	8f 92       	push	r8
    20b8:	9f 92       	push	r9
    20ba:	af 92       	push	r10
    20bc:	bf 92       	push	r11
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	c6 50       	subi	r28, 0x06	; 6
    20d4:	d2 40       	sbci	r29, 0x02	; 2
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	1c 01       	movw	r2, r24
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
	// a - read sector 0 into array
	if(read_sector(0, 512, array) != 0)
    20e2:	9e 01       	movw	r18, r28
    20e4:	2f 5f       	subi	r18, 0xFF	; 255
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	52 e0       	ldi	r21, 0x02	; 2
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	cb 01       	movw	r24, r22
    20f2:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
    20f6:	18 2f       	mov	r17, r24
    20f8:	81 11       	cpse	r24, r1
    20fa:	94 c1       	rjmp	.+808    	; 0x2424 <mount_drive+0x37a>
	{
		return 1; //error
	}
	
	// determine if 0 is MBR or BPB
	if (array[0] != 0xEB && array[0] != 0xE9)
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	8b 3e       	cpi	r24, 0xEB	; 235
    2100:	a9 f0       	breq	.+42     	; 0x212c <mount_drive+0x82>
    2102:	89 3e       	cpi	r24, 0xE9	; 233
    2104:	b9 f0       	breq	.+46     	; 0x2134 <mount_drive+0x8a>
	{
		//likely the MBR, read relative sectors value at 0x01C6
		mbr_relative_sectors = read_value_32(0x01C6, array);
    2106:	be 01       	movw	r22, r28
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	86 ec       	ldi	r24, 0xC6	; 198
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	0e 94 5e 13 	call	0x26bc	; 0x26bc <read_value_32>
    2114:	6b 01       	movw	r12, r22
    2116:	7c 01       	movw	r14, r24
		//printf();
		
		//read bpb sector into array
		if(read_sector(mbr_relative_sectors, 512, array) != 0)
    2118:	9e 01       	movw	r18, r28
    211a:	2f 5f       	subi	r18, 0xFF	; 255
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	52 e0       	ldi	r21, 0x02	; 2
    2122:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
    2126:	81 11       	cpse	r24, r1
    2128:	7f c1       	rjmp	.+766    	; 0x2428 <mount_drive+0x37e>
    212a:	07 c0       	rjmp	.+14     	; 0x213a <mount_drive+0x90>
}

uint8_t mount_drive(FS_values_t* fs)
{
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
    212c:	c1 2c       	mov	r12, r1
    212e:	d1 2c       	mov	r13, r1
    2130:	76 01       	movw	r14, r12
    2132:	03 c0       	rjmp	.+6      	; 0x213a <mount_drive+0x90>
    2134:	c1 2c       	mov	r12, r1
    2136:	d1 2c       	mov	r13, r1
    2138:	76 01       	movw	r14, r12
		{
			return 2; //error
		}
	}	
	// verify BPB
	if(array[0] != 0xEB && array[0] != 0xE9)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	8b 3e       	cpi	r24, 0xEB	; 235
    213e:	19 f0       	breq	.+6      	; 0x2146 <mount_drive+0x9c>
    2140:	89 3e       	cpi	r24, 0xE9	; 233
    2142:	09 f0       	breq	.+2      	; 0x2146 <mount_drive+0x9c>
    2144:	73 c1       	rjmp	.+742    	; 0x242c <mount_drive+0x382>
	{
		return 3; //error, BPB not found
	}
	
	// b - read values and determine FAT type
	fs->BytesPerSec = read_value_16(11, array);
    2146:	be 01       	movw	r22, r28
    2148:	6f 5f       	subi	r22, 0xFF	; 255
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	8b e0       	ldi	r24, 0x0B	; 11
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 54 13 	call	0x26a8	; 0x26a8 <read_value_16>
    2154:	d1 01       	movw	r26, r2
    2156:	15 96       	adiw	r26, 0x05	; 5
    2158:	9c 93       	st	X, r25
    215a:	8e 93       	st	-X, r24
    215c:	14 97       	sbiw	r26, 0x04	; 4
	fs->SecPerClus = read_value_8(13, array);
    215e:	be 01       	movw	r22, r28
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8d e0       	ldi	r24, 0x0D	; 13
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    216c:	f1 01       	movw	r30, r2
    216e:	80 83       	st	Z, r24
	uint16_t reservedSectorCount = read_value_16(14, array);
    2170:	be 01       	movw	r22, r28
    2172:	6f 5f       	subi	r22, 0xFF	; 255
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8e e0       	ldi	r24, 0x0E	; 14
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <read_value_16>
    217e:	5c 01       	movw	r10, r24
	uint8_t numFATs = read_value_8(16, array);
    2180:	be 01       	movw	r22, r28
    2182:	6f 5f       	subi	r22, 0xFF	; 255
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	80 e1       	ldi	r24, 0x10	; 16
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 4f 13 	call	0x269e	; 0x269e <read_value_8>
    218e:	08 2f       	mov	r16, r24
	uint16_t rootEntCnt = read_value_16(17, array);
    2190:	be 01       	movw	r22, r28
    2192:	6f 5f       	subi	r22, 0xFF	; 255
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	81 e1       	ldi	r24, 0x11	; 17
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <read_value_16>
    219e:	cb 5f       	subi	r28, 0xFB	; 251
    21a0:	dd 4f       	sbci	r29, 0xFD	; 253
    21a2:	99 83       	std	Y+1, r25	; 0x01
    21a4:	88 83       	st	Y, r24
    21a6:	c5 50       	subi	r28, 0x05	; 5
    21a8:	d2 40       	sbci	r29, 0x02	; 2
	uint32_t totalSectors = read_value_16(19, array);
    21aa:	be 01       	movw	r22, r28
    21ac:	6f 5f       	subi	r22, 0xFF	; 255
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	83 e1       	ldi	r24, 0x13	; 19
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <read_value_16>
    21b8:	2c 01       	movw	r4, r24
    21ba:	61 2c       	mov	r6, r1
    21bc:	71 2c       	mov	r7, r1
	
	if (totalSectors == 0)
    21be:	41 14       	cp	r4, r1
    21c0:	51 04       	cpc	r5, r1
    21c2:	61 04       	cpc	r6, r1
    21c4:	71 04       	cpc	r7, r1
    21c6:	49 f4       	brne	.+18     	; 0x21da <mount_drive+0x130>
	{
		totalSectors = read_value_32(32, array);
    21c8:	be 01       	movw	r22, r28
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	80 e2       	ldi	r24, 0x20	; 32
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <read_value_32>
    21d6:	2b 01       	movw	r4, r22
    21d8:	3c 01       	movw	r6, r24
	}
	uint32_t fatSize = read_value_16(22, array);
    21da:	be 01       	movw	r22, r28
    21dc:	6f 5f       	subi	r22, 0xFF	; 255
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	86 e1       	ldi	r24, 0x16	; 22
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <read_value_16>
    21e8:	9c 01       	movw	r18, r24
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	cf 5f       	subi	r28, 0xFF	; 255
    21f0:	dd 4f       	sbci	r29, 0xFD	; 253
    21f2:	28 83       	st	Y, r18
    21f4:	39 83       	std	Y+1, r19	; 0x01
    21f6:	4a 83       	std	Y+2, r20	; 0x02
    21f8:	5b 83       	std	Y+3, r21	; 0x03
    21fa:	c1 50       	subi	r28, 0x01	; 1
    21fc:	d2 40       	sbci	r29, 0x02	; 2
	if (fatSize == 0)
    21fe:	23 2b       	or	r18, r19
    2200:	24 2b       	or	r18, r20
    2202:	25 2b       	or	r18, r21
    2204:	79 f4       	brne	.+30     	; 0x2224 <mount_drive+0x17a>
	{
		fatSize = read_value_32(36, array);
    2206:	be 01       	movw	r22, r28
    2208:	6f 5f       	subi	r22, 0xFF	; 255
    220a:	7f 4f       	sbci	r23, 0xFF	; 255
    220c:	84 e2       	ldi	r24, 0x24	; 36
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 5e 13 	call	0x26bc	; 0x26bc <read_value_32>
    2214:	cf 5f       	subi	r28, 0xFF	; 255
    2216:	dd 4f       	sbci	r29, 0xFD	; 253
    2218:	68 83       	st	Y, r22
    221a:	79 83       	std	Y+1, r23	; 0x01
    221c:	8a 83       	std	Y+2, r24	; 0x02
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	c1 50       	subi	r28, 0x01	; 1
    2222:	d2 40       	sbci	r29, 0x02	; 2
	}
	
	uint32_t totalClusters = totalSectors / fs->SecPerClus;
    2224:	d1 01       	movw	r26, r2
    2226:	2c 91       	ld	r18, X
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	c3 01       	movw	r24, r6
    2230:	b2 01       	movw	r22, r4
    2232:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
	if (totalClusters < 65525)
    2236:	25 3f       	cpi	r18, 0xF5	; 245
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	41 05       	cpc	r20, r1
    223c:	51 05       	cpc	r21, r1
    223e:	20 f4       	brcc	.+8      	; 0x2248 <mount_drive+0x19e>
	{
		fs->FATtype = 16;
    2240:	80 e1       	ldi	r24, 0x10	; 16
    2242:	f1 01       	movw	r30, r2
    2244:	81 83       	std	Z+1, r24	; 0x01
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <mount_drive+0x1a6>
	}
	else
	{
		fs->FATtype = 32;
    2248:	80 e2       	ldi	r24, 0x20	; 32
    224a:	d1 01       	movw	r26, r2
    224c:	11 96       	adiw	r26, 0x01	; 1
    224e:	8c 93       	st	X, r24
	}
	
	// c - calulate starting sector numbers for FAT, 1st data sector, 1st root dir. Global vars.
	fs->StartofFAT = reservedSectorCount;
    2250:	45 01       	movw	r8, r10
    2252:	a1 2c       	mov	r10, r1
    2254:	b1 2c       	mov	r11, r1
    2256:	f1 01       	movw	r30, r2
    2258:	86 86       	std	Z+14, r8	; 0x0e
    225a:	97 86       	std	Z+15, r9	; 0x0f
    225c:	a0 8a       	std	Z+16, r10	; 0x10
    225e:	b1 8a       	std	Z+17, r11	; 0x11
	if (fs->FATtype == 32)
    2260:	81 81       	ldd	r24, Z+1	; 0x01
    2262:	80 32       	cpi	r24, 0x20	; 32
    2264:	29 f5       	brne	.+74     	; 0x22b0 <mount_drive+0x206>
	{
		fs->FirstRootDirSec = fs->StartofFAT + (numFATs * fatSize) + read_value_32(44, array);
    2266:	a0 2f       	mov	r26, r16
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	cf 5f       	subi	r28, 0xFF	; 255
    226c:	dd 4f       	sbci	r29, 0xFD	; 253
    226e:	28 81       	ld	r18, Y
    2270:	39 81       	ldd	r19, Y+1	; 0x01
    2272:	4a 81       	ldd	r20, Y+2	; 0x02
    2274:	5b 81       	ldd	r21, Y+3	; 0x03
    2276:	c1 50       	subi	r28, 0x01	; 1
    2278:	d2 40       	sbci	r29, 0x02	; 2
    227a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__muluhisi3>
    227e:	24 01       	movw	r4, r8
    2280:	35 01       	movw	r6, r10
    2282:	46 0e       	add	r4, r22
    2284:	57 1e       	adc	r5, r23
    2286:	68 1e       	adc	r6, r24
    2288:	79 1e       	adc	r7, r25
    228a:	be 01       	movw	r22, r28
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	8c e2       	ldi	r24, 0x2C	; 44
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 5e 13 	call	0x26bc	; 0x26bc <read_value_32>
    2298:	46 0e       	add	r4, r22
    229a:	57 1e       	adc	r5, r23
    229c:	68 1e       	adc	r6, r24
    229e:	79 1e       	adc	r7, r25
    22a0:	d1 01       	movw	r26, r2
    22a2:	16 96       	adiw	r26, 0x06	; 6
    22a4:	4d 92       	st	X+, r4
    22a6:	5d 92       	st	X+, r5
    22a8:	6d 92       	st	X+, r6
    22aa:	7c 92       	st	X, r7
    22ac:	19 97       	sbiw	r26, 0x09	; 9
    22ae:	36 c0       	rjmp	.+108    	; 0x231c <mount_drive+0x272>
	}
	else
	{
		fs->RootDirSecs = ((read_value_16(17,array) * 32) + (fs->BytesPerSec - 1)) / fs->BytesPerSec;
    22b0:	be 01       	movw	r22, r28
    22b2:	6f 5f       	subi	r22, 0xFF	; 255
    22b4:	7f 4f       	sbci	r23, 0xFF	; 255
    22b6:	81 e1       	ldi	r24, 0x11	; 17
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 54 13 	call	0x26a8	; 0x26a8 <read_value_16>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	82 95       	swap	r24
    22c4:	92 95       	swap	r25
    22c6:	90 7f       	andi	r25, 0xF0	; 240
    22c8:	98 27       	eor	r25, r24
    22ca:	80 7f       	andi	r24, 0xF0	; 240
    22cc:	98 27       	eor	r25, r24
    22ce:	f1 01       	movw	r30, r2
    22d0:	64 81       	ldd	r22, Z+4	; 0x04
    22d2:	75 81       	ldd	r23, Z+5	; 0x05
    22d4:	86 0f       	add	r24, r22
    22d6:	97 1f       	adc	r25, r23
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__udivmodhi4>
    22de:	cb 01       	movw	r24, r22
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	82 8b       	std	Z+18, r24	; 0x12
    22e6:	93 8b       	std	Z+19, r25	; 0x13
    22e8:	a4 8b       	std	Z+20, r26	; 0x14
    22ea:	b5 8b       	std	Z+21, r27	; 0x15
		fs->FirstRootDirSec = fs->StartofFAT + (numFATs * fatSize);
    22ec:	46 84       	ldd	r4, Z+14	; 0x0e
    22ee:	57 84       	ldd	r5, Z+15	; 0x0f
    22f0:	60 88       	ldd	r6, Z+16	; 0x10
    22f2:	71 88       	ldd	r7, Z+17	; 0x11
    22f4:	a0 2f       	mov	r26, r16
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	cf 5f       	subi	r28, 0xFF	; 255
    22fa:	dd 4f       	sbci	r29, 0xFD	; 253
    22fc:	28 81       	ld	r18, Y
    22fe:	39 81       	ldd	r19, Y+1	; 0x01
    2300:	4a 81       	ldd	r20, Y+2	; 0x02
    2302:	5b 81       	ldd	r21, Y+3	; 0x03
    2304:	c1 50       	subi	r28, 0x01	; 1
    2306:	d2 40       	sbci	r29, 0x02	; 2
    2308:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__muluhisi3>
    230c:	46 0e       	add	r4, r22
    230e:	57 1e       	adc	r5, r23
    2310:	68 1e       	adc	r6, r24
    2312:	79 1e       	adc	r7, r25
    2314:	46 82       	std	Z+6, r4	; 0x06
    2316:	57 82       	std	Z+7, r5	; 0x07
    2318:	60 86       	std	Z+8, r6	; 0x08
    231a:	71 86       	std	Z+9, r7	; 0x09
	}
	fs->FirstDataSec = fs->FirstRootDirSec + fs->RootDirSecs;
    231c:	f1 01       	movw	r30, r2
    231e:	46 81       	ldd	r20, Z+6	; 0x06
    2320:	57 81       	ldd	r21, Z+7	; 0x07
    2322:	60 85       	ldd	r22, Z+8	; 0x08
    2324:	71 85       	ldd	r23, Z+9	; 0x09
    2326:	82 89       	ldd	r24, Z+18	; 0x12
    2328:	93 89       	ldd	r25, Z+19	; 0x13
    232a:	a4 89       	ldd	r26, Z+20	; 0x14
    232c:	b5 89       	ldd	r27, Z+21	; 0x15
    232e:	84 0f       	add	r24, r20
    2330:	95 1f       	adc	r25, r21
    2332:	a6 1f       	adc	r26, r22
    2334:	b7 1f       	adc	r27, r23
    2336:	82 87       	std	Z+10, r24	; 0x0a
    2338:	93 87       	std	Z+11, r25	; 0x0b
    233a:	a4 87       	std	Z+12, r26	; 0x0c
    233c:	b5 87       	std	Z+13, r27	; 0x0d
	
	//assign globals
	g_fat_start_sector = reservedSectorCount + mbr_relative_sectors;
    233e:	d7 01       	movw	r26, r14
    2340:	c6 01       	movw	r24, r12
    2342:	88 0d       	add	r24, r8
    2344:	99 1d       	adc	r25, r9
    2346:	aa 1d       	adc	r26, r10
    2348:	bb 1d       	adc	r27, r11
    234a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <g_fat_start_sector>
    234e:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <g_fat_start_sector+0x1>
    2352:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <g_fat_start_sector+0x2>
    2356:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <g_fat_start_sector+0x3>
	g_root_dir_sectors = ((rootEntCnt * 32) + (fs->BytesPerSec-1)) / (fs->BytesPerSec);
    235a:	cb 5f       	subi	r28, 0xFB	; 251
    235c:	dd 4f       	sbci	r29, 0xFD	; 253
    235e:	88 81       	ld	r24, Y
    2360:	99 81       	ldd	r25, Y+1	; 0x01
    2362:	c5 50       	subi	r28, 0x05	; 5
    2364:	d2 40       	sbci	r29, 0x02	; 2
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	82 95       	swap	r24
    236c:	92 95       	swap	r25
    236e:	90 7f       	andi	r25, 0xF0	; 240
    2370:	98 27       	eor	r25, r24
    2372:	80 7f       	andi	r24, 0xF0	; 240
    2374:	98 27       	eor	r25, r24
    2376:	04 80       	ldd	r0, Z+4	; 0x04
    2378:	f5 81       	ldd	r31, Z+5	; 0x05
    237a:	e0 2d       	mov	r30, r0
    237c:	8e 0f       	add	r24, r30
    237e:	9f 1f       	adc	r25, r31
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	bf 01       	movw	r22, r30
    2384:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__udivmodhi4>
    2388:	2b 01       	movw	r4, r22
    238a:	61 2c       	mov	r6, r1
    238c:	71 2c       	mov	r7, r1
    238e:	40 92 02 03 	sts	0x0302, r4	; 0x800302 <g_root_dir_sectors>
    2392:	50 92 03 03 	sts	0x0303, r5	; 0x800303 <g_root_dir_sectors+0x1>
    2396:	60 92 04 03 	sts	0x0304, r6	; 0x800304 <g_root_dir_sectors+0x2>
    239a:	70 92 05 03 	sts	0x0305, r7	; 0x800305 <g_root_dir_sectors+0x3>
	g_first_data_sector = reservedSectorCount + (numFATs * fatSize) + g_root_dir_sectors + mbr_relative_sectors;
    239e:	a0 2f       	mov	r26, r16
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	cf 5f       	subi	r28, 0xFF	; 255
    23a4:	dd 4f       	sbci	r29, 0xFD	; 253
    23a6:	28 81       	ld	r18, Y
    23a8:	39 81       	ldd	r19, Y+1	; 0x01
    23aa:	4a 81       	ldd	r20, Y+2	; 0x02
    23ac:	5b 81       	ldd	r21, Y+3	; 0x03
    23ae:	c1 50       	subi	r28, 0x01	; 1
    23b0:	d2 40       	sbci	r29, 0x02	; 2
    23b2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__muluhisi3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	88 0d       	add	r24, r8
    23bc:	99 1d       	adc	r25, r9
    23be:	aa 1d       	adc	r26, r10
    23c0:	bb 1d       	adc	r27, r11
    23c2:	48 0e       	add	r4, r24
    23c4:	59 1e       	adc	r5, r25
    23c6:	6a 1e       	adc	r6, r26
    23c8:	7b 1e       	adc	r7, r27
    23ca:	c4 0c       	add	r12, r4
    23cc:	d5 1c       	adc	r13, r5
    23ce:	e6 1c       	adc	r14, r6
    23d0:	f7 1c       	adc	r15, r7
    23d2:	c0 92 fa 02 	sts	0x02FA, r12	; 0x8002fa <g_first_data_sector>
    23d6:	d0 92 fb 02 	sts	0x02FB, r13	; 0x8002fb <g_first_data_sector+0x1>
    23da:	e0 92 fc 02 	sts	0x02FC, r14	; 0x8002fc <g_first_data_sector+0x2>
    23de:	f0 92 fd 02 	sts	0x02FD, r15	; 0x8002fd <g_first_data_sector+0x3>
	g_secPerClus = fs->SecPerClus;
    23e2:	d1 01       	movw	r26, r2
    23e4:	8c 91       	ld	r24, X
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	a0 e0       	ldi	r26, 0x00	; 0
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <g_secPerClus>
    23f0:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <g_secPerClus+0x1>
    23f4:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <g_secPerClus+0x2>
    23f8:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <g_secPerClus+0x3>
	g_resvdSecCnt = reservedSectorCount;
    23fc:	80 92 fe 02 	sts	0x02FE, r8	; 0x8002fe <g_resvdSecCnt>
    2400:	90 92 ff 02 	sts	0x02FF, r9	; 0x8002ff <g_resvdSecCnt+0x1>
    2404:	a0 92 00 03 	sts	0x0300, r10	; 0x800300 <g_resvdSecCnt+0x2>
    2408:	b0 92 01 03 	sts	0x0301, r11	; 0x800301 <g_resvdSecCnt+0x3>
	g_bytsPerSec = fs->BytesPerSec;
    240c:	cf 01       	movw	r24, r30
    240e:	a0 e0       	ldi	r26, 0x00	; 0
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <g_bytsPerSec>
    2416:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <g_bytsPerSec+0x1>
    241a:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <g_bytsPerSec+0x2>
    241e:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <g_bytsPerSec+0x3>
	
	
	return 0; //success
    2422:	05 c0       	rjmp	.+10     	; 0x242e <mount_drive+0x384>
	uint8_t array[512];
	uint32_t mbr_relative_sectors = 0;
	// a - read sector 0 into array
	if(read_sector(0, 512, array) != 0)
	{
		return 1; //error
    2424:	11 e0       	ldi	r17, 0x01	; 1
    2426:	03 c0       	rjmp	.+6      	; 0x242e <mount_drive+0x384>
		//printf();
		
		//read bpb sector into array
		if(read_sector(mbr_relative_sectors, 512, array) != 0)
		{
			return 2; //error
    2428:	12 e0       	ldi	r17, 0x02	; 2
    242a:	01 c0       	rjmp	.+2      	; 0x242e <mount_drive+0x384>
		}
	}	
	// verify BPB
	if(array[0] != 0xEB && array[0] != 0xE9)
	{
		return 3; //error, BPB not found
    242c:	13 e0       	ldi	r17, 0x03	; 3
	g_resvdSecCnt = reservedSectorCount;
	g_bytsPerSec = fs->BytesPerSec;
	
	
	return 0; //success
}
    242e:	81 2f       	mov	r24, r17
    2430:	ca 5f       	subi	r28, 0xFA	; 250
    2432:	dd 4f       	sbci	r29, 0xFD	; 253
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	bf 90       	pop	r11
    2450:	af 90       	pop	r10
    2452:	9f 90       	pop	r9
    2454:	8f 90       	pop	r8
    2456:	7f 90       	pop	r7
    2458:	6f 90       	pop	r6
    245a:	5f 90       	pop	r5
    245c:	4f 90       	pop	r4
    245e:	3f 90       	pop	r3
    2460:	2f 90       	pop	r2
    2462:	08 95       	ret

00002464 <first_sector>:

uint32_t first_sector(uint32_t cluster_num)
{
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
	if(cluster_num == 0)
    2468:	61 15       	cp	r22, r1
    246a:	71 05       	cpc	r23, r1
    246c:	81 05       	cpc	r24, r1
    246e:	91 05       	cpc	r25, r1
    2470:	49 f4       	brne	.+18     	; 0x2484 <first_sector+0x20>
	{
		return g_first_data_sector;
    2472:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <g_first_data_sector>
    2476:	70 91 fb 02 	lds	r23, 0x02FB	; 0x8002fb <g_first_data_sector+0x1>
    247a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <g_first_data_sector+0x2>
    247e:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <g_first_data_sector+0x3>
    2482:	2e c0       	rjmp	.+92     	; 0x24e0 <first_sector+0x7c>
	}
	else if(cluster_num <= 2)
    2484:	63 30       	cpi	r22, 0x03	; 3
    2486:	71 05       	cpc	r23, r1
    2488:	81 05       	cpc	r24, r1
    248a:	91 05       	cpc	r25, r1
    248c:	68 f4       	brcc	.+26     	; 0x24a8 <first_sector+0x44>
	{
		return g_first_data_sector + cluster_num;
    248e:	00 91 fa 02 	lds	r16, 0x02FA	; 0x8002fa <g_first_data_sector>
    2492:	10 91 fb 02 	lds	r17, 0x02FB	; 0x8002fb <g_first_data_sector+0x1>
    2496:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <g_first_data_sector+0x2>
    249a:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <g_first_data_sector+0x3>
    249e:	60 0f       	add	r22, r16
    24a0:	71 1f       	adc	r23, r17
    24a2:	82 1f       	adc	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	1c c0       	rjmp	.+56     	; 0x24e0 <first_sector+0x7c>
	}
	return ((cluster_num-2) * g_secPerClus) + g_first_data_sector;
    24a8:	9b 01       	movw	r18, r22
    24aa:	ac 01       	movw	r20, r24
    24ac:	22 50       	subi	r18, 0x02	; 2
    24ae:	31 09       	sbc	r19, r1
    24b0:	41 09       	sbc	r20, r1
    24b2:	51 09       	sbc	r21, r1
    24b4:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <g_secPerClus>
    24b8:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <g_secPerClus+0x1>
    24bc:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <g_secPerClus+0x2>
    24c0:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <g_secPerClus+0x3>
    24c4:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__mulsi3>
    24c8:	00 91 fa 02 	lds	r16, 0x02FA	; 0x8002fa <g_first_data_sector>
    24cc:	10 91 fb 02 	lds	r17, 0x02FB	; 0x8002fb <g_first_data_sector+0x1>
    24d0:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <g_first_data_sector+0x2>
    24d4:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <g_first_data_sector+0x3>
    24d8:	60 0f       	add	r22, r16
    24da:	71 1f       	adc	r23, r17
    24dc:	82 1f       	adc	r24, r18
    24de:	93 1f       	adc	r25, r19
}
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	08 95       	ret

000024e6 <find_next_clus>:

uint32_t find_next_clus(uint32_t cluster_num, uint8_t array[])
{
    24e6:	cf 92       	push	r12
    24e8:	df 92       	push	r13
    24ea:	ef 92       	push	r14
    24ec:	ff 92       	push	r15
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	ea 01       	movw	r28, r20
	uint32_t FATOffset = (cluster_num * 4);
    24f4:	6b 01       	movw	r12, r22
    24f6:	7c 01       	movw	r14, r24
    24f8:	cc 0c       	add	r12, r12
    24fa:	dd 1c       	adc	r13, r13
    24fc:	ee 1c       	adc	r14, r14
    24fe:	ff 1c       	adc	r15, r15
    2500:	cc 0c       	add	r12, r12
    2502:	dd 1c       	adc	r13, r13
    2504:	ee 1c       	adc	r14, r14
    2506:	ff 1c       	adc	r15, r15
	// a
	uint32_t ThisFATSecNum = g_resvdSecCnt + (FATOffset / g_bytsPerSec);
    2508:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <g_bytsPerSec>
    250c:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <g_bytsPerSec+0x1>
    2510:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <g_bytsPerSec+0x2>
    2514:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <g_bytsPerSec+0x3>
    2518:	c7 01       	movw	r24, r14
    251a:	b6 01       	movw	r22, r12
    251c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
    2520:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <g_resvdSecCnt>
    2524:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <g_resvdSecCnt+0x1>
    2528:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <g_resvdSecCnt+0x2>
    252c:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <g_resvdSecCnt+0x3>
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	62 0f       	add	r22, r18
    2536:	73 1f       	adc	r23, r19
    2538:	84 1f       	adc	r24, r20
    253a:	95 1f       	adc	r25, r21
	// b
	read_sector(ThisFATSecNum, 512, array);
    253c:	9e 01       	movw	r18, r28
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	52 e0       	ldi	r21, 0x02	; 2
    2542:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
	// c
	uint32_t ThisFATEntOffset = FATOffset % g_bytsPerSec;
    2546:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <g_bytsPerSec>
    254a:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <g_bytsPerSec+0x1>
    254e:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <g_bytsPerSec+0x2>
    2552:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <g_bytsPerSec+0x3>
    2556:	c7 01       	movw	r24, r14
    2558:	b6 01       	movw	r22, r12
    255a:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
	// d
	uint32_t temp32 = read_value_32(ThisFATEntOffset, array);
    2562:	be 01       	movw	r22, r28
    2564:	0e 94 5e 13 	call	0x26bc	; 0x26bc <read_value_32>
	// e
	temp32 &= 0x0FFFFFFF;
    2568:	9f 70       	andi	r25, 0x0F	; 15
	// f
	// blank
	
	return temp32;
}
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	ff 90       	pop	r15
    2570:	ef 90       	pop	r14
    2572:	df 90       	pop	r13
    2574:	cf 90       	pop	r12
    2576:	08 95       	ret

00002578 <print_file>:

void print_file(uint32_t first_cluster, uint8_t *buffer) {
    2578:	8f 92       	push	r8
    257a:	9f 92       	push	r9
    257c:	af 92       	push	r10
    257e:	bf 92       	push	r11
    2580:	cf 92       	push	r12
    2582:	df 92       	push	r13
    2584:	ef 92       	push	r14
    2586:	ff 92       	push	r15
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	4b 01       	movw	r8, r22
    258e:	5c 01       	movw	r10, r24
    2590:	ea 01       	movw	r28, r20
    2592:	c1 2c       	mov	r12, r1
    2594:	d1 2c       	mov	r13, r1
    2596:	76 01       	movw	r14, r12
	uint32_t current_sector;
	uint32_t sector_in_cluster = 0;

	while (1) {
		// Calculate first sector of the current cluster
		current_sector = first_sector(current_cluster);
    2598:	c5 01       	movw	r24, r10
    259a:	b4 01       	movw	r22, r8
    259c:	0e 94 32 12 	call	0x2464	; 0x2464 <first_sector>

		// Read and print the sector
		read_sector(current_sector + sector_in_cluster, 512, buffer);
    25a0:	6c 0d       	add	r22, r12
    25a2:	7d 1d       	adc	r23, r13
    25a4:	8e 1d       	adc	r24, r14
    25a6:	9f 1d       	adc	r25, r15
    25a8:	9e 01       	movw	r18, r28
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	52 e0       	ldi	r21, 0x02	; 2
    25ae:	0e 94 1e 13 	call	0x263c	; 0x263c <read_sector>
		print_memory(buffer, 512); 
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	72 e0       	ldi	r23, 0x02	; 2
    25b6:	ce 01       	movw	r24, r28
    25b8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <print_memory>

		// Print sector and cluster information for debugging
		//printf("Cluster: %lu, Sector: %lu\n", current_cluster, current_sector + sector_in_cluster);

		// User interaction
		UART_transmit_string(UART1, "Enter 0 to stop, 1 to continue:\n", 32);
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	61 e7       	ldi	r22, 0x71	; 113
    25c2:	71 e0       	ldi	r23, 0x01	; 1
    25c4:	88 ec       	ldi	r24, 0xC8	; 200
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
		uint8_t user_input = long_serial_input(UART1);
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <long_serial_input>
		if (user_input == 0) {
    25d4:	88 23       	and	r24, r24
    25d6:	39 f1       	breq	.+78     	; 0x2626 <print_file+0xae>
			return; // Exit the loop if the user chooses to exit
		}

		// Move to the next sector
		sector_in_cluster++;
    25d8:	8f ef       	ldi	r24, 0xFF	; 255
    25da:	c8 1a       	sub	r12, r24
    25dc:	d8 0a       	sbc	r13, r24
    25de:	e8 0a       	sbc	r14, r24
    25e0:	f8 0a       	sbc	r15, r24
		if (sector_in_cluster >= g_secPerClus) {
    25e2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <g_secPerClus>
    25e6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <g_secPerClus+0x1>
    25ea:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <g_secPerClus+0x2>
    25ee:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <g_secPerClus+0x3>
    25f2:	c8 16       	cp	r12, r24
    25f4:	d9 06       	cpc	r13, r25
    25f6:	ea 06       	cpc	r14, r26
    25f8:	fb 06       	cpc	r15, r27
    25fa:	70 f2       	brcs	.-100    	; 0x2598 <print_file+0x20>
			// Find the next cluster if all sectors in the current cluster are printed
			current_cluster = find_next_clus(current_cluster, buffer);
    25fc:	ae 01       	movw	r20, r28
    25fe:	c5 01       	movw	r24, r10
    2600:	b4 01       	movw	r22, r8
    2602:	0e 94 73 12 	call	0x24e6	; 0x24e6 <find_next_clus>
    2606:	4b 01       	movw	r8, r22
    2608:	5c 01       	movw	r10, r24
			if ((current_cluster == 0x00000007) || (current_cluster == 0x0FFFFFFF)) {
    260a:	87 e0       	ldi	r24, 0x07	; 7
    260c:	88 16       	cp	r8, r24
    260e:	91 04       	cpc	r9, r1
    2610:	a1 04       	cpc	r10, r1
    2612:	b1 04       	cpc	r11, r1
    2614:	41 f0       	breq	.+16     	; 0x2626 <print_file+0xae>
    2616:	8f ef       	ldi	r24, 0xFF	; 255
    2618:	88 16       	cp	r8, r24
    261a:	98 06       	cpc	r9, r24
    261c:	a8 06       	cpc	r10, r24
    261e:	8f e0       	ldi	r24, 0x0F	; 15
    2620:	b8 06       	cpc	r11, r24
    2622:	09 f0       	breq	.+2      	; 0x2626 <print_file+0xae>
    2624:	b6 cf       	rjmp	.-148    	; 0x2592 <print_file+0x1a>
			}
			sector_in_cluster = 0; // Reset the sector counter for the new cluster
		}
	}
	return;
}
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	ff 90       	pop	r15
    262c:	ef 90       	pop	r14
    262e:	df 90       	pop	r13
    2630:	cf 90       	pop	r12
    2632:	bf 90       	pop	r11
    2634:	af 90       	pop	r10
    2636:	9f 90       	pop	r9
    2638:	8f 90       	pop	r8
    263a:	08 95       	ret

0000263c <read_sector>:
 */ 

#include "SD.h"

uint8_t read_sector( uint32_t sector_number, uint16_t sector_size, uint8_t* data_array)
{
    263c:	cf 92       	push	r12
    263e:	df 92       	push	r13
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	6b 01       	movw	r12, r22
    264e:	7c 01       	movw	r14, r24
    2650:	ea 01       	movw	r28, r20
    2652:	89 01       	movw	r16, r18
	// set CS active (low)
	SD_CS_active(PB, (1<<4));
    2654:	60 e1       	ldi	r22, 0x10	; 16
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	83 e2       	ldi	r24, 0x23	; 35
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <SD_CS_active>
	
	// send CMD 17 and sector number
	send_command(SPI0, CMD17, sector_number);
    2660:	a7 01       	movw	r20, r14
    2662:	96 01       	movw	r18, r12
    2664:	61 e1       	ldi	r22, 0x11	; 17
    2666:	8c e4       	ldi	r24, 0x4C	; 76
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <send_command>
	
	// write data into array
	uint8_t error = read_block(SPI0, sector_size, data_array);
    266e:	a8 01       	movw	r20, r16
    2670:	be 01       	movw	r22, r28
    2672:	8c e4       	ldi	r24, 0x4C	; 76
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <read_block>
	if(error != 0)
    267a:	81 11       	cpse	r24, r1
    267c:	07 c0       	rjmp	.+14     	; 0x268c <read_sector+0x50>
	{
		return error; //error
	}
	
	// set CS inactive (high)
	SD_CS_inactive(PB, (1<<4));
    267e:	60 e1       	ldi	r22, 0x10	; 16
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	83 e2       	ldi	r24, 0x23	; 35
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SD_CS_inactive>
	
	return 0; //success
    268a:	80 e0       	ldi	r24, 0x00	; 0
}
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	df 90       	pop	r13
    269a:	cf 90       	pop	r12
    269c:	08 95       	ret

0000269e <read_value_8>:

uint8_t read_value_8 (uint16_t offset, uint8_t array[])
{
	return array[offset];
    269e:	86 0f       	add	r24, r22
    26a0:	97 1f       	adc	r25, r23
}
    26a2:	fc 01       	movw	r30, r24
    26a4:	80 81       	ld	r24, Z
    26a6:	08 95       	ret

000026a8 <read_value_16>:
uint16_t read_value_16 (uint16_t offset, uint8_t array[])
{
	uint16_t value = 0;
	value |= array[offset];
    26a8:	fb 01       	movw	r30, r22
    26aa:	e8 0f       	add	r30, r24
    26ac:	f9 1f       	adc	r31, r25
    26ae:	20 81       	ld	r18, Z
	value |= (uint16_t)array[offset+1]<<8;
    26b0:	81 81       	ldd	r24, Z+1	; 0x01
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	98 2f       	mov	r25, r24
    26b6:	88 27       	eor	r24, r24
	return value;
}
    26b8:	82 2b       	or	r24, r18
    26ba:	08 95       	ret

000026bc <read_value_32>:
uint32_t read_value_32 (uint16_t offset, uint8_t array[])
{
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
	uint32_t value = 0;
	value |= array[offset];
    26c0:	fb 01       	movw	r30, r22
    26c2:	e8 0f       	add	r30, r24
    26c4:	f9 1f       	adc	r31, r25
    26c6:	20 81       	ld	r18, Z
	value |= (uint32_t)array[offset+1]<<8;
    26c8:	61 81       	ldd	r22, Z+1	; 0x01
    26ca:	86 2f       	mov	r24, r22
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e0       	ldi	r26, 0x00	; 0
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	ba 2f       	mov	r27, r26
    26d4:	a9 2f       	mov	r26, r25
    26d6:	98 2f       	mov	r25, r24
    26d8:	88 27       	eor	r24, r24
    26da:	82 2b       	or	r24, r18
	value |= (uint32_t)array[offset+2]<<16;
    26dc:	02 81       	ldd	r16, Z+2	; 0x02
    26de:	10 e0       	ldi	r17, 0x00	; 0
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	98 01       	movw	r18, r16
    26e6:	11 27       	eor	r17, r17
    26e8:	00 27       	eor	r16, r16
    26ea:	ac 01       	movw	r20, r24
    26ec:	bd 01       	movw	r22, r26
    26ee:	40 2b       	or	r20, r16
    26f0:	51 2b       	or	r21, r17
    26f2:	62 2b       	or	r22, r18
    26f4:	73 2b       	or	r23, r19
	value |= (uint32_t)array[offset+3]<<24;
    26f6:	83 81       	ldd	r24, Z+3	; 0x03
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e0       	ldi	r26, 0x00	; 0
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	b8 2f       	mov	r27, r24
    2700:	aa 27       	eor	r26, r26
    2702:	99 27       	eor	r25, r25
    2704:	88 27       	eor	r24, r24
    2706:	8a 01       	movw	r16, r20
    2708:	9b 01       	movw	r18, r22
    270a:	08 2b       	or	r16, r24
    270c:	19 2b       	or	r17, r25
    270e:	2a 2b       	or	r18, r26
    2710:	3b 2b       	or	r19, r27
    2712:	c9 01       	movw	r24, r18
    2714:	b8 01       	movw	r22, r16
	return value;
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	08 95       	ret

0000271c <round_up_pwr2>:
#include "GPIO_Outputs.h"
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	a8 f0       	brcs	.+42     	; 0x274a <round_up_pwr2+0x2e>
        return 1;
    }
    if (n > 128) {
    2720:	81 38       	cpi	r24, 0x81	; 129
    2722:	a8 f4       	brcc	.+42     	; 0x274e <round_up_pwr2+0x32>
        return 128;
    }
    n--; // the -- ensures that you don't round up when it's already a power of 2.
    2724:	81 50       	subi	r24, 0x01	; 1
    n |= n >> 1; // ORs with 1 shift right
    2726:	98 2f       	mov	r25, r24
    2728:	96 95       	lsr	r25
    272a:	89 2b       	or	r24, r25
    n |= n >> 2; // ORs with 2-bit shift right
    272c:	98 2f       	mov	r25, r24
    272e:	96 95       	lsr	r25
    2730:	96 95       	lsr	r25
    2732:	89 2b       	or	r24, r25
    n |= n >> 4; // ORs with 4-bit shift right
    2734:	98 2f       	mov	r25, r24
    2736:	92 95       	swap	r25
    2738:	9f 70       	andi	r25, 0x0F	; 15
    273a:	89 2b       	or	r24, r25
    n |= n >> 7; // ORs with 7-bit shit right
    273c:	98 2f       	mov	r25, r24
    273e:	99 1f       	adc	r25, r25
    2740:	99 27       	eor	r25, r25
    2742:	99 1f       	adc	r25, r25
    2744:	89 2b       	or	r24, r25
    return n + 1; // inc to power of 2 
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	08 95       	ret
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
        return 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	08 95       	ret
    }
    if (n > 128) {
        return 128;
    274e:	80 e8       	ldi	r24, 0x80	; 128
    n |= n >> 1; // ORs with 1 shift right
    n |= n >> 2; // ORs with 2-bit shift right
    n |= n >> 4; // ORs with 4-bit shift right
    n |= n >> 7; // ORs with 7-bit shit right
    return n + 1; // inc to power of 2 
}
    2750:	08 95       	ret

00002752 <get_spi_prescaler_mask>:

uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
    2752:	0e 94 8e 13 	call	0x271c	; 0x271c <round_up_pwr2>
    
    switch (rounded_value) {
    2756:	80 31       	cpi	r24, 0x10	; 16
    2758:	c1 f0       	breq	.+48     	; 0x278a <get_spi_prescaler_mask+0x38>
    275a:	28 f4       	brcc	.+10     	; 0x2766 <get_spi_prescaler_mask+0x14>
    275c:	82 30       	cpi	r24, 0x02	; 2
    275e:	79 f0       	breq	.+30     	; 0x277e <get_spi_prescaler_mask+0x2c>
    2760:	88 30       	cpi	r24, 0x08	; 8
    2762:	79 f0       	breq	.+30     	; 0x2782 <get_spi_prescaler_mask+0x30>
    2764:	06 c0       	rjmp	.+12     	; 0x2772 <get_spi_prescaler_mask+0x20>
    2766:	80 34       	cpi	r24, 0x40	; 64
    2768:	31 f0       	breq	.+12     	; 0x2776 <get_spi_prescaler_mask+0x24>
    276a:	80 38       	cpi	r24, 0x80	; 128
    276c:	31 f0       	breq	.+12     	; 0x277a <get_spi_prescaler_mask+0x28>
    276e:	80 32       	cpi	r24, 0x20	; 32
    2770:	51 f0       	breq	.+20     	; 0x2786 <get_spi_prescaler_mask+0x34>
        case 4:   return 0b000;
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	08 95       	ret
        case 16:  return 0b001;
        case 64:  return 0b010;
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	08 95       	ret
        case 128: return 0b011;
    277a:	83 e0       	ldi	r24, 0x03	; 3
    277c:	08 95       	ret
        case 2:   return 0b100;
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	08 95       	ret
        case 8:   return 0b101;
    2782:	85 e0       	ldi	r24, 0x05	; 5
    2784:	08 95       	ret
        case 32:  return 0b110;
    2786:	86 e0       	ldi	r24, 0x06	; 6
    2788:	08 95       	ret
uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
    
    switch (rounded_value) {
        case 4:   return 0b000;
        case 16:  return 0b001;
    278a:	81 e0       	ldi	r24, 0x01	; 1
        case 2:   return 0b100;
        case 8:   return 0b101;
        case 32:  return 0b110;
        default:  return 0b000; // Default case
    }
}
    278c:	08 95       	ret

0000278e <SPI_master_init>:

void SPI_master_init(volatile SPI_t * SPI_addr, uint32_t clock_rate)
{
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	ec 01       	movw	r28, r24
    2794:	9a 01       	movw	r18, r20
    2796:	ab 01       	movw	r20, r22
    // CPOL CPHA - Clear CPOL and CPHA (0)
	// These are preference-based but must be unanimous with other code
    SPI_addr->control_reg &= (~(3<<2));
    2798:	88 81       	ld	r24, Y
    279a:	83 7f       	andi	r24, 0xF3	; 243
    279c:	88 83       	st	Y, r24
    // SPE - Enable SPI (1)
    SPI_addr->control_reg |= (1<<6);
    279e:	88 81       	ld	r24, Y
    27a0:	80 64       	ori	r24, 0x40	; 64
    27a2:	88 83       	st	Y, r24
    // MSTR - Set to master mode (1)
    SPI_addr->control_reg |= (1<<4);
    27a4:	88 81       	ld	r24, Y
    27a6:	80 61       	ori	r24, 0x10	; 16
    27a8:	88 83       	st	Y, r24
    // DORD - Clear to make MSB first (0)
    SPI_addr->control_reg &= (~(1<<5));
    27aa:	88 81       	ld	r24, Y
    27ac:	8f 7d       	andi	r24, 0xDF	; 223
    27ae:	88 83       	st	Y, r24
    
    // Set clock rate based on the given `clock_rate`. You can use a series of if-else conditions to check which prescaler value to use.
    uint8_t divider = (F_CPU / OSC_DIV ) / (clock_rate);
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	74 e2       	ldi	r23, 0x24	; 36
    27b4:	84 ef       	ldi	r24, 0xF4	; 244
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
    27bc:	82 2f       	mov	r24, r18
    uint8_t mask = get_spi_prescaler_mask(divider);
    27be:	0e 94 a9 13 	call	0x2752	; 0x2752 <get_spi_prescaler_mask>
    SPI_addr->control_reg |= (mask%4); // takes bottom 2 bits or mask & 0x3
    27c2:	98 81       	ld	r25, Y
    27c4:	28 2f       	mov	r18, r24
    27c6:	23 70       	andi	r18, 0x03	; 3
    27c8:	92 2b       	or	r25, r18
    27ca:	98 83       	st	Y, r25
    SPI_addr->status_reg |= (mask/4); // takes bit 2
    27cc:	99 81       	ldd	r25, Y+1	; 0x01
    27ce:	86 95       	lsr	r24
    27d0:	86 95       	lsr	r24
    27d2:	89 2b       	or	r24, r25
    27d4:	89 83       	std	Y+1, r24	; 0x01

    //add MOSI & SCK pins based on whether it's SPI0 or SPI1
    if(SPI_addr == SPI0)
    27d6:	cc 34       	cpi	r28, 0x4C	; 76
    27d8:	d1 05       	cpc	r29, r1
    27da:	89 f4       	brne	.+34     	; 0x27fe <SPI_master_init+0x70>
    {
		GPIO_output_init(PB, (1<<5));
    27dc:	60 e2       	ldi	r22, 0x20	; 32
    27de:	83 e2       	ldi	r24, 0x23	; 35
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    27e6:	85 b1       	in	r24, 0x05	; 5
    27e8:	80 62       	ori	r24, 0x20	; 32
    27ea:	85 b9       	out	0x05, r24	; 5
		GPIO_output_set(PB, (1<<5));
		
		GPIO_output_init(PB, (1<<7));
    27ec:	60 e8       	ldi	r22, 0x80	; 128
    27ee:	83 e2       	ldi	r24, 0x23	; 35
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    27f6:	85 b1       	in	r24, 0x05	; 5
    27f8:	8f 77       	andi	r24, 0x7F	; 127
    27fa:	85 b9       	out	0x05, r24	; 5
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <SPI_master_init+0x8e>
		
        //PB->DDR_REG |= (1<<5) | (1<<7); //MOSI & SCK Output
        //PB->PORT_REG |= (1<<5);  //MOSI 1
        //PB->PORT_REG &= ~(1<<7); //SCK 0
    }
    else if (SPI_addr == SPI1)
    27fe:	cc 3a       	cpi	r28, 0xAC	; 172
    2800:	d1 05       	cpc	r29, r1
    2802:	61 f4       	brne	.+24     	; 0x281c <SPI_master_init+0x8e>
    {
        PE->GPIO_DDR |= (1<<3);          // MOSI output
    2804:	8d b1       	in	r24, 0x0d	; 13
    2806:	88 60       	ori	r24, 0x08	; 8
    2808:	8d b9       	out	0x0d, r24	; 13
        PD->GPIO_DDR |= (1<<7);          // SCK output
    280a:	8a b1       	in	r24, 0x0a	; 10
    280c:	80 68       	ori	r24, 0x80	; 128
    280e:	8a b9       	out	0x0a, r24	; 10
        PE->GPIO_PORT |= (1<<3);         // MOSI 1
    2810:	8e b1       	in	r24, 0x0e	; 14
    2812:	88 60       	ori	r24, 0x08	; 8
    2814:	8e b9       	out	0x0e, r24	; 14
        PD->GPIO_PORT &= ~(1<<7);        // SCK 0
    2816:	8b b1       	in	r24, 0x0b	; 11
    2818:	8f 77       	andi	r24, 0x7F	; 127
    281a:	8b b9       	out	0x0b, r24	; 11
    }

}
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	08 95       	ret

00002822 <SPI_transmit>:

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
    2822:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
    2824:	62 83       	std	Z+2, r22	; 0x02

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
    282a:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
    282c:	2f 5f       	subi	r18, 0xFF	; 255
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
    2830:	99 23       	and	r25, r25
    2832:	1c f0       	brlt	.+6      	; 0x283a <SPI_transmit+0x18>
    2834:	21 15       	cp	r18, r1
    2836:	31 05       	cpc	r19, r1
    2838:	c1 f7       	brne	.-16     	; 0x282a <SPI_transmit+0x8>

    if(timeout == 0)
    283a:	23 2b       	or	r18, r19
    283c:	21 f4       	brne	.+8      	; 0x2846 <SPI_transmit+0x24>
    {
        *data = 0xFF;
    283e:	8f ef       	ldi	r24, 0xFF	; 255
    2840:	fa 01       	movw	r30, r20
    2842:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
    2844:	08 95       	ret
    }
    else if ((status&0x40)!=0)
    2846:	89 2f       	mov	r24, r25
    2848:	80 74       	andi	r24, 0x40	; 64
    284a:	96 ff       	sbrs	r25, 6
    284c:	05 c0       	rjmp	.+10     	; 0x2858 <SPI_transmit+0x36>
    {
        *data = (SPI_addr->data_reg);
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	fa 01       	movw	r30, r20
    2852:	80 83       	st	Z, r24
        return ERROR_SPI;
    2854:	8e ef       	ldi	r24, 0xFE	; 254
    2856:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
    2858:	92 81       	ldd	r25, Z+2	; 0x02
    285a:	fa 01       	movw	r30, r20
    285c:	90 83       	st	Z, r25
        return 0;
    }
}
    285e:	08 95       	ret

00002860 <SPI_receive>:
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
    2860:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = 0xFF;
    2862:	8f ef       	ldi	r24, 0xFF	; 255
    2864:	82 83       	std	Z+2, r24	; 0x02
}
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = 0xFF;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
    286a:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
    286c:	2f 5f       	subi	r18, 0xFF	; 255
    286e:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
    2870:	99 23       	and	r25, r25
    2872:	1c f0       	brlt	.+6      	; 0x287a <SPI_receive+0x1a>
    2874:	21 15       	cp	r18, r1
    2876:	31 05       	cpc	r19, r1
    2878:	c1 f7       	brne	.-16     	; 0x286a <SPI_receive+0xa>

    if(timeout == 0)
    287a:	23 2b       	or	r18, r19
    287c:	21 f4       	brne	.+8      	; 0x2886 <SPI_receive+0x26>
    {
        *data = 0xFF;
    287e:	8f ef       	ldi	r24, 0xFF	; 255
    2880:	fb 01       	movw	r30, r22
    2882:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
    2884:	08 95       	ret
    }
    else if ((status&0x40)!=0)
    2886:	89 2f       	mov	r24, r25
    2888:	80 74       	andi	r24, 0x40	; 64
    288a:	96 ff       	sbrs	r25, 6
    288c:	05 c0       	rjmp	.+10     	; 0x2898 <SPI_receive+0x38>
    {
        *data = (SPI_addr->data_reg);
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	fb 01       	movw	r30, r22
    2892:	80 83       	st	Z, r24
        return ERROR_SPI;
    2894:	8e ef       	ldi	r24, 0xFE	; 254
    2896:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
    2898:	92 81       	ldd	r25, Z+2	; 0x02
    289a:	fb 01       	movw	r30, r22
    289c:	90 83       	st	Z, r25
        return 0;
    }
}
    289e:	08 95       	ret

000028a0 <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
    28a0:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
    28a2:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
    28aa:	2f 5f       	subi	r18, 0xFF	; 255
    28ac:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
    28ae:	99 23       	and	r25, r25
    28b0:	1c f0       	brlt	.+6      	; 0x28b8 <SPI_transfer+0x18>
    28b2:	21 15       	cp	r18, r1
    28b4:	31 05       	cpc	r19, r1
    28b6:	c1 f7       	brne	.-16     	; 0x28a8 <SPI_transfer+0x8>

    if(timeout == 0)
    28b8:	23 2b       	or	r18, r19
    28ba:	21 f4       	brne	.+8      	; 0x28c4 <SPI_transfer+0x24>
    {
        *data = 0xFF;
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	fa 01       	movw	r30, r20
    28c0:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
    28c2:	08 95       	ret
    }
    else if ((status&0x40)!=0)
    28c4:	89 2f       	mov	r24, r25
    28c6:	80 74       	andi	r24, 0x40	; 64
    28c8:	96 ff       	sbrs	r25, 6
    28ca:	05 c0       	rjmp	.+10     	; 0x28d6 <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	fa 01       	movw	r30, r20
    28d0:	80 83       	st	Z, r24
        return ERROR_SPI;
    28d2:	8e ef       	ldi	r24, 0xFE	; 254
    28d4:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
    28d6:	92 81       	ldd	r25, Z+2	; 0x02
    28d8:	fa 01       	movw	r30, r20
    28da:	90 83       	st	Z, r25
        return 0;
    }
}
    28dc:	08 95       	ret

000028de <display_error>:

void display_error(volatile UART_t * UART_addr, enum ErrorTypes error)
{
	switch(error)
    28de:	86 2f       	mov	r24, r22
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	fc 01       	movw	r30, r24
    28e4:	e4 5f       	subi	r30, 0xF4	; 244
    28e6:	f1 09       	sbc	r31, r1
    28e8:	ec 30       	cpi	r30, 0x0C	; 12
    28ea:	f1 05       	cpc	r31, r1
    28ec:	08 f0       	brcs	.+2      	; 0x28f0 <display_error+0x12>
    28ee:	64 c0       	rjmp	.+200    	; 0x29b8 <display_error+0xda>
    28f0:	ea 59       	subi	r30, 0x9A	; 154
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__tablejump2__>
	{
		case ERROR_TIMEOUT:
			UART_transmit_string(UART1, "timeout\n", 8);
    28f8:	48 e0       	ldi	r20, 0x08	; 8
    28fa:	62 e9       	ldi	r22, 0x92	; 146
    28fc:	71 e0       	ldi	r23, 0x01	; 1
    28fe:	88 ec       	ldi	r24, 0xC8	; 200
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2906:	08 95       	ret
		case ERROR_SPI:
			UART_transmit_string(UART1, "SPI\n", 4);
    2908:	44 e0       	ldi	r20, 0x04	; 4
    290a:	6b e9       	ldi	r22, 0x9B	; 155
    290c:	71 e0       	ldi	r23, 0x01	; 1
    290e:	88 ec       	ldi	r24, 0xC8	; 200
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2916:	08 95       	ret
		case ERROR_SD:
			UART_transmit_string(UART1, "SD\n", 3);
    2918:	43 e0       	ldi	r20, 0x03	; 3
    291a:	60 ea       	ldi	r22, 0xA0	; 160
    291c:	71 e0       	ldi	r23, 0x01	; 1
    291e:	88 ec       	ldi	r24, 0xC8	; 200
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2926:	08 95       	ret
		case ERROR_VOLTAGE:
			UART_transmit_string(UART1, "VOLTAGE!!!!\n", 12);
    2928:	4c e0       	ldi	r20, 0x0C	; 12
    292a:	64 ea       	ldi	r22, 0xA4	; 164
    292c:	71 e0       	ldi	r23, 0x01	; 1
    292e:	88 ec       	ldi	r24, 0xC8	; 200
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2936:	08 95       	ret
		case ERROR_CMD0:
			UART_transmit_string(UART1, "CMD0\n", 5);
    2938:	45 e0       	ldi	r20, 0x05	; 5
    293a:	61 eb       	ldi	r22, 0xB1	; 177
    293c:	71 e0       	ldi	r23, 0x01	; 1
    293e:	88 ec       	ldi	r24, 0xC8	; 200
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2946:	08 95       	ret
		case ERROR_CMD8:
			UART_transmit_string(UART1, "CMD8\n", 5);
    2948:	45 e0       	ldi	r20, 0x05	; 5
    294a:	67 eb       	ldi	r22, 0xB7	; 183
    294c:	71 e0       	ldi	r23, 0x01	; 1
    294e:	88 ec       	ldi	r24, 0xC8	; 200
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2956:	08 95       	ret
        case ERROR_CMD58:
			UART_transmit_string(UART1, "CMD58\n", 6);
    2958:	46 e0       	ldi	r20, 0x06	; 6
    295a:	6d eb       	ldi	r22, 0xBD	; 189
    295c:	71 e0       	ldi	r23, 0x01	; 1
    295e:	88 ec       	ldi	r24, 0xC8	; 200
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2966:	08 95       	ret
        case ERROR_CMD55:
			UART_transmit_string(UART1, "CMD55\n", 6);
    2968:	46 e0       	ldi	r20, 0x06	; 6
    296a:	64 ec       	ldi	r22, 0xC4	; 196
    296c:	71 e0       	ldi	r23, 0x01	; 1
    296e:	88 ec       	ldi	r24, 0xC8	; 200
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2976:	08 95       	ret
        case ERROR_CMD41:
			UART_transmit_string(UART1, "CMD41\n", 6);
    2978:	46 e0       	ldi	r20, 0x06	; 6
    297a:	6b ec       	ldi	r22, 0xCB	; 203
    297c:	71 e0       	ldi	r23, 0x01	; 1
    297e:	88 ec       	ldi	r24, 0xC8	; 200
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2986:	08 95       	ret
        case ERROR_CMD41_TIMEOUT:
			UART_transmit_string(UART1, "CMD41TIME\n", 10);
    2988:	4a e0       	ldi	r20, 0x0A	; 10
    298a:	62 ed       	ldi	r22, 0xD2	; 210
    298c:	71 e0       	ldi	r23, 0x01	; 1
    298e:	88 ec       	ldi	r24, 0xC8	; 200
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    2996:	08 95       	ret
		case ERROR_TOKEN:
			UART_transmit_string(UART1, "TOKEN\n", 6);
    2998:	46 e0       	ldi	r20, 0x06	; 6
    299a:	6d ed       	ldi	r22, 0xDD	; 221
    299c:	71 e0       	ldi	r23, 0x01	; 1
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    29a6:	08 95       	ret
		case ERROR_CMD16:
			UART_transmit_string(UART1, "CMD16\n", 6);
    29a8:	46 e0       	ldi	r20, 0x06	; 6
    29aa:	64 ee       	ldi	r22, 0xE4	; 228
    29ac:	71 e0       	ldi	r23, 0x01	; 1
    29ae:	88 ec       	ldi	r24, 0xC8	; 200
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    29b6:	08 95       	ret
		default:
			UART_transmit_string(UART1, "impossible\n", 11);
    29b8:	4b e0       	ldi	r20, 0x0B	; 11
    29ba:	6b ee       	ldi	r22, 0xEB	; 235
    29bc:	71 e0       	ldi	r23, 0x01	; 1
    29be:	88 ec       	ldi	r24, 0xC8	; 200
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    29c6:	08 95       	ret

000029c8 <STA013_Init>:
const char STA_sent_prnt[17] PROGMEM = {"Sent to STA013: "};
const char STA_rec_prnt[21] PROGMEM = {"Output from STA013: "};
const char Config_Complete_prnt[25] PROGMEM = {"Configuration Complete\n\r"};
	
uint8_t STA013_Init(void)
{
    29c8:	3f 92       	push	r3
    29ca:	4f 92       	push	r4
    29cc:	5f 92       	push	r5
    29ce:	6f 92       	push	r6
    29d0:	7f 92       	push	r7
    29d2:	8f 92       	push	r8
    29d4:	9f 92       	push	r9
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <STA013_Init+0x24>
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <STA013_Init+0x26>
    29ee:	1f 92       	push	r1
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	85 b1       	in	r24, 0x05	; 5
    29f6:	8d 7f       	andi	r24, 0xFD	; 253
    29f8:	85 b9       	out	0x05, r24	; 5
   uint16_t j,k;
   char * prnt_bffr;
   
   /********* Reset the STA013 **********/
   GPIO_output_clear(STA013_Reset_Port,STA013_Reset_Pin);
   GPIO_output_init(STA013_Reset_Port,STA013_Reset_Pin);  
    29fa:	62 e0       	ldi	r22, 0x02	; 2
    29fc:	83 e2       	ldi	r24, 0x23	; 35
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_output_init>
   timeout=50;
   prnt_bffr=export_print_buffer();
    2a04:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <export_print_buffer>
    2a08:	5c 01       	movw	r10, r24
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    2a0a:	85 b1       	in	r24, 0x05	; 5
    2a0c:	82 60       	ori	r24, 0x02	; 2
    2a0e:	85 b9       	out	0x05, r24	; 5
   GPIO_output_set(STA013_Reset_Port,STA013_Reset_Pin);
 /****** Check for 0xAC in the STA013 ID register Version 1 *******/
      timeout=50;
    2a10:	12 e3       	ldi	r17, 0x32	; 50
	  do
	  {
        error_flag=TWI_master_receive(STA013_TWI_Port,STA013,1,0,3,rcv);
    2a12:	9e 01       	movw	r18, r28
    2a14:	2d 5f       	subi	r18, 0xFD	; 253
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	69 01       	movw	r12, r18
    2a1a:	0f 2e       	mov	r0, r31
    2a1c:	f3 e0       	ldi	r31, 0x03	; 3
    2a1e:	ef 2e       	mov	r14, r31
    2a20:	f1 2c       	mov	r15, r1
    2a22:	f0 2d       	mov	r31, r0
    2a24:	00 e0       	ldi	r16, 0x00	; 0
    2a26:	21 e0       	ldi	r18, 0x01	; 1
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	63 e4       	ldi	r22, 0x43	; 67
    2a30:	88 ed       	ldi	r24, 0xD8	; 216
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_master_receive>
    2a38:	08 2f       	mov	r16, r24
        timeout--;
    2a3a:	11 50       	subi	r17, 0x01	; 1
	  }while((error_flag!=0)&&(timeout!=0));
    2a3c:	88 23       	and	r24, r24
    2a3e:	11 f0       	breq	.+4      	; 0x2a44 <STA013_Init+0x7c>
    2a40:	11 11       	cpse	r17, r1
    2a42:	e7 cf       	rjmp	.-50     	; 0x2a12 <STA013_Init+0x4a>
	  /****** Print the value read from the STA013 ID register *******/
	  if(timeout!=0)
    2a44:	11 23       	and	r17, r17
    2a46:	11 f1       	breq	.+68     	; 0x2a8c <STA013_Init+0xc4>
	  {
         length = copy_string_to_buffer(ID_Reg_prnt,prnt_bffr,0);
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	b5 01       	movw	r22, r10
    2a4c:	85 e9       	ldi	r24, 0x95	; 149
    2a4e:	91 e1       	ldi	r25, 0x11	; 17
    2a50:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
         sprintf((prnt_bffr+(length-1)), "%2.2X \n\r",rcv[2]);
    2a54:	2d 81       	ldd	r18, Y+5	; 0x05
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	1f 92       	push	r1
    2a5c:	2f 93       	push	r18
    2a5e:	2c e0       	ldi	r18, 0x0C	; 12
    2a60:	32 e0       	ldi	r19, 0x02	; 2
    2a62:	3f 93       	push	r19
    2a64:	2f 93       	push	r18
    2a66:	8a 0d       	add	r24, r10
    2a68:	9b 1d       	adc	r25, r11
    2a6a:	9f 93       	push	r25
    2a6c:	8f 93       	push	r24
    2a6e:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
		 UART_transmit_string(UART1,prnt_bffr,0);
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	b5 01       	movw	r22, r10
    2a76:	88 ec       	ldi	r24, 0xC8	; 200
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	20 c0       	rjmp	.+64     	; 0x2acc <STA013_Init+0x104>
	  }
	  else  // Print error flag for debugging
	  {
		  length = copy_string_to_buffer(Error_prnt,prnt_bffr,0);
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	b5 01       	movw	r22, r10
    2a90:	8f ea       	ldi	r24, 0xAF	; 175
    2a92:	91 e1       	ldi	r25, 0x11	; 17
    2a94:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
		  sprintf((prnt_bffr+(length-1)), "%2.2X \n\r",error_flag);
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	1f 92       	push	r1
    2a9e:	0f 93       	push	r16
    2aa0:	2c e0       	ldi	r18, 0x0C	; 12
    2aa2:	32 e0       	ldi	r19, 0x02	; 2
    2aa4:	3f 93       	push	r19
    2aa6:	2f 93       	push	r18
    2aa8:	8a 0d       	add	r24, r10
    2aaa:	9b 1d       	adc	r25, r11
    2aac:	9f 93       	push	r25
    2aae:	8f 93       	push	r24
    2ab0:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
		  UART_transmit_string(UART1,prnt_bffr,0);
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	b5 01       	movw	r22, r10
    2ab8:	88 ec       	ldi	r24, 0xC8	; 200
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
   GPIO_output_init(STA013_Reset_Port,STA013_Reset_Pin);  
   timeout=50;
   prnt_bffr=export_print_buffer();
   GPIO_output_set(STA013_Reset_Port,STA013_Reset_Pin);
 /****** Check for 0xAC in the STA013 ID register Version 1 *******/
      timeout=50;
    2acc:	12 e3       	ldi	r17, 0x32	; 50
   
/****** Check for 0xAC in the STA013 ID register Version 2 *******/
	  timeout=50;
	  do
	  {
		  error_flag=TWI_master_receive(STA013_TWI_Port,STA013,1,1,1,rcv);
    2ace:	ce 01       	movw	r24, r28
    2ad0:	03 96       	adiw	r24, 0x03	; 3
    2ad2:	6c 01       	movw	r12, r24
    2ad4:	ee 24       	eor	r14, r14
    2ad6:	e3 94       	inc	r14
    2ad8:	f1 2c       	mov	r15, r1
    2ada:	01 e0       	ldi	r16, 0x01	; 1
    2adc:	21 e0       	ldi	r18, 0x01	; 1
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	63 e4       	ldi	r22, 0x43	; 67
    2ae6:	88 ed       	ldi	r24, 0xD8	; 216
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_master_receive>
    2aee:	08 2f       	mov	r16, r24
		  timeout--;
    2af0:	11 50       	subi	r17, 0x01	; 1
	  }while((error_flag!=0)&&(timeout!=0));
    2af2:	88 23       	and	r24, r24
    2af4:	11 f0       	breq	.+4      	; 0x2afa <STA013_Init+0x132>
    2af6:	11 11       	cpse	r17, r1
    2af8:	ea cf       	rjmp	.-44     	; 0x2ace <STA013_Init+0x106>
	  /****** Print the value read from the STA013 ID register *******/
	  if(timeout!=0)
    2afa:	11 23       	and	r17, r17
    2afc:	11 f1       	breq	.+68     	; 0x2b42 <STA013_Init+0x17a>
	  {
		  length = copy_string_to_buffer(ID_Reg_prnt,prnt_bffr,0);
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	b5 01       	movw	r22, r10
    2b02:	85 e9       	ldi	r24, 0x95	; 149
    2b04:	91 e1       	ldi	r25, 0x11	; 17
    2b06:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
		  sprintf((prnt_bffr+(length-1)), "%2.2X \n\r",rcv[0]);
    2b0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	1f 92       	push	r1
    2b12:	2f 93       	push	r18
    2b14:	2c e0       	ldi	r18, 0x0C	; 12
    2b16:	32 e0       	ldi	r19, 0x02	; 2
    2b18:	3f 93       	push	r19
    2b1a:	2f 93       	push	r18
    2b1c:	8a 0d       	add	r24, r10
    2b1e:	9b 1d       	adc	r25, r11
    2b20:	9f 93       	push	r25
    2b22:	8f 93       	push	r24
    2b24:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
		  UART_transmit_string(UART1,prnt_bffr,0);
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	b5 01       	movw	r22, r10
    2b2c:	88 ec       	ldi	r24, 0xC8	; 200
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	20 c0       	rjmp	.+64     	; 0x2b82 <STA013_Init+0x1ba>
	  }
	  else  // Print error flag for debugging
	  {
		  length = copy_string_to_buffer(Error_prnt,prnt_bffr,0);
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	b5 01       	movw	r22, r10
    2b46:	8f ea       	ldi	r24, 0xAF	; 175
    2b48:	91 e1       	ldi	r25, 0x11	; 17
    2b4a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
		  sprintf((prnt_bffr+(length-1)), "%2.2X \n\r",error_flag);
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	1f 92       	push	r1
    2b54:	0f 93       	push	r16
    2b56:	2c e0       	ldi	r18, 0x0C	; 12
    2b58:	32 e0       	ldi	r19, 0x02	; 2
    2b5a:	3f 93       	push	r19
    2b5c:	2f 93       	push	r18
    2b5e:	8a 0d       	add	r24, r10
    2b60:	9b 1d       	adc	r25, r11
    2b62:	9f 93       	push	r25
    2b64:	8f 93       	push	r24
    2b66:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
		  UART_transmit_string(UART1,prnt_bffr,0);
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	b5 01       	movw	r22, r10
    2b6e:	88 ec       	ldi	r24, 0xC8	; 200
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
	  }

   //Debugging LED output
   LEDS_on(LED1_PORT,LED1_PIN,ACTIVE_LOW);
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	68 e0       	ldi	r22, 0x08	; 8
    2b86:	83 e2       	ldi	r24, 0x23	; 35
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0e 94 87 0b 	call	0x170e	; 0x170e <LEDS_on>
   if(rcv[0]==0xAC)
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	8c 3a       	cpi	r24, 0xAC	; 172
    2b92:	09 f0       	breq	.+2      	; 0x2b96 <STA013_Init+0x1ce>
    2b94:	91 c1       	rjmp	.+802    	; 0x2eb8 <STA013_Init+0x4f0>
    2b96:	61 2c       	mov	r6, r1
    2b98:	71 2c       	mov	r7, r1
    2b9a:	81 2c       	mov	r8, r1
    2b9c:	91 2c       	mov	r9, r1
     /****** Send the first configuration section *******/
     j=0;
	 k=0;
     do
     {
        reg_addr=pgm_read_byte(&CONFIG[j]);
    2b9e:	f4 01       	movw	r30, r8
    2ba0:	ea 5e       	subi	r30, 0xEA	; 234
    2ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba4:	54 90       	lpm	r5, Z
        j++;
        send[0]=pgm_read_byte(&CONFIG[j]);
    2ba6:	f4 01       	movw	r30, r8
    2ba8:	e9 5e       	subi	r30, 0xE9	; 233
    2baa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bac:	e4 91       	lpm	r30, Z
    2bae:	e9 83       	std	Y+1, r30	; 0x01
        j++;
    2bb0:	92 e0       	ldi	r25, 0x02	; 2
    2bb2:	89 0e       	add	r8, r25
    2bb4:	91 1c       	adc	r9, r1
        if((reg_addr!=0xff)&&(send[0]!=0xFF))
    2bb6:	2f ef       	ldi	r18, 0xFF	; 255
    2bb8:	52 16       	cp	r5, r18
    2bba:	c9 f1       	breq	.+114    	; 0x2c2e <STA013_Init+0x266>
    2bbc:	ef 3f       	cpi	r30, 0xFF	; 255
    2bbe:	b9 f1       	breq	.+110    	; 0x2c2e <STA013_Init+0x266>
    2bc0:	12 e3       	ldi	r17, 0x32	; 50
        {
          
           timeout=50;
           do
           {
               error_flag=TWI_master_transmit(STA013_TWI_Port,STA013,reg_addr,1,1,send);
    2bc2:	85 2d       	mov	r24, r5
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	9e 01       	movw	r18, r28
    2bcc:	2f 5f       	subi	r18, 0xFF	; 255
    2bce:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd0:	69 01       	movw	r12, r18
    2bd2:	ee 24       	eor	r14, r14
    2bd4:	e3 94       	inc	r14
    2bd6:	f1 2c       	mov	r15, r1
    2bd8:	01 e0       	ldi	r16, 0x01	; 1
    2bda:	9c 01       	movw	r18, r24
    2bdc:	ad 01       	movw	r20, r26
    2bde:	63 e4       	ldi	r22, 0x43	; 67
    2be0:	88 ed       	ldi	r24, 0xD8	; 216
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 94 6e 18 	call	0x30dc	; 0x30dc <TWI_master_transmit>
    2be8:	08 2f       	mov	r16, r24
               timeout--;
    2bea:	11 50       	subi	r17, 0x01	; 1
               if(timeout==0)
    2bec:	e1 f4       	brne	.+56     	; 0x2c26 <STA013_Init+0x25e>
			   {
				    LEDS_on(LED0_PORT,LED0_PIN,ACTIVE_LOW);
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	60 e8       	ldi	r22, 0x80	; 128
    2bf2:	86 e2       	ldi	r24, 0x26	; 38
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 87 0b 	call	0x170e	; 0x170e <LEDS_on>
					sprintf(prnt_bffr,"%u\n\r",error_flag);
    2bfa:	1f 92       	push	r1
    2bfc:	0f 93       	push	r16
    2bfe:	87 ef       	ldi	r24, 0xF7	; 247
    2c00:	91 e0       	ldi	r25, 0x01	; 1
    2c02:	9f 93       	push	r25
    2c04:	8f 93       	push	r24
    2c06:	bf 92       	push	r11
    2c08:	af 92       	push	r10
    2c0a:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
					UART_transmit_string(UART1,prnt_bffr,0);
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	b5 01       	movw	r22, r10
    2c12:	88 ec       	ldi	r24, 0xC8	; 200
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
			   }
           }while((error_flag!=0)&&(timeout!=0));
    2c26:	00 23       	and	r16, r16
    2c28:	11 f0       	breq	.+4      	; 0x2c2e <STA013_Init+0x266>
    2c2a:	11 11       	cpse	r17, r1
    2c2c:	ca cf       	rjmp	.-108    	; 0x2bc2 <STA013_Init+0x1fa>
		   
        }
		if((error_flag==0)&&(timeout!=0))
    2c2e:	01 11       	cpse	r16, r1
    2c30:	05 c0       	rjmp	.+10     	; 0x2c3c <STA013_Init+0x274>
    2c32:	11 23       	and	r17, r17
    2c34:	19 f0       	breq	.+6      	; 0x2c3c <STA013_Init+0x274>
		{
			k++;
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	63 1a       	sub	r6, r19
    2c3a:	73 0a       	sbc	r7, r19
		}
     }while(((reg_addr!=0xff)||(send[0]!=0xff)) && (timeout!=0));
    2c3c:	8f ef       	ldi	r24, 0xFF	; 255
    2c3e:	58 12       	cpse	r5, r24
    2c40:	03 c0       	rjmp	.+6      	; 0x2c48 <STA013_Init+0x280>
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	8f 3f       	cpi	r24, 0xFF	; 255
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <STA013_Init+0x284>
    2c48:	11 11       	cpse	r17, r1
    2c4a:	a9 cf       	rjmp	.-174    	; 0x2b9e <STA013_Init+0x1d6>
	 // Debugging output to indicated first configuration section sent
	 copy_string_to_buffer(First_config_prnt,prnt_bffr,0);
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	b5 01       	movw	r22, r10
    2c50:	82 e7       	ldi	r24, 0x72	; 114
    2c52:	91 e1       	ldi	r25, 0x11	; 17
    2c54:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
	 UART_transmit_string(UART1,prnt_bffr,0);
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	b5 01       	movw	r22, r10
    2c5c:	88 ec       	ldi	r24, 0xC8	; 200
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
	 length = copy_string_to_buffer(Number_written_prnt,prnt_bffr,0);
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	b5 01       	movw	r22, r10
    2c68:	83 e3       	ldi	r24, 0x33	; 51
    2c6a:	91 e1       	ldi	r25, 0x11	; 17
    2c6c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
	 sprintf((prnt_bffr+(length-1)), "%2.2u \n\r",k);
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	7f 92       	push	r7
    2c76:	6f 92       	push	r6
    2c78:	2c ef       	ldi	r18, 0xFC	; 252
    2c7a:	31 e0       	ldi	r19, 0x01	; 1
    2c7c:	3f 93       	push	r19
    2c7e:	2f 93       	push	r18
    2c80:	8a 0d       	add	r24, r10
    2c82:	9b 1d       	adc	r25, r11
    2c84:	9f 93       	push	r25
    2c86:	8f 93       	push	r24
    2c88:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
	 UART_transmit_string(UART1,prnt_bffr,0);
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	b5 01       	movw	r22, r10
    2c90:	88 ec       	ldi	r24, 0xC8	; 200
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
	 // Debugging LED output 
	 LEDS_on(LED2_PORT,LED2_PIN,ACTIVE_LOW);
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	60 e1       	ldi	r22, 0x10	; 16
    2c9c:	8c e2       	ldi	r24, 0x2C	; 44
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	0e 94 87 0b 	call	0x170e	; 0x170e <LEDS_on>
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
     j=0;
	 k=0;
    2cb0:	61 2c       	mov	r6, r1
    2cb2:	71 2c       	mov	r7, r1
	 length = copy_string_to_buffer(Number_written_prnt,prnt_bffr,0);
	 sprintf((prnt_bffr+(length-1)), "%2.2u \n\r",k);
	 UART_transmit_string(UART1,prnt_bffr,0);
	 // Debugging LED output 
	 LEDS_on(LED2_PORT,LED2_PIN,ACTIVE_LOW);
     j=0;
    2cb4:	81 2c       	mov	r8, r1
    2cb6:	91 2c       	mov	r9, r1
	 k=0;
     /****** Send the second configuration section *******/
     do
     {
        reg_addr=pgm_read_byte(&CONFIG2[j]);
    2cb8:	f4 01       	movw	r30, r8
    2cba:	ec 51       	subi	r30, 0x1C	; 28
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	54 90       	lpm	r5, Z
        j++;
        send[0]=pgm_read_byte(&CONFIG2[j]);
    2cc0:	f4 01       	movw	r30, r8
    2cc2:	eb 51       	subi	r30, 0x1B	; 27
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	e4 91       	lpm	r30, Z
    2cc8:	e9 83       	std	Y+1, r30	; 0x01
        j++;
    2cca:	92 e0       	ldi	r25, 0x02	; 2
    2ccc:	89 0e       	add	r8, r25
    2cce:	91 1c       	adc	r9, r1
        if((reg_addr!=0xff)&&(send[0]!=0xFF))
    2cd0:	2f ef       	ldi	r18, 0xFF	; 255
    2cd2:	52 16       	cp	r5, r18
    2cd4:	e1 f0       	breq	.+56     	; 0x2d0e <STA013_Init+0x346>
    2cd6:	ef 3f       	cpi	r30, 0xFF	; 255
    2cd8:	d1 f0       	breq	.+52     	; 0x2d0e <STA013_Init+0x346>
    2cda:	12 e3       	ldi	r17, 0x32	; 50
        {
           timeout=50;
           do
           {
               error_flag=TWI_master_receive(STA013_TWI_Port,STA013,reg_addr,1,1,send);
    2cdc:	85 2d       	mov	r24, r5
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 e0       	ldi	r26, 0x00	; 0
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	9e 01       	movw	r18, r28
    2ce6:	2f 5f       	subi	r18, 0xFF	; 255
    2ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cea:	69 01       	movw	r12, r18
    2cec:	ee 24       	eor	r14, r14
    2cee:	e3 94       	inc	r14
    2cf0:	f1 2c       	mov	r15, r1
    2cf2:	01 e0       	ldi	r16, 0x01	; 1
    2cf4:	9c 01       	movw	r18, r24
    2cf6:	ad 01       	movw	r20, r26
    2cf8:	63 e4       	ldi	r22, 0x43	; 67
    2cfa:	88 ed       	ldi	r24, 0xD8	; 216
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_master_receive>
    2d02:	08 2f       	mov	r16, r24
               timeout--;
    2d04:	11 50       	subi	r17, 0x01	; 1
           }while((error_flag!=0)&&(timeout!=0));
    2d06:	88 23       	and	r24, r24
    2d08:	11 f0       	breq	.+4      	; 0x2d0e <STA013_Init+0x346>
    2d0a:	11 11       	cpse	r17, r1
    2d0c:	e7 cf       	rjmp	.-50     	; 0x2cdc <STA013_Init+0x314>
        }
		if((error_flag==0)&&(timeout!=0))
    2d0e:	01 11       	cpse	r16, r1
    2d10:	05 c0       	rjmp	.+10     	; 0x2d1c <STA013_Init+0x354>
    2d12:	11 23       	and	r17, r17
    2d14:	19 f0       	breq	.+6      	; 0x2d1c <STA013_Init+0x354>
		{
			k++;
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	63 1a       	sub	r6, r19
    2d1a:	73 0a       	sbc	r7, r19
		}
     }while(((reg_addr!=0xFF)||(send[0]!=0xFF)) && (timeout!=0) && (error_flag==0));
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
    2d1e:	58 12       	cpse	r5, r24
    2d20:	03 c0       	rjmp	.+6      	; 0x2d28 <STA013_Init+0x360>
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	8f 3f       	cpi	r24, 0xFF	; 255
    2d26:	29 f0       	breq	.+10     	; 0x2d32 <STA013_Init+0x36a>
    2d28:	11 23       	and	r17, r17
    2d2a:	19 f0       	breq	.+6      	; 0x2d32 <STA013_Init+0x36a>
    2d2c:	00 23       	and	r16, r16
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <STA013_Init+0x36a>
    2d30:	c3 cf       	rjmp	.-122    	; 0x2cb8 <STA013_Init+0x2f0>
	 copy_string_to_buffer(Second_config_prnt,prnt_bffr,0);
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	b5 01       	movw	r22, r10
    2d36:	8e e4       	ldi	r24, 0x4E	; 78
    2d38:	91 e1       	ldi	r25, 0x11	; 17
    2d3a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
	 UART_transmit_string(UART1,prnt_bffr,0);
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	b5 01       	movw	r22, r10
    2d42:	88 ec       	ldi	r24, 0xC8	; 200
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
	 length = copy_string_to_buffer(Number_written_prnt,prnt_bffr,0);
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	b5 01       	movw	r22, r10
    2d4e:	83 e3       	ldi	r24, 0x33	; 51
    2d50:	91 e1       	ldi	r25, 0x11	; 17
    2d52:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
	 sprintf((prnt_bffr+(length-1)), "%2.2u \n\r",k);
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	7f 92       	push	r7
    2d5c:	6f 92       	push	r6
    2d5e:	2c ef       	ldi	r18, 0xFC	; 252
    2d60:	31 e0       	ldi	r19, 0x01	; 1
    2d62:	3f 93       	push	r19
    2d64:	2f 93       	push	r18
    2d66:	8a 0d       	add	r24, r10
    2d68:	9b 1d       	adc	r25, r11
    2d6a:	9f 93       	push	r25
    2d6c:	8f 93       	push	r24
    2d6e:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
	 UART_transmit_string(UART1,prnt_bffr,0);
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	b5 01       	movw	r22, r10
    2d76:	88 ec       	ldi	r24, 0xC8	; 200
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
     // Debugging LED output 
	 LEDS_on(LED3_PORT,LED3_PIN,ACTIVE_LOW); 
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	60 e8       	ldi	r22, 0x80	; 128
    2d82:	80 e2       	ldi	r24, 0x20	; 32
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 87 0b 	call	0x170e	; 0x170e <LEDS_on>
	 /****** Send the third configuration section *******/ 
     for(j=0;j<18;j++)
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	81 2c       	mov	r8, r1
    2d98:	91 2c       	mov	r9, r1
    2d9a:	7d c0       	rjmp	.+250    	; 0x2e96 <STA013_Init+0x4ce>
	  {
	    reg_addr=pgm_read_byte(&STA_cfg_addr[j]);
    2d9c:	f4 01       	movw	r30, r8
    2d9e:	e2 53       	subi	r30, 0x32	; 50
    2da0:	fe 4e       	sbci	r31, 0xEE	; 238
    2da2:	34 90       	lpm	r3, Z
	    send[0]=pgm_read_byte(&STA_cfg_data[j]);
    2da4:	f4 01       	movw	r30, r8
    2da6:	e4 54       	subi	r30, 0x44	; 68
    2da8:	fe 4e       	sbci	r31, 0xEE	; 238
    2daa:	e4 91       	lpm	r30, Z
    2dac:	e9 83       	std	Y+1, r30	; 0x01
        timeout=50;
    2dae:	12 e3       	ldi	r17, 0x32	; 50
        do
        {
            error_flag=TWI_master_receive(STA013_TWI_Port,STA013,reg_addr,1,1,send);
    2db0:	43 2c       	mov	r4, r3
    2db2:	51 2c       	mov	r5, r1
    2db4:	61 2c       	mov	r6, r1
    2db6:	71 2c       	mov	r7, r1
    2db8:	9e 01       	movw	r18, r28
    2dba:	2f 5f       	subi	r18, 0xFF	; 255
    2dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbe:	69 01       	movw	r12, r18
    2dc0:	ee 24       	eor	r14, r14
    2dc2:	e3 94       	inc	r14
    2dc4:	f1 2c       	mov	r15, r1
    2dc6:	01 e0       	ldi	r16, 0x01	; 1
    2dc8:	a3 01       	movw	r20, r6
    2dca:	92 01       	movw	r18, r4
    2dcc:	63 e4       	ldi	r22, 0x43	; 67
    2dce:	88 ed       	ldi	r24, 0xD8	; 216
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_master_receive>
    2dd6:	08 2f       	mov	r16, r24
            timeout--;
    2dd8:	11 50       	subi	r17, 0x01	; 1
            if(timeout==0) LEDS_on(LED0_PORT,LED0_PIN,ACTIVE_LOW);
    2dda:	31 f4       	brne	.+12     	; 0x2de8 <STA013_Init+0x420>
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	60 e8       	ldi	r22, 0x80	; 128
    2de0:	86 e2       	ldi	r24, 0x26	; 38
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	0e 94 87 0b 	call	0x170e	; 0x170e <LEDS_on>
        }while((error_flag!=0)&&(timeout!=0));
    2de8:	00 23       	and	r16, r16
    2dea:	11 f0       	breq	.+4      	; 0x2df0 <STA013_Init+0x428>
    2dec:	11 11       	cpse	r17, r1
    2dee:	e0 cf       	rjmp	.-64     	; 0x2db0 <STA013_Init+0x3e8>
		/******* Print the values written from the thrid configuration section to verify the values *******/
		length = copy_string_to_buffer(STA_sent_prnt,prnt_bffr,0);
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	b5 01       	movw	r22, r10
    2df4:	82 e2       	ldi	r24, 0x22	; 34
    2df6:	91 e1       	ldi	r25, 0x11	; 17
    2df8:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
		sprintf((prnt_bffr+(length-1)), "%2.2X  %2.2X \n\r",reg_addr,send[0]);
    2dfc:	29 81       	ldd	r18, Y+1	; 0x01
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	1f 92       	push	r1
    2e04:	2f 93       	push	r18
    2e06:	1f 92       	push	r1
    2e08:	3f 92       	push	r3
    2e0a:	25 e0       	ldi	r18, 0x05	; 5
    2e0c:	32 e0       	ldi	r19, 0x02	; 2
    2e0e:	3f 93       	push	r19
    2e10:	2f 93       	push	r18
    2e12:	8a 0d       	add	r24, r10
    2e14:	9b 1d       	adc	r25, r11
    2e16:	9f 93       	push	r25
    2e18:	8f 93       	push	r24
    2e1a:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
		UART_transmit_string(UART1,prnt_bffr,0);
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	b5 01       	movw	r22, r10
    2e22:	88 ec       	ldi	r24, 0xC8	; 200
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
		error_flag=TWI_master_receive(STA013_TWI_Port,STA013,reg_addr,1,1,rcv);
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	03 96       	adiw	r24, 0x03	; 3
    2e2e:	6c 01       	movw	r12, r24
    2e30:	ee 24       	eor	r14, r14
    2e32:	e3 94       	inc	r14
    2e34:	f1 2c       	mov	r15, r1
    2e36:	01 e0       	ldi	r16, 0x01	; 1
    2e38:	a3 01       	movw	r20, r6
    2e3a:	92 01       	movw	r18, r4
    2e3c:	63 e4       	ldi	r22, 0x43	; 67
    2e3e:	88 ed       	ldi	r24, 0xD8	; 216
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_master_receive>
    2e46:	08 2f       	mov	r16, r24
		length = copy_string_to_buffer(STA_rec_prnt,prnt_bffr,0);
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	b5 01       	movw	r22, r10
    2e4c:	8d e0       	ldi	r24, 0x0D	; 13
    2e4e:	91 e1       	ldi	r25, 0x11	; 17
    2e50:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
		sprintf((prnt_bffr+(length-1)), "%2.2X  %2.2X %2.2X \n\r",reg_addr,rcv[0],error_flag);
    2e54:	2b 81       	ldd	r18, Y+3	; 0x03
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	1f 92       	push	r1
    2e5c:	0f 93       	push	r16
    2e5e:	1f 92       	push	r1
    2e60:	2f 93       	push	r18
    2e62:	1f 92       	push	r1
    2e64:	3f 92       	push	r3
    2e66:	25 e1       	ldi	r18, 0x15	; 21
    2e68:	32 e0       	ldi	r19, 0x02	; 2
    2e6a:	3f 93       	push	r19
    2e6c:	2f 93       	push	r18
    2e6e:	8a 0d       	add	r24, r10
    2e70:	9b 1d       	adc	r25, r11
    2e72:	9f 93       	push	r25
    2e74:	8f 93       	push	r24
    2e76:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
		UART_transmit_string(UART1,prnt_bffr,0);
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	b5 01       	movw	r22, r10
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
	 sprintf((prnt_bffr+(length-1)), "%2.2u \n\r",k);
	 UART_transmit_string(UART1,prnt_bffr,0);
     // Debugging LED output 
	 LEDS_on(LED3_PORT,LED3_PIN,ACTIVE_LOW); 
	 /****** Send the third configuration section *******/ 
     for(j=0;j<18;j++)
    2e86:	9f ef       	ldi	r25, 0xFF	; 255
    2e88:	89 1a       	sub	r8, r25
    2e8a:	99 0a       	sbc	r9, r25
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	32 e1       	ldi	r19, 0x12	; 18
    2e98:	83 16       	cp	r8, r19
    2e9a:	91 04       	cpc	r9, r1
    2e9c:	08 f4       	brcc	.+2      	; 0x2ea0 <STA013_Init+0x4d8>
    2e9e:	7e cf       	rjmp	.-260    	; 0x2d9c <STA013_Init+0x3d4>
		length = copy_string_to_buffer(STA_rec_prnt,prnt_bffr,0);
		sprintf((prnt_bffr+(length-1)), "%2.2X  %2.2X %2.2X \n\r",reg_addr,rcv[0],error_flag);
		UART_transmit_string(UART1,prnt_bffr,0);

	  }
	  copy_string_to_buffer(Config_Complete_prnt,prnt_bffr,0);
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	b5 01       	movw	r22, r10
    2ea4:	84 ef       	ldi	r24, 0xF4	; 244
    2ea6:	90 e1       	ldi	r25, 0x10	; 16
    2ea8:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <copy_string_to_buffer>
	  UART_transmit_string(UART1,prnt_bffr,0);
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	b5 01       	movw	r22, r10
    2eb0:	88 ec       	ldi	r24, 0xC8	; 200
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
   }   
   // Switch off debugging LEDs
   LEDS_off(LED1_PORT,LED1_PIN,ACTIVE_LOW);
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	68 e0       	ldi	r22, 0x08	; 8
    2ebc:	83 e2       	ldi	r24, 0x23	; 35
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 94 0b 	call	0x1728	; 0x1728 <LEDS_off>
   LEDS_off(LED2_PORT,LED2_PIN,ACTIVE_LOW);
    2ec4:	40 e0       	ldi	r20, 0x00	; 0
    2ec6:	60 e1       	ldi	r22, 0x10	; 16
    2ec8:	8c e2       	ldi	r24, 0x2C	; 44
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	0e 94 94 0b 	call	0x1728	; 0x1728 <LEDS_off>
   LEDS_off(LED3_PORT,LED3_PIN,ACTIVE_LOW);  
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	60 e8       	ldi	r22, 0x80	; 128
    2ed4:	80 e2       	ldi	r24, 0x20	; 32
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 94 0b 	call	0x1728	; 0x1728 <LEDS_off>
   return error_flag;
}
    2edc:	80 2f       	mov	r24, r16
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	cf 90       	pop	r12
    2ef8:	bf 90       	pop	r11
    2efa:	af 90       	pop	r10
    2efc:	9f 90       	pop	r9
    2efe:	8f 90       	pop	r8
    2f00:	7f 90       	pop	r7
    2f02:	6f 90       	pop	r6
    2f04:	5f 90       	pop	r5
    2f06:	4f 90       	pop	r4
    2f08:	3f 90       	pop	r3
    2f0a:	08 95       	ret

00002f0c <nackCond>:
#include "twi.h"

void nackCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (0<<TWEA) | (1<<TWEN));
    2f0c:	24 e8       	ldi	r18, 0x84	; 132
    2f0e:	fc 01       	movw	r30, r24
    2f10:	24 83       	std	Z+4, r18	; 0x04
    2f12:	08 95       	ret

00002f14 <fullStopCond>:
}

void fullStopCond(volatile TWI_t* TWI_addr)
{
    2f14:	fc 01       	movw	r30, r24
	uint8_t status;
	uint8_t timeout = 200;
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
    2f16:	84 e9       	ldi	r24, 0x94	; 148
    2f18:	84 83       	std	Z+4, r24	; 0x04
	do 
	{
		status = TWI_addr->TWCR;
    2f1a:	94 81       	ldd	r25, Z+4	; 0x04
		//timeout--;
	} while (((status& 0x10) != 0) && (timeout != 0));
    2f1c:	94 fd       	sbrc	r25, 4
    2f1e:	fd cf       	rjmp	.-6      	; 0x2f1a <fullStopCond+0x6>
}
    2f20:	08 95       	ret

00002f22 <startCond>:

void startCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
    2f22:	24 ea       	ldi	r18, 0xA4	; 164
    2f24:	fc 01       	movw	r30, r24
    2f26:	24 83       	std	Z+4, r18	; 0x04
    2f28:	08 95       	ret

00002f2a <ackCond>:
}

void ackCond(volatile TWI_t* TWI_addr)
{
	TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEA) | (1<<TWEN));	
    2f2a:	24 ec       	ldi	r18, 0xC4	; 196
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	24 83       	std	Z+4, r18	; 0x04
    2f30:	08 95       	ret

00002f32 <TWI_master_init>:
}
    
uint8_t TWI_master_init(volatile TWI_t *TWI_addr, uint32_t I2C_freq)
{
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	ec 01       	movw	r28, r24
    2f40:	9a 01       	movw	r18, r20
    2f42:	ab 01       	movw	r20, r22
    //TWI_ERROR_CODES error = TWI_OK; 
    uint8_t twps_val;
	uint32_t prescale;
	prescale = (F_CPU/OSC_DIV);
	prescale = prescale/I2C_freq;
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	74 e2       	ldi	r23, 0x24	; 36
    2f48:	84 ef       	ldi	r24, 0xF4	; 244
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
	prescale = prescale - 16UL;
    2f50:	69 01       	movw	r12, r18
    2f52:	7a 01       	movw	r14, r20
    2f54:	80 e1       	ldi	r24, 0x10	; 16
    2f56:	c8 1a       	sub	r12, r24
    2f58:	d1 08       	sbc	r13, r1
    2f5a:	e1 08       	sbc	r14, r1
    2f5c:	f1 08       	sbc	r15, r1
	prescale = prescale/(2UL*255);
    2f5e:	c7 01       	movw	r24, r14
    2f60:	b6 01       	movw	r22, r12
    2f62:	2e ef       	ldi	r18, 0xFE	; 254
    2f64:	31 e0       	ldi	r19, 0x01	; 1
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
    2f6e:	21 15       	cp	r18, r1
    2f70:	31 05       	cpc	r19, r1
    2f72:	41 05       	cpc	r20, r1
    2f74:	51 05       	cpc	r21, r1
    2f76:	a9 f0       	breq	.+42     	; 0x2fa2 <TWI_master_init+0x70>
		prescale = 1;
        twps_val = 0x00;
    } else if (prescale < 4) {
    2f78:	24 30       	cpi	r18, 0x04	; 4
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	41 05       	cpc	r20, r1
    2f7e:	51 05       	cpc	r21, r1
    2f80:	b0 f0       	brcs	.+44     	; 0x2fae <TWI_master_init+0x7c>
		prescale = 4;
        twps_val = 0x01;
    } else if (prescale < 16) {
    2f82:	20 31       	cpi	r18, 0x10	; 16
    2f84:	31 05       	cpc	r19, r1
    2f86:	41 05       	cpc	r20, r1
    2f88:	51 05       	cpc	r21, r1
    2f8a:	b8 f0       	brcs	.+46     	; 0x2fba <TWI_master_init+0x88>
		prescale = 16;
        twps_val = 0x02;
    } else if (prescale < 64) {
    2f8c:	20 34       	cpi	r18, 0x40	; 64
    2f8e:	31 05       	cpc	r19, r1
    2f90:	41 05       	cpc	r20, r1
    2f92:	51 05       	cpc	r21, r1
    2f94:	28 f5       	brcc	.+74     	; 0x2fe0 <TWI_master_init+0xae>
		prescale = 64;
    2f96:	40 e4       	ldi	r20, 0x40	; 64
    2f98:	50 e0       	ldi	r21, 0x00	; 0
    2f9a:	60 e0       	ldi	r22, 0x00	; 0
    2f9c:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x03;
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	11 c0       	rjmp	.+34     	; 0x2fc4 <TWI_master_init+0x92>
	prescale = prescale/I2C_freq;
	prescale = prescale - 16UL;
	prescale = prescale/(2UL*255);
    //uint32_t prescale = (((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*255);
    if (prescale < 1) {
		prescale = 1;
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x00;
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	0b c0       	rjmp	.+22     	; 0x2fc4 <TWI_master_init+0x92>
    } else if (prescale < 4) {
		prescale = 4;
    2fae:	44 e0       	ldi	r20, 0x04	; 4
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x01;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	05 c0       	rjmp	.+10     	; 0x2fc4 <TWI_master_init+0x92>
    } else if (prescale < 16) {
		prescale = 16;
    2fba:	40 e1       	ldi	r20, 0x10	; 16
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
        twps_val = 0x02;
    2fc2:	82 e0       	ldi	r24, 0x02	; 2
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
    }

    TWI_addr->TWSR = twps_val;
    2fc4:	89 83       	std	Y+1, r24	; 0x01

    uint8_t TWBR=(((F_CPU/OSC_DIV)/I2C_freq)-16UL)/(2UL*prescale);
    2fc6:	9a 01       	movw	r18, r20
    2fc8:	ab 01       	movw	r20, r22
    2fca:	22 0f       	add	r18, r18
    2fcc:	33 1f       	adc	r19, r19
    2fce:	44 1f       	adc	r20, r20
    2fd0:	55 1f       	adc	r21, r21
    2fd2:	c7 01       	movw	r24, r14
    2fd4:	b6 01       	movw	r22, r12
    2fd6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
    if (TWBR >= 256)
    {
        return TWI_ERROR_TWO; // fail
    }

    TWI_addr->TWBR = TWBR;
    2fda:	28 83       	st	Y, r18
    
    return 0;
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	01 c0       	rjmp	.+2      	; 0x2fe2 <TWI_master_init+0xb0>
        twps_val = 0x02;
    } else if (prescale < 64) {
		prescale = 64;
        twps_val = 0x03;
    } else {
        return TWI_ERROR; // fail
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    }

    TWI_addr->TWBR = TWBR;
    
    return 0;
}
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	df 90       	pop	r13
    2fec:	cf 90       	pop	r12
    2fee:	08 95       	ret

00002ff0 <TWI_master_receive>:

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
    2ff0:	cf 92       	push	r12
    2ff2:	df 92       	push	r13
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	1f 93       	push	r17
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	ec 01       	movw	r28, r24
	uint8_t index;
	//internal address is optional and a bonus, along with int_addr_sz
	
	
	//send device address with a 1 in LSB (SLA+R). LSB being a 1 means read, see lecture
	send_value = (device_addr<<1) | 0x01;
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	66 0f       	add	r22, r22
    3004:	77 1f       	adc	r23, r23
    3006:	16 2f       	mov	r17, r22
    3008:	11 60       	ori	r17, 0x01	; 1
	
	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
    300a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <startCond>
	//TWI_addr->TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));	
	
	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
    300e:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
    3010:	88 23       	and	r24, r24
    3012:	ec f7       	brge	.-6      	; 0x300e <TWI_master_receive+0x1e>
	
	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	88 7f       	andi	r24, 0xF8	; 248
	
	//if start sent, then send SLA+R (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat)) //0x08 0x10
    3018:	88 30       	cpi	r24, 0x08	; 8
    301a:	19 f0       	breq	.+6      	; 0x3022 <TWI_master_receive+0x32>
    301c:	80 31       	cpi	r24, 0x10	; 16
    301e:	09 f0       	breq	.+2      	; 0x3022 <TWI_master_receive+0x32>
    3020:	52 c0       	rjmp	.+164    	; 0x30c6 <TWI_master_receive+0xd6>
	{
		TWI_addr->TWDR = send_value;
    3022:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    3024:	84 e8       	ldi	r24, 0x84	; 132
    3026:	8c 83       	std	Y+4, r24	; 0x04
	************/
	
	// Wait for TWINT to be set indicating transmission of SLA+R and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
    3028:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
    302a:	88 23       	and	r24, r24
    302c:	ec f7       	brge	.-6      	; 0x3028 <TWI_master_receive+0x38>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	88 7f       	andi	r24, 0xF8	; 248
	
	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(temp8 == TWSR_R_ACK_rcvd) //SLA+R sent, ACK received  0x40
    3032:	80 34       	cpi	r24, 0x40	; 64
    3034:	d9 f5       	brne	.+118    	; 0x30ac <TWI_master_receive+0xbc>
	{
		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 1)
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	e8 16       	cp	r14, r24
    303a:	f1 04       	cpc	r15, r1
    303c:	29 f4       	brne	.+10     	; 0x3048 <TWI_master_receive+0x58>
		{
			nackCond(TWI_addr);
    303e:	ce 01       	movw	r24, r28
    3040:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <nackCond>
    
    return 0;
}

uint8_t TWI_master_receive(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
    3044:	10 e0       	ldi	r17, 0x00	; 0
    3046:	2a c0       	rjmp	.+84     	; 0x309c <TWI_master_receive+0xac>
			nackCond(TWI_addr);
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			ackCond(TWI_addr);
    3048:	ce 01       	movw	r24, r28
    304a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <ackCond>
    304e:	fa cf       	rjmp	.-12     	; 0x3044 <TWI_master_receive+0x54>
		while((num_bytes != 0) && (1!=2)) //put error check here..
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
    3050:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
    3052:	88 23       	and	r24, r24
    3054:	ec f7       	brge	.-6      	; 0x3050 <TWI_master_receive+0x60>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_R_ACK_rtrnd) //data byte received, ack sent back  0x50
    305a:	80 35       	cpi	r24, 0x50	; 80
    305c:	a9 f4       	brne	.+42     	; 0x3088 <TWI_master_receive+0x98>
			{
				num_bytes--;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	e8 1a       	sub	r14, r24
    3062:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
    3064:	f6 01       	movw	r30, r12
    3066:	e1 0f       	add	r30, r17
    3068:	f1 1d       	adc	r31, r1
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	80 83       	st	Z, r24
				index++;
    306e:	1f 5f       	subi	r17, 0xFF	; 255
				if(num_bytes == 1)
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	e8 16       	cp	r14, r24
    3074:	f1 04       	cpc	r15, r1
    3076:	21 f4       	brne	.+8      	; 0x3080 <TWI_master_receive+0x90>
				{
					nackCond(TWI_addr);  //TWEA=0
    3078:	ce 01       	movw	r24, r28
    307a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <nackCond>
    307e:	0e c0       	rjmp	.+28     	; 0x309c <TWI_master_receive+0xac>
				}
				else
				{
					ackCond(TWI_addr); //TWEA=1
    3080:	ce 01       	movw	r24, r28
    3082:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <ackCond>
    3086:	0a c0       	rjmp	.+20     	; 0x309c <TWI_master_receive+0xac>
				}
			}
			else if (temp8 == TWSR_R_NACK_rtrnd)
    3088:	88 35       	cpi	r24, 0x58	; 88
    308a:	41 f4       	brne	.+16     	; 0x309c <TWI_master_receive+0xac>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	e8 1a       	sub	r14, r24
    3090:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	f6 01       	movw	r30, r12
    3096:	e1 0f       	add	r30, r17
    3098:	f1 1d       	adc	r31, r1
    309a:	80 83       	st	Z, r24
			ackCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = 0;
		while((num_bytes != 0) && (1!=2)) //put error check here..
    309c:	e1 14       	cp	r14, r1
    309e:	f1 04       	cpc	r15, r1
    30a0:	b9 f6       	brne	.-82     	; 0x3050 <TWI_master_receive+0x60>
				//fullStopCond(TWI_addr);
				
			}
			
		}
		fullStopCond(TWI_addr);
    30a2:	ce 01       	movw	r24, r28
    30a4:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
		if (temp8 == TWSR_ARB)
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
		}
	}
	return 0;
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	10 c0       	rjmp	.+32     	; 0x30cc <TWI_master_receive+0xdc>
		fullStopCond(TWI_addr);
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		
		if (temp8 == TWSR_R_NACK_rcvd)
    30ac:	88 34       	cpi	r24, 0x48	; 72
    30ae:	29 f4       	brne	.+10     	; 0x30ba <TWI_master_receive+0xca>
		{
			fullStopCond(TWI_addr);
    30b0:	ce 01       	movw	r24, r28
    30b2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
			return TWI_ERROR_NACK;
    30b6:	85 e0       	ldi	r24, 0x05	; 5
    30b8:	09 c0       	rjmp	.+18     	; 0x30cc <TWI_master_receive+0xdc>
		}
		if (temp8 == TWSR_ARB)
    30ba:	88 33       	cpi	r24, 0x38	; 56
    30bc:	31 f4       	brne	.+12     	; 0x30ca <TWI_master_receive+0xda>
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    30be:	84 e8       	ldi	r24, 0x84	; 132
    30c0:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
	return 0;
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	03 c0       	rjmp	.+6      	; 0x30cc <TWI_master_receive+0xdc>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
    30c6:	84 e0       	ldi	r24, 0x04	; 4
    30c8:	01 c0       	rjmp	.+2      	; 0x30cc <TWI_master_receive+0xdc>
		if (temp8 == TWSR_ARB)
		{
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
		}
	}
	return 0;
    30ca:	80 e0       	ldi	r24, 0x00	; 0
}
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	1f 91       	pop	r17
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
    30da:	08 95       	ret

000030dc <TWI_master_transmit>:

uint8_t TWI_master_transmit(volatile TWI_t *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t* arr)
{
    30dc:	8f 92       	push	r8
    30de:	9f 92       	push	r9
    30e0:	af 92       	push	r10
    30e2:	bf 92       	push	r11
    30e4:	cf 92       	push	r12
    30e6:	df 92       	push	r13
    30e8:	ef 92       	push	r14
    30ea:	ff 92       	push	r15
    30ec:	0f 93       	push	r16
    30ee:	1f 93       	push	r17
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	ec 01       	movw	r28, r24
    30f6:	49 01       	movw	r8, r18
    30f8:	5a 01       	movw	r10, r20
	uint8_t temp8;
	uint8_t send_value;
	uint8_t index;

	//send device address with a 0 in LSB (SLA+W). LSB being a 1 means write, see lecture
	send_value = (device_addr<<1);
    30fa:	16 2f       	mov	r17, r22
    30fc:	11 0f       	add	r17, r17

	//create start condition (writes to TWCR, TWINT set, TWSTA start cond set, write 1 to TWEN To enable TWI 
	startCond(TWI_addr);
    30fe:	0e 94 91 17 	call	0x2f22	; 0x2f22 <startCond>

	//wait for TWINT (bit 7) to be set in TWCR
	do 
	{
		status = TWI_addr->TWCR;
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status&0x80)==0);
    3104:	88 23       	and	r24, r24
    3106:	ec f7       	brge	.-6      	; 0x3102 <TWI_master_transmit+0x26>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	88 7f       	andi	r24, 0xF8	; 248

	//if start sent, then send SLA+W (temp8/status can be start or repeated start condition)
	if((temp8 == TWSR_START_Cond) || (temp8 == TWSR_START_Cond_repeat)) //0x08 0x10
    310c:	88 30       	cpi	r24, 0x08	; 8
    310e:	19 f0       	breq	.+6      	; 0x3116 <TWI_master_transmit+0x3a>
    3110:	80 31       	cpi	r24, 0x10	; 16
    3112:	09 f0       	breq	.+2      	; 0x3116 <TWI_master_transmit+0x3a>
    3114:	8e c0       	rjmp	.+284    	; 0x3232 <TWI_master_transmit+0x156>
	{
		TWI_addr->TWDR = send_value;
    3116:	1b 83       	std	Y+3, r17	; 0x03
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    3118:	84 e8       	ldi	r24, 0x84	; 132
    311a:	8c 83       	std	Y+4, r24	; 0x04
	}

	// Wait for TWINT to be set indicating transmission of SLA+W and reception of ACK/NACK
	do 
	{
		status = TWI_addr->TWCR;
    311c:	8c 81       	ldd	r24, Y+4	; 0x04
	} while ((status & 0x80) == 0);
    311e:	88 23       	and	r24, r24
    3120:	ec f7       	brge	.-6      	; 0x311c <TWI_master_transmit+0x40>

	//read status
	temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	18 2f       	mov	r17, r24
    3126:	18 7f       	andi	r17, 0xF8	; 248
	* INT ADDR
	*
	************/

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received 0x18
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	88 7f       	andi	r24, 0xF8	; 248
    312c:	88 31       	cpi	r24, 0x18	; 24
    312e:	09 f0       	breq	.+2      	; 0x3132 <TWI_master_transmit+0x56>
    3130:	79 c0       	rjmp	.+242    	; 0x3224 <TWI_master_transmit+0x148>
    3132:	28 c0       	rjmp	.+80     	; 0x3184 <TWI_master_transmit+0xa8>
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
		{
			//send byte(s), MSB first
			TWI_addr->TWDR = (int_addr >> (8 * (int_addr_sz - i - 1))) & 0xFF;
    3134:	80 2f       	mov	r24, r16
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	82 1b       	sub	r24, r18
    313a:	91 09       	sbc	r25, r1
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	b5 01       	movw	r22, r10
    314c:	a4 01       	movw	r20, r8
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <TWI_master_transmit+0x7c>
    3150:	76 95       	lsr	r23
    3152:	67 95       	ror	r22
    3154:	57 95       	ror	r21
    3156:	47 95       	ror	r20
    3158:	8a 95       	dec	r24
    315a:	d2 f7       	brpl	.-12     	; 0x3150 <TWI_master_transmit+0x74>
    315c:	4b 83       	std	Y+3, r20	; 0x03
			TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
    315e:	84 e8       	ldi	r24, 0x84	; 132
    3160:	8c 83       	std	Y+4, r24	; 0x04

			//wait for TWINT
			do 
			{
				status = TWI_addr->TWCR;
    3162:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status & 0x80) == 0);
    3164:	88 23       	and	r24, r24
    3166:	ec f7       	brge	.-6      	; 0x3162 <TWI_master_transmit+0x86>

			//receive ACK from slave 0x28
			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); //clear lower 3 bits
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	88 7f       	andi	r24, 0xF8	; 248

			//receive ACK From slave -> break if NACK received
			if(temp8 == TWSR_W_NACK_rcvd_int)
    316c:	80 32       	cpi	r24, 0x20	; 32
    316e:	29 f4       	brne	.+10     	; 0x317a <TWI_master_transmit+0x9e>
			{
				fullStopCond(TWI_addr);
    3170:	ce 01       	movw	r24, r28
    3172:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
				return TWI_ERROR_NACK;
    3176:	85 e0       	ldi	r24, 0x05	; 5
    3178:	63 c0       	rjmp	.+198    	; 0x3240 <TWI_master_transmit+0x164>
			}
			if(temp8 == TWSR_ARB)
    317a:	88 33       	cpi	r24, 0x38	; 56
    317c:	09 f4       	brne	.+2      	; 0x3180 <TWI_master_transmit+0xa4>
    317e:	5b c0       	rjmp	.+182    	; 0x3236 <TWI_master_transmit+0x15a>

	//receive ACK From slave (write 1 to TWEA, bit 6 of TWCR, when ACK should be sent after receiving data from slave)
	if(((TWI_addr->TWSR) &0xF8)== TWSR_W_ACK_rcvd_int) //SLA+W sent, ACK received 0x18
	{
		// send internal address to TWDR (0-4 bytes)
		for(uint8_t i = 0; i < int_addr_sz; i++)
    3180:	2f 5f       	subi	r18, 0xFF	; 255
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <TWI_master_transmit+0xaa>
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	20 17       	cp	r18, r16
    3188:	a8 f2       	brcs	.-86     	; 0x3134 <TWI_master_transmit+0x58>
		************/


		//be prepped to send stop cond if only 1 bit received
		// if 1 byte received, send NACK to slave ( write 0 to TWEA)
		if(num_bytes == 0)
    318a:	e1 14       	cp	r14, r1
    318c:	f1 04       	cpc	r15, r1
    318e:	29 f4       	brne	.+10     	; 0x319a <TWI_master_transmit+0xbe>
		{
			fullStopCond(TWI_addr);
    3190:	ce 01       	movw	r24, r28
    3192:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
			return 0;
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	53 c0       	rjmp	.+166    	; 0x3240 <TWI_master_transmit+0x164>
		}
		if(num_bytes == 1)
    319a:	51 e0       	ldi	r21, 0x01	; 1
    319c:	e5 16       	cp	r14, r21
    319e:	f1 04       	cpc	r15, r1
    31a0:	21 f4       	brne	.+8      	; 0x31aa <TWI_master_transmit+0xce>
		{
			ackCond(TWI_addr);
    31a2:	ce 01       	movw	r24, r28
    31a4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <ackCond>
    31a8:	03 c0       	rjmp	.+6      	; 0x31b0 <TWI_master_transmit+0xd4>
		}
		// if >1 byte received, send ACK after all but the last byte.
		else
		{
			ackCond(TWI_addr);
    31aa:	ce 01       	movw	r24, r28
    31ac:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <ackCond>
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
    31b0:	1f ef       	ldi	r17, 0xFF	; 255
    31b2:	1e 0d       	add	r17, r14
		while((num_bytes != 0) && (1!=2)) //put error check here..
    31b4:	2f c0       	rjmp	.+94     	; 0x3214 <TWI_master_transmit+0x138>
		{
			//wait for TWINT to be set
			do 
			{
				status = TWI_addr->TWCR;
    31b6:	8c 81       	ldd	r24, Y+4	; 0x04
			} while ((status&0x80)==0);
    31b8:	88 23       	and	r24, r24
    31ba:	ec f7       	brge	.-6      	; 0x31b6 <TWI_master_transmit+0xda>

			//read status
			temp8 = ((TWI_addr->TWSR)&0xF8); // clear lower 3 bits
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	88 7f       	andi	r24, 0xF8	; 248
			
			//i think this is nested inside this loop?
			if(temp8 == TWSR_W_ACK_rcvd_data) //data byte received, ack sent back
    31c0:	88 32       	cpi	r24, 0x28	; 40
    31c2:	a9 f4       	brne	.+42     	; 0x31ee <TWI_master_transmit+0x112>
			{
				num_bytes--;
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	e6 1a       	sub	r14, r22
    31c8:	f1 08       	sbc	r15, r1
				TWI_addr->TWDR = arr[index];
    31ca:	f6 01       	movw	r30, r12
    31cc:	e1 0f       	add	r30, r17
    31ce:	f1 1d       	adc	r31, r1
    31d0:	80 81       	ld	r24, Z
    31d2:	8b 83       	std	Y+3, r24	; 0x03
				index--;
    31d4:	11 50       	subi	r17, 0x01	; 1
				if(num_bytes == 0)
    31d6:	e1 14       	cp	r14, r1
    31d8:	f1 04       	cpc	r15, r1
    31da:	29 f4       	brne	.+10     	; 0x31e6 <TWI_master_transmit+0x10a>
				{
					fullStopCond(TWI_addr);
    31dc:	ce 01       	movw	r24, r28
    31de:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
					return 0;
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	2d c0       	rjmp	.+90     	; 0x3240 <TWI_master_transmit+0x164>
					//nackCond(TWI_addr);
				}
				else
				{
					ackCond(TWI_addr);
    31e6:	ce 01       	movw	r24, r28
    31e8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <ackCond>
    31ec:	13 c0       	rjmp	.+38     	; 0x3214 <TWI_master_transmit+0x138>
				}
			}
			else if (temp8 == TWSR_W_NACK_rcvd_data)
    31ee:	80 33       	cpi	r24, 0x30	; 48
    31f0:	79 f4       	brne	.+30     	; 0x3210 <TWI_master_transmit+0x134>
			{
				//save byte to array, dec num_bytes
				num_bytes--;
    31f2:	71 e0       	ldi	r23, 0x01	; 1
    31f4:	e7 1a       	sub	r14, r23
    31f6:	f1 08       	sbc	r15, r1
				arr[index] = TWI_addr->TWDR;
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	f6 01       	movw	r30, r12
    31fc:	e1 0f       	add	r30, r17
    31fe:	f1 1d       	adc	r31, r1
    3200:	80 83       	st	Z, r24
				
				//write 1 to TWSTO (bit 4) to request stop condition
				fullStopCond(TWI_addr);
    3202:	ce 01       	movw	r24, r28
    3204:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
				
				//wait for twsto to return to 0
				do 
				{
					status = TWI_addr->TWCR;
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
				} while ((status&0x10) != 0);
    320a:	84 fd       	sbrc	r24, 4
    320c:	fd cf       	rjmp	.-6      	; 0x3208 <TWI_master_transmit+0x12c>
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <TWI_master_transmit+0x138>
				
			}
			else if (temp8 == TWSR_ARB)
    3210:	88 33       	cpi	r24, 0x38	; 56
    3212:	99 f0       	breq	.+38     	; 0x323a <TWI_master_transmit+0x15e>
			ackCond(TWI_addr);
		}

		//send all data bytes until all bytes sent or error
		index = num_bytes-1;
		while((num_bytes != 0) && (1!=2)) //put error check here..
    3214:	e1 14       	cp	r14, r1
    3216:	f1 04       	cpc	r15, r1
    3218:	71 f6       	brne	.-100    	; 0x31b6 <TWI_master_transmit+0xda>
			{
				return TWI_ERROR;
			}
			
		}
		fullStopCond(TWI_addr);
    321a:	ce 01       	movw	r24, r28
    321c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
		else
		{
			return TWI_ERROR;
		}
	}
	return 0;
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	0e c0       	rjmp	.+28     	; 0x3240 <TWI_master_transmit+0x164>
		}
		fullStopCond(TWI_addr);
	}
	else //NACK at the start is not expected, we didn't get to receive anything.
	{
		fullStopCond(TWI_addr);
    3224:	ce 01       	movw	r24, r28
    3226:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <fullStopCond>
		if (temp8 == TWSR_W_NACK_rcvd_int)
    322a:	10 32       	cpi	r17, 0x20	; 32
    322c:	41 f4       	brne	.+16     	; 0x323e <TWI_master_transmit+0x162>
		{
			return TWI_ERROR_NACK;
    322e:	85 e0       	ldi	r24, 0x05	; 5
    3230:	07 c0       	rjmp	.+14     	; 0x3240 <TWI_master_transmit+0x164>
		TWI_addr->TWCR = ((1<<TWINT) | (1<<TWEN));
	}
	//can check for errors here?
	else
	{
		return TWI_ERROR_BUS_BUSY;
    3232:	84 e0       	ldi	r24, 0x04	; 4
    3234:	05 c0       	rjmp	.+10     	; 0x3240 <TWI_master_transmit+0x164>
				fullStopCond(TWI_addr);
				return TWI_ERROR_NACK;
			}
			if(temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	03 c0       	rjmp	.+6      	; 0x3240 <TWI_master_transmit+0x164>
				} while ((status&0x10) != 0);
				
			}
			else if (temp8 == TWSR_ARB)
			{
				return TWI_ERROR;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	01 c0       	rjmp	.+2      	; 0x3240 <TWI_master_transmit+0x164>
		{
			return TWI_ERROR_NACK;
		}
		else
		{
			return TWI_ERROR;
    323e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	df 90       	pop	r13
    324e:	cf 90       	pop	r12
    3250:	bf 90       	pop	r11
    3252:	af 90       	pop	r10
    3254:	9f 90       	pop	r9
    3256:	8f 90       	pop	r8
    3258:	08 95       	ret

0000325a <sta_debug_test>:
	return 0;
	
}

uint8_t sta_debug_test()
{
    325a:	9f 92       	push	r9
    325c:	af 92       	push	r10
    325e:	bf 92       	push	r11
    3260:	cf 92       	push	r12
    3262:	df 92       	push	r13
    3264:	ef 92       	push	r14
    3266:	ff 92       	push	r15
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	00 d0       	rcall	.+0      	; 0x3272 <sta_debug_test+0x18>
    3272:	1f 92       	push	r1
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
	//hold PB1 low for at least 100ns:
	GPIO_output_init(PB, (1<<1));
    3278:	62 e0       	ldi	r22, 0x02	; 2
    327a:	83 e2       	ldi	r24, 0x23	; 35
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_output_init>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    3282:	85 b1       	in	r24, 0x05	; 5
    3284:	8d 7f       	andi	r24, 0xFD	; 253
    3286:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3288:	00 c0       	rjmp	.+0      	; 0x328a <sta_debug_test+0x30>
*             Inline function for quicker GPIO output response
*   Caution: Can change any PORT reg. bit, not just outputs
***************************************************************/
static inline void GPIO_output_set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    328a:	85 b1       	in	r24, 0x05	; 5
    328c:	82 60       	ori	r24, 0x02	; 2
    328e:	85 b9       	out	0x05, r24	; 5
	_delay_us((double) .1);//this is 100ns, might mess up tho
	GPIO_output_set(PB, (1<<1));
	
	char * prnt_bffr;
	
	prnt_bffr=export_print_buffer();
    3290:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <export_print_buffer>
    3294:	98 2e       	mov	r9, r24
    3296:	19 2f       	mov	r17, r25
	clear_print_buffer();
    3298:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <clear_print_buffer>
	//memset(prnt_bffr, 0, sizeof(prnt_bffr[0]) * 80);
	
	uint8_t array[3] = {0,0,0};
    329c:	19 82       	std	Y+1, r1	; 0x01
    329e:	1a 82       	std	Y+2, r1	; 0x02
    32a0:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t error;
	uint16_t timeout = 100;
    32a2:	0f 2e       	mov	r0, r31
    32a4:	f4 e6       	ldi	r31, 0x64	; 100
    32a6:	af 2e       	mov	r10, r31
    32a8:	b1 2c       	mov	r11, r1
    32aa:	f0 2d       	mov	r31, r0
	do
	{
		error = TWI_master_transmit(TWI1, 0x43, 0x01, 1, 0, array);
    32ac:	ce 01       	movw	r24, r28
    32ae:	01 96       	adiw	r24, 0x01	; 1
    32b0:	6c 01       	movw	r12, r24
    32b2:	e1 2c       	mov	r14, r1
    32b4:	f1 2c       	mov	r15, r1
    32b6:	01 e0       	ldi	r16, 0x01	; 1
    32b8:	21 e0       	ldi	r18, 0x01	; 1
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	63 e4       	ldi	r22, 0x43	; 67
    32c2:	88 ed       	ldi	r24, 0xD8	; 216
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 6e 18 	call	0x30dc	; 0x30dc <TWI_master_transmit>
		timeout--;
    32ca:	91 e0       	ldi	r25, 0x01	; 1
    32cc:	a9 1a       	sub	r10, r25
    32ce:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0));
    32d0:	88 23       	and	r24, r24
    32d2:	49 f0       	breq	.+18     	; 0x32e6 <sta_debug_test+0x8c>
    32d4:	a1 14       	cp	r10, r1
    32d6:	b1 04       	cpc	r11, r1
    32d8:	49 f7       	brne	.-46     	; 0x32ac <sta_debug_test+0x52>
    32da:	0f 2e       	mov	r0, r31
    32dc:	f4 e6       	ldi	r31, 0x64	; 100
    32de:	af 2e       	mov	r10, r31
    32e0:	b1 2c       	mov	r11, r1
    32e2:	f0 2d       	mov	r31, r0
    32e4:	05 c0       	rjmp	.+10     	; 0x32f0 <sta_debug_test+0x96>
    32e6:	0f 2e       	mov	r0, r31
    32e8:	f4 e6       	ldi	r31, 0x64	; 100
    32ea:	af 2e       	mov	r10, r31
    32ec:	b1 2c       	mov	r11, r1
    32ee:	f0 2d       	mov	r31, r0

	timeout = 100;
	do
	{
		error = TWI_master_receive(TWI1, 0x43, 0, 0, 1, array);
    32f0:	ce 01       	movw	r24, r28
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	6c 01       	movw	r12, r24
    32f6:	ee 24       	eor	r14, r14
    32f8:	e3 94       	inc	r14
    32fa:	f1 2c       	mov	r15, r1
    32fc:	00 e0       	ldi	r16, 0x00	; 0
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	a9 01       	movw	r20, r18
    3304:	63 e4       	ldi	r22, 0x43	; 67
    3306:	88 ed       	ldi	r24, 0xD8	; 216
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWI_master_receive>
		timeout--;
    330e:	91 e0       	ldi	r25, 0x01	; 1
    3310:	a9 1a       	sub	r10, r25
    3312:	b1 08       	sbc	r11, r1
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
    3314:	88 23       	and	r24, r24
    3316:	19 f0       	breq	.+6      	; 0x331e <sta_debug_test+0xc4>
    3318:	a1 14       	cp	r10, r1
    331a:	b1 04       	cpc	r11, r1
    331c:	49 f7       	brne	.-46     	; 0x32f0 <sta_debug_test+0x96>
	
	if(timeout == 0)
    331e:	ab 28       	or	r10, r11
    3320:	d1 f0       	breq	.+52     	; 0x3356 <sta_debug_test+0xfc>
	{
		return TWI_ERROR_TIMEOUT;
	}
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	1f 92       	push	r1
    3326:	8f 93       	push	r24
    3328:	8b e2       	ldi	r24, 0x2B	; 43
    332a:	92 e0       	ldi	r25, 0x02	; 2
    332c:	9f 93       	push	r25
    332e:	8f 93       	push	r24
    3330:	1f 93       	push	r17
    3332:	9f 92       	push	r9
    3334:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <sprintf>
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
    3338:	40 ea       	ldi	r20, 0xA0	; 160
    333a:	69 2d       	mov	r22, r9
    333c:	71 2f       	mov	r23, r17
    333e:	88 ec       	ldi	r24, 0xC8	; 200
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
	
	return 0;
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <sta_debug_test+0xfe>
		timeout--;
	} while ((error >= 1) && (timeout != 0)); //while there is an error (>= 1) and timeout isn't done yet
	
	if(timeout == 0)
	{
		return TWI_ERROR_TIMEOUT;
    3356:	83 e0       	ldi	r24, 0x03	; 3
	
	sprintf(prnt_bffr, "Received Value = %2x\n\r", array[0]);
	UART_transmit_string(UART1, prnt_bffr, sizeof(prnt_bffr)*80);
	
	return 0;
}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	ff 90       	pop	r15
    3368:	ef 90       	pop	r14
    336a:	df 90       	pop	r13
    336c:	cf 90       	pop	r12
    336e:	bf 90       	pop	r11
    3370:	af 90       	pop	r10
    3372:	9f 90       	pop	r9
    3374:	08 95       	ret

00003376 <printError>:

void printError(uint8_t err)
{
	switch(err)
    3376:	82 30       	cpi	r24, 0x02	; 2
    3378:	e1 f0       	breq	.+56     	; 0x33b2 <printError+0x3c>
    337a:	28 f4       	brcc	.+10     	; 0x3386 <printError+0x10>
    337c:	88 23       	and	r24, r24
    337e:	49 f0       	breq	.+18     	; 0x3392 <printError+0x1c>
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	79 f0       	breq	.+30     	; 0x33a2 <printError+0x2c>
    3384:	36 c0       	rjmp	.+108    	; 0x33f2 <printError+0x7c>
    3386:	84 30       	cpi	r24, 0x04	; 4
    3388:	21 f1       	breq	.+72     	; 0x33d2 <printError+0x5c>
    338a:	d8 f0       	brcs	.+54     	; 0x33c2 <printError+0x4c>
    338c:	85 30       	cpi	r24, 0x05	; 5
    338e:	49 f1       	breq	.+82     	; 0x33e2 <printError+0x6c>
    3390:	30 c0       	rjmp	.+96     	; 0x33f2 <printError+0x7c>
	{
		case 0:
			UART_transmit_string(UART1, "TWI_OK\n", 7);
    3392:	47 e0       	ldi	r20, 0x07	; 7
    3394:	62 e4       	ldi	r22, 0x42	; 66
    3396:	72 e0       	ldi	r23, 0x02	; 2
    3398:	88 ec       	ldi	r24, 0xC8	; 200
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    33a0:	08 95       	ret
		case 1:
			UART_transmit_string(UART1, "TWI_ERR\n", 8);
    33a2:	48 e0       	ldi	r20, 0x08	; 8
    33a4:	6a e4       	ldi	r22, 0x4A	; 74
    33a6:	72 e0       	ldi	r23, 0x02	; 2
    33a8:	88 ec       	ldi	r24, 0xC8	; 200
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    33b0:	08 95       	ret
		case 2:
			UART_transmit_string(UART1, "TWI_ERR_TWO\n", 12);
    33b2:	4c e0       	ldi	r20, 0x0C	; 12
    33b4:	63 e5       	ldi	r22, 0x53	; 83
    33b6:	72 e0       	ldi	r23, 0x02	; 2
    33b8:	88 ec       	ldi	r24, 0xC8	; 200
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    33c0:	08 95       	ret
		case 3:
			UART_transmit_string(UART1, "TWI_ERR_TIME\n", 13);
    33c2:	4d e0       	ldi	r20, 0x0D	; 13
    33c4:	60 e6       	ldi	r22, 0x60	; 96
    33c6:	72 e0       	ldi	r23, 0x02	; 2
    33c8:	88 ec       	ldi	r24, 0xC8	; 200
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    33d0:	08 95       	ret
		case 4:
			UART_transmit_string(UART1, "TWI_ERR_BUS\n", 12);
    33d2:	4c e0       	ldi	r20, 0x0C	; 12
    33d4:	6e e6       	ldi	r22, 0x6E	; 110
    33d6:	72 e0       	ldi	r23, 0x02	; 2
    33d8:	88 ec       	ldi	r24, 0xC8	; 200
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    33e0:	08 95       	ret
		case 5:
			UART_transmit_string(UART1, "TWI_ERR_NACK\n", 13);
    33e2:	4d e0       	ldi	r20, 0x0D	; 13
    33e4:	6b e7       	ldi	r22, 0x7B	; 123
    33e6:	72 e0       	ldi	r23, 0x02	; 2
    33e8:	88 ec       	ldi	r24, 0xC8	; 200
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
			break;
    33f0:	08 95       	ret
		default:
			UART_transmit_string(UART1, "TWI_OTHER\n", 10);
    33f2:	4a e0       	ldi	r20, 0x0A	; 10
    33f4:	69 e8       	ldi	r22, 0x89	; 137
    33f6:	72 e0       	ldi	r23, 0x02	; 2
    33f8:	88 ec       	ldi	r24, 0xC8	; 200
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 84 1a 	call	0x3508	; 0x3508 <UART_transmit_string>
    3400:	08 95       	ret

00003402 <UART_init>:
*             Calculates and sets the baud rate reload register
*
*   Caution: Does not check the for valid input parameters
***************************************************************/
void UART_init (volatile UART_t * UART_addr, uint32_t Baud_Rate)
{
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)((((F_CPU/OSC_DIV)+(4UL*(2-U2X_bit)*Baud_Rate))/(8UL*(2-U2X_bit)*Baud_Rate))-1);
    3408:	db 01       	movw	r26, r22
    340a:	ca 01       	movw	r24, r20
    340c:	80 58       	subi	r24, 0x80	; 128
    340e:	9b 47       	sbci	r25, 0x7B	; 123
    3410:	a1 4e       	sbci	r26, 0xE1	; 225
    3412:	bf 4f       	sbci	r27, 0xFF	; 255
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	aa 1f       	adc	r26, r26
    341a:	bb 1f       	adc	r27, r27
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	aa 1f       	adc	r26, r26
    3422:	bb 1f       	adc	r27, r27
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	aa 1f       	adc	r26, r26
    342a:	bb 1f       	adc	r27, r27
    342c:	44 0f       	add	r20, r20
    342e:	55 1f       	adc	r21, r21
    3430:	66 1f       	adc	r22, r22
    3432:	77 1f       	adc	r23, r23
    3434:	44 0f       	add	r20, r20
    3436:	55 1f       	adc	r21, r21
    3438:	66 1f       	adc	r22, r22
    343a:	77 1f       	adc	r23, r23
    343c:	9a 01       	movw	r18, r20
    343e:	ab 01       	movw	r20, r22
    3440:	22 0f       	add	r18, r18
    3442:	33 1f       	adc	r19, r19
    3444:	44 1f       	adc	r20, r20
    3446:	55 1f       	adc	r21, r21
    3448:	22 0f       	add	r18, r18
    344a:	33 1f       	adc	r19, r19
    344c:	44 1f       	adc	r20, r20
    344e:	55 1f       	adc	r21, r21
    3450:	bc 01       	movw	r22, r24
    3452:	cd 01       	movw	r24, r26
    3454:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodsi4>
    3458:	21 50       	subi	r18, 0x01	; 1
    345a:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
    345c:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
    345e:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
    3460:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
    3462:	86 e0       	ldi	r24, 0x06	; 6
    3464:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
    3466:	88 e1       	ldi	r24, 0x18	; 24
    3468:	89 83       	std	Y+1, r24	; 0x01
}
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	08 95       	ret

00003470 <UART_transmit>:
*
*   Caution: Will not transmit if TXEN is not set in UART_init
***************************************************************/

char UART_transmit(volatile UART_t * UART_addr, char c)
{
    3470:	fc 01       	movw	r30, r24
	uint8_t status, error_flag;
	uint16_t timeout;
	timeout=0;
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
	do
	{
		status=(UART_addr->UCSRA);
    3476:	90 81       	ld	r25, Z
		timeout++;
    3478:	2f 5f       	subi	r18, 0xFF	; 255
    347a:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
    347c:	95 fd       	sbrc	r25, 5
    347e:	03 c0       	rjmp	.+6      	; 0x3486 <UART_transmit+0x16>
    3480:	21 15       	cp	r18, r1
    3482:	31 05       	cpc	r19, r1
    3484:	c1 f7       	brne	.-16     	; 0x3476 <UART_transmit+0x6>
	if(0==timeout)
    3486:	23 2b       	or	r18, r19
    3488:	19 f0       	breq	.+6      	; 0x3490 <UART_transmit+0x20>
	{
		error_flag=UART_TX_TIMEOUT;
	}
	else
	{
		(UART_addr->UDR) = c;
    348a:	66 83       	std	Z+6, r22	; 0x06
		error_flag=UART_NO_ERRORS;
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	08 95       	ret
		status=(UART_addr->UCSRA);
		timeout++;
	} while (((status & (1 << UDRE))!=(1 << UDRE))&&(timeout!=0));
	if(0==timeout)
	{
		error_flag=UART_TX_TIMEOUT;
    3490:	80 e9       	ldi	r24, 0x90	; 144
	{
		(UART_addr->UDR) = c;
		error_flag=UART_NO_ERRORS;
	}
	return error_flag;
}
    3492:	08 95       	ret

00003494 <UART_receive>:
*   Caution: Will not receive if RXEN is not set in UART_init
*            Waits forever until a value is received
***************************************************************/

char UART_receive(volatile UART_t * UART_addr)
{
    3494:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=(UART_addr->UCSRA);
    3496:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
    3498:	99 23       	and	r25, r25
    349a:	ec f7       	brge	.-6      	; 0x3496 <UART_receive+0x2>
	return (UART_addr->UDR);  // return the value in the receive buffer
    349c:	86 81       	ldd	r24, Z+6	; 0x06
}
    349e:	08 95       	ret

000034a0 <export_print_buffer>:
******/    
char * export_print_buffer(void)
{
	
	return print_buffer;
}
    34a0:	84 e9       	ldi	r24, 0x94	; 148
    34a2:	92 e0       	ldi	r25, 0x02	; 2
    34a4:	08 95       	ret

000034a6 <clear_print_buffer>:

void clear_print_buffer(void)
{
	for(uint8_t i = 0; i < 80; i++)
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	06 c0       	rjmp	.+12     	; 0x34b6 <clear_print_buffer+0x10>
	{
		print_buffer[i] = 0;
    34aa:	e8 2f       	mov	r30, r24
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	ec 56       	subi	r30, 0x6C	; 108
    34b0:	fd 4f       	sbci	r31, 0xFD	; 253
    34b2:	10 82       	st	Z, r1
	return print_buffer;
}

void clear_print_buffer(void)
{
	for(uint8_t i = 0; i < 80; i++)
    34b4:	8f 5f       	subi	r24, 0xFF	; 255
    34b6:	80 35       	cpi	r24, 0x50	; 80
    34b8:	c0 f3       	brcs	.-16     	; 0x34aa <clear_print_buffer+0x4>
	{
		print_buffer[i] = 0;
	}
}
    34ba:	08 95       	ret

000034bc <copy_string_to_buffer>:
*
*   Caution: Will not work properly if first string is not in Flash
***************************************************************/

uint8_t copy_string_to_buffer(const char flash_string[], char buffer_p[], uint8_t num_bytes)
{
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
    34c2:	41 11       	cpse	r20, r1
    34c4:	1a c0       	rjmp	.+52     	; 0x34fa <copy_string_to_buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
    34c6:	24 2f       	mov	r18, r20
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	fd 01       	movw	r30, r26
    34cc:	e2 0f       	add	r30, r18
    34ce:	f3 1f       	adc	r31, r19
    34d0:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
    34d2:	eb 01       	movw	r28, r22
    34d4:	c2 0f       	add	r28, r18
    34d6:	d3 1f       	adc	r29, r19
    34d8:	e8 83       	st	Y, r30
			index++;
    34da:	4f 5f       	subi	r20, 0xFF	; 255
		} while (value!=0);
    34dc:	e1 11       	cpse	r30, r1
    34de:	f3 cf       	rjmp	.-26     	; 0x34c6 <copy_string_to_buffer+0xa>
    34e0:	0f c0       	rjmp	.+30     	; 0x3500 <copy_string_to_buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
    34e2:	29 2f       	mov	r18, r25
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	fd 01       	movw	r30, r26
    34e8:	e2 0f       	add	r30, r18
    34ea:	f3 1f       	adc	r31, r19
    34ec:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
    34ee:	eb 01       	movw	r28, r22
    34f0:	c2 0f       	add	r28, r18
    34f2:	d3 1f       	adc	r29, r19
    34f4:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    34f6:	9f 5f       	subi	r25, 0xFF	; 255
    34f8:	01 c0       	rjmp	.+2      	; 0x34fc <copy_string_to_buffer+0x40>
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	94 17       	cp	r25, r20
    34fe:	88 f3       	brcs	.-30     	; 0x34e2 <copy_string_to_buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
    3500:	84 2f       	mov	r24, r20
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	08 95       	ret

00003508 <UART_transmit_string>:
*   Caution: Loops in the function until the entire string is printed.
*            May not be suitable for real-time use.
***************************************************************/

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
    3508:	ef 92       	push	r14
    350a:	ff 92       	push	r15
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	7c 01       	movw	r14, r24
    3516:	8b 01       	movw	r16, r22
    3518:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
    351a:	41 11       	cpse	r20, r1
    351c:	18 c0       	rjmp	.+48     	; 0x354e <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
    351e:	fb 01       	movw	r30, r22
    3520:	60 81       	ld	r22, Z
                index=0;
    3522:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
    3524:	08 c0       	rjmp	.+16     	; 0x3536 <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
    3526:	c7 01       	movw	r24, r14
    3528:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
			index++;
    352c:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
    352e:	f8 01       	movw	r30, r16
    3530:	ec 0f       	add	r30, r28
    3532:	f1 1d       	adc	r31, r1
    3534:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
    3536:	61 11       	cpse	r22, r1
    3538:	f6 cf       	rjmp	.-20     	; 0x3526 <UART_transmit_string+0x1e>
    353a:	0c c0       	rjmp	.+24     	; 0x3554 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
    353c:	f8 01       	movw	r30, r16
    353e:	ec 0f       	add	r30, r28
    3540:	f1 1d       	adc	r31, r1
    3542:	60 81       	ld	r22, Z
    3544:	c7 01       	movw	r24, r14
    3546:	0e 94 38 1a 	call	0x3470	; 0x3470 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    354a:	cf 5f       	subi	r28, 0xFF	; 255
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <UART_transmit_string+0x48>
    354e:	c0 e0       	ldi	r28, 0x00	; 0
    3550:	cd 17       	cp	r28, r29
    3552:	a0 f3       	brcs	.-24     	; 0x353c <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	ff 90       	pop	r15
    355e:	ef 90       	pop	r14
    3560:	08 95       	ret

00003562 <__mulsi3>:
    3562:	db 01       	movw	r26, r22
    3564:	8f 93       	push	r24
    3566:	9f 93       	push	r25
    3568:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__muluhisi3>
    356c:	bf 91       	pop	r27
    356e:	af 91       	pop	r26
    3570:	a2 9f       	mul	r26, r18
    3572:	80 0d       	add	r24, r0
    3574:	91 1d       	adc	r25, r1
    3576:	a3 9f       	mul	r26, r19
    3578:	90 0d       	add	r25, r0
    357a:	b2 9f       	mul	r27, r18
    357c:	90 0d       	add	r25, r0
    357e:	11 24       	eor	r1, r1
    3580:	08 95       	ret

00003582 <__udivmodhi4>:
    3582:	aa 1b       	sub	r26, r26
    3584:	bb 1b       	sub	r27, r27
    3586:	51 e1       	ldi	r21, 0x11	; 17
    3588:	07 c0       	rjmp	.+14     	; 0x3598 <__udivmodhi4_ep>

0000358a <__udivmodhi4_loop>:
    358a:	aa 1f       	adc	r26, r26
    358c:	bb 1f       	adc	r27, r27
    358e:	a6 17       	cp	r26, r22
    3590:	b7 07       	cpc	r27, r23
    3592:	10 f0       	brcs	.+4      	; 0x3598 <__udivmodhi4_ep>
    3594:	a6 1b       	sub	r26, r22
    3596:	b7 0b       	sbc	r27, r23

00003598 <__udivmodhi4_ep>:
    3598:	88 1f       	adc	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	5a 95       	dec	r21
    359e:	a9 f7       	brne	.-22     	; 0x358a <__udivmodhi4_loop>
    35a0:	80 95       	com	r24
    35a2:	90 95       	com	r25
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	08 95       	ret

000035aa <__udivmodsi4>:
    35aa:	a1 e2       	ldi	r26, 0x21	; 33
    35ac:	1a 2e       	mov	r1, r26
    35ae:	aa 1b       	sub	r26, r26
    35b0:	bb 1b       	sub	r27, r27
    35b2:	fd 01       	movw	r30, r26
    35b4:	0d c0       	rjmp	.+26     	; 0x35d0 <__udivmodsi4_ep>

000035b6 <__udivmodsi4_loop>:
    35b6:	aa 1f       	adc	r26, r26
    35b8:	bb 1f       	adc	r27, r27
    35ba:	ee 1f       	adc	r30, r30
    35bc:	ff 1f       	adc	r31, r31
    35be:	a2 17       	cp	r26, r18
    35c0:	b3 07       	cpc	r27, r19
    35c2:	e4 07       	cpc	r30, r20
    35c4:	f5 07       	cpc	r31, r21
    35c6:	20 f0       	brcs	.+8      	; 0x35d0 <__udivmodsi4_ep>
    35c8:	a2 1b       	sub	r26, r18
    35ca:	b3 0b       	sbc	r27, r19
    35cc:	e4 0b       	sbc	r30, r20
    35ce:	f5 0b       	sbc	r31, r21

000035d0 <__udivmodsi4_ep>:
    35d0:	66 1f       	adc	r22, r22
    35d2:	77 1f       	adc	r23, r23
    35d4:	88 1f       	adc	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	1a 94       	dec	r1
    35da:	69 f7       	brne	.-38     	; 0x35b6 <__udivmodsi4_loop>
    35dc:	60 95       	com	r22
    35de:	70 95       	com	r23
    35e0:	80 95       	com	r24
    35e2:	90 95       	com	r25
    35e4:	9b 01       	movw	r18, r22
    35e6:	ac 01       	movw	r20, r24
    35e8:	bd 01       	movw	r22, r26
    35ea:	cf 01       	movw	r24, r30
    35ec:	08 95       	ret

000035ee <__tablejump2__>:
    35ee:	ee 0f       	add	r30, r30
    35f0:	ff 1f       	adc	r31, r31
    35f2:	05 90       	lpm	r0, Z+
    35f4:	f4 91       	lpm	r31, Z
    35f6:	e0 2d       	mov	r30, r0
    35f8:	09 94       	ijmp

000035fa <__muluhisi3>:
    35fa:	0e 94 08 1b 	call	0x3610	; 0x3610 <__umulhisi3>
    35fe:	a5 9f       	mul	r26, r21
    3600:	90 0d       	add	r25, r0
    3602:	b4 9f       	mul	r27, r20
    3604:	90 0d       	add	r25, r0
    3606:	a4 9f       	mul	r26, r20
    3608:	80 0d       	add	r24, r0
    360a:	91 1d       	adc	r25, r1
    360c:	11 24       	eor	r1, r1
    360e:	08 95       	ret

00003610 <__umulhisi3>:
    3610:	a2 9f       	mul	r26, r18
    3612:	b0 01       	movw	r22, r0
    3614:	b3 9f       	mul	r27, r19
    3616:	c0 01       	movw	r24, r0
    3618:	a3 9f       	mul	r26, r19
    361a:	70 0d       	add	r23, r0
    361c:	81 1d       	adc	r24, r1
    361e:	11 24       	eor	r1, r1
    3620:	91 1d       	adc	r25, r1
    3622:	b2 9f       	mul	r27, r18
    3624:	70 0d       	add	r23, r0
    3626:	81 1d       	adc	r24, r1
    3628:	11 24       	eor	r1, r1
    362a:	91 1d       	adc	r25, r1
    362c:	08 95       	ret

0000362e <atol>:
    362e:	1f 93       	push	r17
    3630:	fc 01       	movw	r30, r24
    3632:	99 27       	eor	r25, r25
    3634:	88 27       	eor	r24, r24
    3636:	bc 01       	movw	r22, r24
    3638:	e8 94       	clt
    363a:	11 91       	ld	r17, Z+
    363c:	10 32       	cpi	r17, 0x20	; 32
    363e:	e9 f3       	breq	.-6      	; 0x363a <atol+0xc>
    3640:	19 30       	cpi	r17, 0x09	; 9
    3642:	10 f0       	brcs	.+4      	; 0x3648 <atol+0x1a>
    3644:	1e 30       	cpi	r17, 0x0E	; 14
    3646:	c8 f3       	brcs	.-14     	; 0x363a <atol+0xc>
    3648:	1b 32       	cpi	r17, 0x2B	; 43
    364a:	51 f0       	breq	.+20     	; 0x3660 <atol+0x32>
    364c:	1d 32       	cpi	r17, 0x2D	; 45
    364e:	49 f4       	brne	.+18     	; 0x3662 <atol+0x34>
    3650:	68 94       	set
    3652:	06 c0       	rjmp	.+12     	; 0x3660 <atol+0x32>
    3654:	0e 94 3e 1b 	call	0x367c	; 0x367c <__mulsi_const_10>
    3658:	61 0f       	add	r22, r17
    365a:	71 1d       	adc	r23, r1
    365c:	81 1d       	adc	r24, r1
    365e:	91 1d       	adc	r25, r1
    3660:	11 91       	ld	r17, Z+
    3662:	10 53       	subi	r17, 0x30	; 48
    3664:	1a 30       	cpi	r17, 0x0A	; 10
    3666:	b0 f3       	brcs	.-20     	; 0x3654 <atol+0x26>
    3668:	3e f4       	brtc	.+14     	; 0x3678 <atol+0x4a>
    366a:	90 95       	com	r25
    366c:	80 95       	com	r24
    366e:	70 95       	com	r23
    3670:	61 95       	neg	r22
    3672:	7f 4f       	sbci	r23, 0xFF	; 255
    3674:	8f 4f       	sbci	r24, 0xFF	; 255
    3676:	9f 4f       	sbci	r25, 0xFF	; 255
    3678:	1f 91       	pop	r17
    367a:	08 95       	ret

0000367c <__mulsi_const_10>:
    367c:	59 2f       	mov	r21, r25
    367e:	48 2f       	mov	r20, r24
    3680:	37 2f       	mov	r19, r23
    3682:	26 2f       	mov	r18, r22
    3684:	66 0f       	add	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	88 1f       	adc	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	66 0f       	add	r22, r22
    368e:	77 1f       	adc	r23, r23
    3690:	88 1f       	adc	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	62 0f       	add	r22, r18
    3696:	73 1f       	adc	r23, r19
    3698:	84 1f       	adc	r24, r20
    369a:	95 1f       	adc	r25, r21
    369c:	66 0f       	add	r22, r22
    369e:	77 1f       	adc	r23, r23
    36a0:	88 1f       	adc	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	08 95       	ret

000036a6 <sprintf>:
    36a6:	ae e0       	ldi	r26, 0x0E	; 14
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	e9 e5       	ldi	r30, 0x59	; 89
    36ac:	fb e1       	ldi	r31, 0x1B	; 27
    36ae:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__+0x1c>
    36b2:	0d 89       	ldd	r16, Y+21	; 0x15
    36b4:	1e 89       	ldd	r17, Y+22	; 0x16
    36b6:	86 e0       	ldi	r24, 0x06	; 6
    36b8:	8c 83       	std	Y+4, r24	; 0x04
    36ba:	1a 83       	std	Y+2, r17	; 0x02
    36bc:	09 83       	std	Y+1, r16	; 0x01
    36be:	8f ef       	ldi	r24, 0xFF	; 255
    36c0:	9f e7       	ldi	r25, 0x7F	; 127
    36c2:	9e 83       	std	Y+6, r25	; 0x06
    36c4:	8d 83       	std	Y+5, r24	; 0x05
    36c6:	ae 01       	movw	r20, r28
    36c8:	47 5e       	subi	r20, 0xE7	; 231
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	6f 89       	ldd	r22, Y+23	; 0x17
    36ce:	78 8d       	ldd	r23, Y+24	; 0x18
    36d0:	ce 01       	movw	r24, r28
    36d2:	01 96       	adiw	r24, 0x01	; 1
    36d4:	0e 94 75 1b 	call	0x36ea	; 0x36ea <vfprintf>
    36d8:	ef 81       	ldd	r30, Y+7	; 0x07
    36da:	f8 85       	ldd	r31, Y+8	; 0x08
    36dc:	e0 0f       	add	r30, r16
    36de:	f1 1f       	adc	r31, r17
    36e0:	10 82       	st	Z, r1
    36e2:	2e 96       	adiw	r28, 0x0e	; 14
    36e4:	e4 e0       	ldi	r30, 0x04	; 4
    36e6:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__+0x1c>

000036ea <vfprintf>:
    36ea:	ab e0       	ldi	r26, 0x0B	; 11
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	eb e7       	ldi	r30, 0x7B	; 123
    36f0:	fb e1       	ldi	r31, 0x1B	; 27
    36f2:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__prologue_saves__>
    36f6:	6c 01       	movw	r12, r24
    36f8:	7b 01       	movw	r14, r22
    36fa:	8a 01       	movw	r16, r20
    36fc:	fc 01       	movw	r30, r24
    36fe:	17 82       	std	Z+7, r1	; 0x07
    3700:	16 82       	std	Z+6, r1	; 0x06
    3702:	83 81       	ldd	r24, Z+3	; 0x03
    3704:	81 ff       	sbrs	r24, 1
    3706:	cc c1       	rjmp	.+920    	; 0x3aa0 <vfprintf+0x3b6>
    3708:	ce 01       	movw	r24, r28
    370a:	01 96       	adiw	r24, 0x01	; 1
    370c:	3c 01       	movw	r6, r24
    370e:	f6 01       	movw	r30, r12
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	f7 01       	movw	r30, r14
    3714:	93 fd       	sbrc	r25, 3
    3716:	85 91       	lpm	r24, Z+
    3718:	93 ff       	sbrs	r25, 3
    371a:	81 91       	ld	r24, Z+
    371c:	7f 01       	movw	r14, r30
    371e:	88 23       	and	r24, r24
    3720:	09 f4       	brne	.+2      	; 0x3724 <vfprintf+0x3a>
    3722:	ba c1       	rjmp	.+884    	; 0x3a98 <vfprintf+0x3ae>
    3724:	85 32       	cpi	r24, 0x25	; 37
    3726:	39 f4       	brne	.+14     	; 0x3736 <vfprintf+0x4c>
    3728:	93 fd       	sbrc	r25, 3
    372a:	85 91       	lpm	r24, Z+
    372c:	93 ff       	sbrs	r25, 3
    372e:	81 91       	ld	r24, Z+
    3730:	7f 01       	movw	r14, r30
    3732:	85 32       	cpi	r24, 0x25	; 37
    3734:	29 f4       	brne	.+10     	; 0x3740 <vfprintf+0x56>
    3736:	b6 01       	movw	r22, r12
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    373e:	e7 cf       	rjmp	.-50     	; 0x370e <vfprintf+0x24>
    3740:	91 2c       	mov	r9, r1
    3742:	21 2c       	mov	r2, r1
    3744:	31 2c       	mov	r3, r1
    3746:	ff e1       	ldi	r31, 0x1F	; 31
    3748:	f3 15       	cp	r31, r3
    374a:	d8 f0       	brcs	.+54     	; 0x3782 <vfprintf+0x98>
    374c:	8b 32       	cpi	r24, 0x2B	; 43
    374e:	79 f0       	breq	.+30     	; 0x376e <vfprintf+0x84>
    3750:	38 f4       	brcc	.+14     	; 0x3760 <vfprintf+0x76>
    3752:	80 32       	cpi	r24, 0x20	; 32
    3754:	79 f0       	breq	.+30     	; 0x3774 <vfprintf+0x8a>
    3756:	83 32       	cpi	r24, 0x23	; 35
    3758:	a1 f4       	brne	.+40     	; 0x3782 <vfprintf+0x98>
    375a:	23 2d       	mov	r18, r3
    375c:	20 61       	ori	r18, 0x10	; 16
    375e:	1d c0       	rjmp	.+58     	; 0x379a <vfprintf+0xb0>
    3760:	8d 32       	cpi	r24, 0x2D	; 45
    3762:	61 f0       	breq	.+24     	; 0x377c <vfprintf+0x92>
    3764:	80 33       	cpi	r24, 0x30	; 48
    3766:	69 f4       	brne	.+26     	; 0x3782 <vfprintf+0x98>
    3768:	23 2d       	mov	r18, r3
    376a:	21 60       	ori	r18, 0x01	; 1
    376c:	16 c0       	rjmp	.+44     	; 0x379a <vfprintf+0xb0>
    376e:	83 2d       	mov	r24, r3
    3770:	82 60       	ori	r24, 0x02	; 2
    3772:	38 2e       	mov	r3, r24
    3774:	e3 2d       	mov	r30, r3
    3776:	e4 60       	ori	r30, 0x04	; 4
    3778:	3e 2e       	mov	r3, r30
    377a:	2a c0       	rjmp	.+84     	; 0x37d0 <vfprintf+0xe6>
    377c:	f3 2d       	mov	r31, r3
    377e:	f8 60       	ori	r31, 0x08	; 8
    3780:	1d c0       	rjmp	.+58     	; 0x37bc <vfprintf+0xd2>
    3782:	37 fc       	sbrc	r3, 7
    3784:	2d c0       	rjmp	.+90     	; 0x37e0 <vfprintf+0xf6>
    3786:	20 ed       	ldi	r18, 0xD0	; 208
    3788:	28 0f       	add	r18, r24
    378a:	2a 30       	cpi	r18, 0x0A	; 10
    378c:	40 f0       	brcs	.+16     	; 0x379e <vfprintf+0xb4>
    378e:	8e 32       	cpi	r24, 0x2E	; 46
    3790:	b9 f4       	brne	.+46     	; 0x37c0 <vfprintf+0xd6>
    3792:	36 fc       	sbrc	r3, 6
    3794:	81 c1       	rjmp	.+770    	; 0x3a98 <vfprintf+0x3ae>
    3796:	23 2d       	mov	r18, r3
    3798:	20 64       	ori	r18, 0x40	; 64
    379a:	32 2e       	mov	r3, r18
    379c:	19 c0       	rjmp	.+50     	; 0x37d0 <vfprintf+0xe6>
    379e:	36 fe       	sbrs	r3, 6
    37a0:	06 c0       	rjmp	.+12     	; 0x37ae <vfprintf+0xc4>
    37a2:	8a e0       	ldi	r24, 0x0A	; 10
    37a4:	98 9e       	mul	r9, r24
    37a6:	20 0d       	add	r18, r0
    37a8:	11 24       	eor	r1, r1
    37aa:	92 2e       	mov	r9, r18
    37ac:	11 c0       	rjmp	.+34     	; 0x37d0 <vfprintf+0xe6>
    37ae:	ea e0       	ldi	r30, 0x0A	; 10
    37b0:	2e 9e       	mul	r2, r30
    37b2:	20 0d       	add	r18, r0
    37b4:	11 24       	eor	r1, r1
    37b6:	22 2e       	mov	r2, r18
    37b8:	f3 2d       	mov	r31, r3
    37ba:	f0 62       	ori	r31, 0x20	; 32
    37bc:	3f 2e       	mov	r3, r31
    37be:	08 c0       	rjmp	.+16     	; 0x37d0 <vfprintf+0xe6>
    37c0:	8c 36       	cpi	r24, 0x6C	; 108
    37c2:	21 f4       	brne	.+8      	; 0x37cc <vfprintf+0xe2>
    37c4:	83 2d       	mov	r24, r3
    37c6:	80 68       	ori	r24, 0x80	; 128
    37c8:	38 2e       	mov	r3, r24
    37ca:	02 c0       	rjmp	.+4      	; 0x37d0 <vfprintf+0xe6>
    37cc:	88 36       	cpi	r24, 0x68	; 104
    37ce:	41 f4       	brne	.+16     	; 0x37e0 <vfprintf+0xf6>
    37d0:	f7 01       	movw	r30, r14
    37d2:	93 fd       	sbrc	r25, 3
    37d4:	85 91       	lpm	r24, Z+
    37d6:	93 ff       	sbrs	r25, 3
    37d8:	81 91       	ld	r24, Z+
    37da:	7f 01       	movw	r14, r30
    37dc:	81 11       	cpse	r24, r1
    37de:	b3 cf       	rjmp	.-154    	; 0x3746 <vfprintf+0x5c>
    37e0:	98 2f       	mov	r25, r24
    37e2:	9f 7d       	andi	r25, 0xDF	; 223
    37e4:	95 54       	subi	r25, 0x45	; 69
    37e6:	93 30       	cpi	r25, 0x03	; 3
    37e8:	28 f4       	brcc	.+10     	; 0x37f4 <vfprintf+0x10a>
    37ea:	0c 5f       	subi	r16, 0xFC	; 252
    37ec:	1f 4f       	sbci	r17, 0xFF	; 255
    37ee:	9f e3       	ldi	r25, 0x3F	; 63
    37f0:	99 83       	std	Y+1, r25	; 0x01
    37f2:	0d c0       	rjmp	.+26     	; 0x380e <vfprintf+0x124>
    37f4:	83 36       	cpi	r24, 0x63	; 99
    37f6:	31 f0       	breq	.+12     	; 0x3804 <vfprintf+0x11a>
    37f8:	83 37       	cpi	r24, 0x73	; 115
    37fa:	71 f0       	breq	.+28     	; 0x3818 <vfprintf+0x12e>
    37fc:	83 35       	cpi	r24, 0x53	; 83
    37fe:	09 f0       	breq	.+2      	; 0x3802 <vfprintf+0x118>
    3800:	59 c0       	rjmp	.+178    	; 0x38b4 <vfprintf+0x1ca>
    3802:	21 c0       	rjmp	.+66     	; 0x3846 <vfprintf+0x15c>
    3804:	f8 01       	movw	r30, r16
    3806:	80 81       	ld	r24, Z
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	0e 5f       	subi	r16, 0xFE	; 254
    380c:	1f 4f       	sbci	r17, 0xFF	; 255
    380e:	88 24       	eor	r8, r8
    3810:	83 94       	inc	r8
    3812:	91 2c       	mov	r9, r1
    3814:	53 01       	movw	r10, r6
    3816:	13 c0       	rjmp	.+38     	; 0x383e <vfprintf+0x154>
    3818:	28 01       	movw	r4, r16
    381a:	f2 e0       	ldi	r31, 0x02	; 2
    381c:	4f 0e       	add	r4, r31
    381e:	51 1c       	adc	r5, r1
    3820:	f8 01       	movw	r30, r16
    3822:	a0 80       	ld	r10, Z
    3824:	b1 80       	ldd	r11, Z+1	; 0x01
    3826:	36 fe       	sbrs	r3, 6
    3828:	03 c0       	rjmp	.+6      	; 0x3830 <vfprintf+0x146>
    382a:	69 2d       	mov	r22, r9
    382c:	70 e0       	ldi	r23, 0x00	; 0
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <vfprintf+0x14a>
    3830:	6f ef       	ldi	r22, 0xFF	; 255
    3832:	7f ef       	ldi	r23, 0xFF	; 255
    3834:	c5 01       	movw	r24, r10
    3836:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <strnlen>
    383a:	4c 01       	movw	r8, r24
    383c:	82 01       	movw	r16, r4
    383e:	f3 2d       	mov	r31, r3
    3840:	ff 77       	andi	r31, 0x7F	; 127
    3842:	3f 2e       	mov	r3, r31
    3844:	16 c0       	rjmp	.+44     	; 0x3872 <vfprintf+0x188>
    3846:	28 01       	movw	r4, r16
    3848:	22 e0       	ldi	r18, 0x02	; 2
    384a:	42 0e       	add	r4, r18
    384c:	51 1c       	adc	r5, r1
    384e:	f8 01       	movw	r30, r16
    3850:	a0 80       	ld	r10, Z
    3852:	b1 80       	ldd	r11, Z+1	; 0x01
    3854:	36 fe       	sbrs	r3, 6
    3856:	03 c0       	rjmp	.+6      	; 0x385e <vfprintf+0x174>
    3858:	69 2d       	mov	r22, r9
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <vfprintf+0x178>
    385e:	6f ef       	ldi	r22, 0xFF	; 255
    3860:	7f ef       	ldi	r23, 0xFF	; 255
    3862:	c5 01       	movw	r24, r10
    3864:	0e 94 56 1d 	call	0x3aac	; 0x3aac <strnlen_P>
    3868:	4c 01       	movw	r8, r24
    386a:	f3 2d       	mov	r31, r3
    386c:	f0 68       	ori	r31, 0x80	; 128
    386e:	3f 2e       	mov	r3, r31
    3870:	82 01       	movw	r16, r4
    3872:	33 fc       	sbrc	r3, 3
    3874:	1b c0       	rjmp	.+54     	; 0x38ac <vfprintf+0x1c2>
    3876:	82 2d       	mov	r24, r2
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	88 16       	cp	r8, r24
    387c:	99 06       	cpc	r9, r25
    387e:	b0 f4       	brcc	.+44     	; 0x38ac <vfprintf+0x1c2>
    3880:	b6 01       	movw	r22, r12
    3882:	80 e2       	ldi	r24, 0x20	; 32
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    388a:	2a 94       	dec	r2
    388c:	f4 cf       	rjmp	.-24     	; 0x3876 <vfprintf+0x18c>
    388e:	f5 01       	movw	r30, r10
    3890:	37 fc       	sbrc	r3, 7
    3892:	85 91       	lpm	r24, Z+
    3894:	37 fe       	sbrs	r3, 7
    3896:	81 91       	ld	r24, Z+
    3898:	5f 01       	movw	r10, r30
    389a:	b6 01       	movw	r22, r12
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    38a2:	21 10       	cpse	r2, r1
    38a4:	2a 94       	dec	r2
    38a6:	21 e0       	ldi	r18, 0x01	; 1
    38a8:	82 1a       	sub	r8, r18
    38aa:	91 08       	sbc	r9, r1
    38ac:	81 14       	cp	r8, r1
    38ae:	91 04       	cpc	r9, r1
    38b0:	71 f7       	brne	.-36     	; 0x388e <vfprintf+0x1a4>
    38b2:	e8 c0       	rjmp	.+464    	; 0x3a84 <vfprintf+0x39a>
    38b4:	84 36       	cpi	r24, 0x64	; 100
    38b6:	11 f0       	breq	.+4      	; 0x38bc <vfprintf+0x1d2>
    38b8:	89 36       	cpi	r24, 0x69	; 105
    38ba:	41 f5       	brne	.+80     	; 0x390c <vfprintf+0x222>
    38bc:	f8 01       	movw	r30, r16
    38be:	37 fe       	sbrs	r3, 7
    38c0:	07 c0       	rjmp	.+14     	; 0x38d0 <vfprintf+0x1e6>
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	0c 5f       	subi	r16, 0xFC	; 252
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	08 c0       	rjmp	.+16     	; 0x38e0 <vfprintf+0x1f6>
    38d0:	60 81       	ld	r22, Z
    38d2:	71 81       	ldd	r23, Z+1	; 0x01
    38d4:	07 2e       	mov	r0, r23
    38d6:	00 0c       	add	r0, r0
    38d8:	88 0b       	sbc	r24, r24
    38da:	99 0b       	sbc	r25, r25
    38dc:	0e 5f       	subi	r16, 0xFE	; 254
    38de:	1f 4f       	sbci	r17, 0xFF	; 255
    38e0:	f3 2d       	mov	r31, r3
    38e2:	ff 76       	andi	r31, 0x6F	; 111
    38e4:	3f 2e       	mov	r3, r31
    38e6:	97 ff       	sbrs	r25, 7
    38e8:	09 c0       	rjmp	.+18     	; 0x38fc <vfprintf+0x212>
    38ea:	90 95       	com	r25
    38ec:	80 95       	com	r24
    38ee:	70 95       	com	r23
    38f0:	61 95       	neg	r22
    38f2:	7f 4f       	sbci	r23, 0xFF	; 255
    38f4:	8f 4f       	sbci	r24, 0xFF	; 255
    38f6:	9f 4f       	sbci	r25, 0xFF	; 255
    38f8:	f0 68       	ori	r31, 0x80	; 128
    38fa:	3f 2e       	mov	r3, r31
    38fc:	2a e0       	ldi	r18, 0x0A	; 10
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	a3 01       	movw	r20, r6
    3902:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__ultoa_invert>
    3906:	88 2e       	mov	r8, r24
    3908:	86 18       	sub	r8, r6
    390a:	45 c0       	rjmp	.+138    	; 0x3996 <vfprintf+0x2ac>
    390c:	85 37       	cpi	r24, 0x75	; 117
    390e:	31 f4       	brne	.+12     	; 0x391c <vfprintf+0x232>
    3910:	23 2d       	mov	r18, r3
    3912:	2f 7e       	andi	r18, 0xEF	; 239
    3914:	b2 2e       	mov	r11, r18
    3916:	2a e0       	ldi	r18, 0x0A	; 10
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	25 c0       	rjmp	.+74     	; 0x3966 <vfprintf+0x27c>
    391c:	93 2d       	mov	r25, r3
    391e:	99 7f       	andi	r25, 0xF9	; 249
    3920:	b9 2e       	mov	r11, r25
    3922:	8f 36       	cpi	r24, 0x6F	; 111
    3924:	c1 f0       	breq	.+48     	; 0x3956 <vfprintf+0x26c>
    3926:	18 f4       	brcc	.+6      	; 0x392e <vfprintf+0x244>
    3928:	88 35       	cpi	r24, 0x58	; 88
    392a:	79 f0       	breq	.+30     	; 0x394a <vfprintf+0x260>
    392c:	b5 c0       	rjmp	.+362    	; 0x3a98 <vfprintf+0x3ae>
    392e:	80 37       	cpi	r24, 0x70	; 112
    3930:	19 f0       	breq	.+6      	; 0x3938 <vfprintf+0x24e>
    3932:	88 37       	cpi	r24, 0x78	; 120
    3934:	21 f0       	breq	.+8      	; 0x393e <vfprintf+0x254>
    3936:	b0 c0       	rjmp	.+352    	; 0x3a98 <vfprintf+0x3ae>
    3938:	e9 2f       	mov	r30, r25
    393a:	e0 61       	ori	r30, 0x10	; 16
    393c:	be 2e       	mov	r11, r30
    393e:	b4 fe       	sbrs	r11, 4
    3940:	0d c0       	rjmp	.+26     	; 0x395c <vfprintf+0x272>
    3942:	fb 2d       	mov	r31, r11
    3944:	f4 60       	ori	r31, 0x04	; 4
    3946:	bf 2e       	mov	r11, r31
    3948:	09 c0       	rjmp	.+18     	; 0x395c <vfprintf+0x272>
    394a:	34 fe       	sbrs	r3, 4
    394c:	0a c0       	rjmp	.+20     	; 0x3962 <vfprintf+0x278>
    394e:	29 2f       	mov	r18, r25
    3950:	26 60       	ori	r18, 0x06	; 6
    3952:	b2 2e       	mov	r11, r18
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <vfprintf+0x278>
    3956:	28 e0       	ldi	r18, 0x08	; 8
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	05 c0       	rjmp	.+10     	; 0x3966 <vfprintf+0x27c>
    395c:	20 e1       	ldi	r18, 0x10	; 16
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <vfprintf+0x27c>
    3962:	20 e1       	ldi	r18, 0x10	; 16
    3964:	32 e0       	ldi	r19, 0x02	; 2
    3966:	f8 01       	movw	r30, r16
    3968:	b7 fe       	sbrs	r11, 7
    396a:	07 c0       	rjmp	.+14     	; 0x397a <vfprintf+0x290>
    396c:	60 81       	ld	r22, Z
    396e:	71 81       	ldd	r23, Z+1	; 0x01
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	0c 5f       	subi	r16, 0xFC	; 252
    3976:	1f 4f       	sbci	r17, 0xFF	; 255
    3978:	06 c0       	rjmp	.+12     	; 0x3986 <vfprintf+0x29c>
    397a:	60 81       	ld	r22, Z
    397c:	71 81       	ldd	r23, Z+1	; 0x01
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	0e 5f       	subi	r16, 0xFE	; 254
    3984:	1f 4f       	sbci	r17, 0xFF	; 255
    3986:	a3 01       	movw	r20, r6
    3988:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__ultoa_invert>
    398c:	88 2e       	mov	r8, r24
    398e:	86 18       	sub	r8, r6
    3990:	fb 2d       	mov	r31, r11
    3992:	ff 77       	andi	r31, 0x7F	; 127
    3994:	3f 2e       	mov	r3, r31
    3996:	36 fe       	sbrs	r3, 6
    3998:	0d c0       	rjmp	.+26     	; 0x39b4 <vfprintf+0x2ca>
    399a:	23 2d       	mov	r18, r3
    399c:	2e 7f       	andi	r18, 0xFE	; 254
    399e:	a2 2e       	mov	r10, r18
    39a0:	89 14       	cp	r8, r9
    39a2:	58 f4       	brcc	.+22     	; 0x39ba <vfprintf+0x2d0>
    39a4:	34 fe       	sbrs	r3, 4
    39a6:	0b c0       	rjmp	.+22     	; 0x39be <vfprintf+0x2d4>
    39a8:	32 fc       	sbrc	r3, 2
    39aa:	09 c0       	rjmp	.+18     	; 0x39be <vfprintf+0x2d4>
    39ac:	83 2d       	mov	r24, r3
    39ae:	8e 7e       	andi	r24, 0xEE	; 238
    39b0:	a8 2e       	mov	r10, r24
    39b2:	05 c0       	rjmp	.+10     	; 0x39be <vfprintf+0x2d4>
    39b4:	b8 2c       	mov	r11, r8
    39b6:	a3 2c       	mov	r10, r3
    39b8:	03 c0       	rjmp	.+6      	; 0x39c0 <vfprintf+0x2d6>
    39ba:	b8 2c       	mov	r11, r8
    39bc:	01 c0       	rjmp	.+2      	; 0x39c0 <vfprintf+0x2d6>
    39be:	b9 2c       	mov	r11, r9
    39c0:	a4 fe       	sbrs	r10, 4
    39c2:	0f c0       	rjmp	.+30     	; 0x39e2 <vfprintf+0x2f8>
    39c4:	fe 01       	movw	r30, r28
    39c6:	e8 0d       	add	r30, r8
    39c8:	f1 1d       	adc	r31, r1
    39ca:	80 81       	ld	r24, Z
    39cc:	80 33       	cpi	r24, 0x30	; 48
    39ce:	21 f4       	brne	.+8      	; 0x39d8 <vfprintf+0x2ee>
    39d0:	9a 2d       	mov	r25, r10
    39d2:	99 7e       	andi	r25, 0xE9	; 233
    39d4:	a9 2e       	mov	r10, r25
    39d6:	09 c0       	rjmp	.+18     	; 0x39ea <vfprintf+0x300>
    39d8:	a2 fe       	sbrs	r10, 2
    39da:	06 c0       	rjmp	.+12     	; 0x39e8 <vfprintf+0x2fe>
    39dc:	b3 94       	inc	r11
    39de:	b3 94       	inc	r11
    39e0:	04 c0       	rjmp	.+8      	; 0x39ea <vfprintf+0x300>
    39e2:	8a 2d       	mov	r24, r10
    39e4:	86 78       	andi	r24, 0x86	; 134
    39e6:	09 f0       	breq	.+2      	; 0x39ea <vfprintf+0x300>
    39e8:	b3 94       	inc	r11
    39ea:	a3 fc       	sbrc	r10, 3
    39ec:	11 c0       	rjmp	.+34     	; 0x3a10 <vfprintf+0x326>
    39ee:	a0 fe       	sbrs	r10, 0
    39f0:	06 c0       	rjmp	.+12     	; 0x39fe <vfprintf+0x314>
    39f2:	b2 14       	cp	r11, r2
    39f4:	88 f4       	brcc	.+34     	; 0x3a18 <vfprintf+0x32e>
    39f6:	28 0c       	add	r2, r8
    39f8:	92 2c       	mov	r9, r2
    39fa:	9b 18       	sub	r9, r11
    39fc:	0e c0       	rjmp	.+28     	; 0x3a1a <vfprintf+0x330>
    39fe:	b2 14       	cp	r11, r2
    3a00:	60 f4       	brcc	.+24     	; 0x3a1a <vfprintf+0x330>
    3a02:	b6 01       	movw	r22, r12
    3a04:	80 e2       	ldi	r24, 0x20	; 32
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    3a0c:	b3 94       	inc	r11
    3a0e:	f7 cf       	rjmp	.-18     	; 0x39fe <vfprintf+0x314>
    3a10:	b2 14       	cp	r11, r2
    3a12:	18 f4       	brcc	.+6      	; 0x3a1a <vfprintf+0x330>
    3a14:	2b 18       	sub	r2, r11
    3a16:	02 c0       	rjmp	.+4      	; 0x3a1c <vfprintf+0x332>
    3a18:	98 2c       	mov	r9, r8
    3a1a:	21 2c       	mov	r2, r1
    3a1c:	a4 fe       	sbrs	r10, 4
    3a1e:	10 c0       	rjmp	.+32     	; 0x3a40 <vfprintf+0x356>
    3a20:	b6 01       	movw	r22, r12
    3a22:	80 e3       	ldi	r24, 0x30	; 48
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    3a2a:	a2 fe       	sbrs	r10, 2
    3a2c:	17 c0       	rjmp	.+46     	; 0x3a5c <vfprintf+0x372>
    3a2e:	a1 fc       	sbrc	r10, 1
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <vfprintf+0x34e>
    3a32:	88 e7       	ldi	r24, 0x78	; 120
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <vfprintf+0x352>
    3a38:	88 e5       	ldi	r24, 0x58	; 88
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	b6 01       	movw	r22, r12
    3a3e:	0c c0       	rjmp	.+24     	; 0x3a58 <vfprintf+0x36e>
    3a40:	8a 2d       	mov	r24, r10
    3a42:	86 78       	andi	r24, 0x86	; 134
    3a44:	59 f0       	breq	.+22     	; 0x3a5c <vfprintf+0x372>
    3a46:	a1 fe       	sbrs	r10, 1
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <vfprintf+0x364>
    3a4a:	8b e2       	ldi	r24, 0x2B	; 43
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <vfprintf+0x366>
    3a4e:	80 e2       	ldi	r24, 0x20	; 32
    3a50:	a7 fc       	sbrc	r10, 7
    3a52:	8d e2       	ldi	r24, 0x2D	; 45
    3a54:	b6 01       	movw	r22, r12
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    3a5c:	89 14       	cp	r8, r9
    3a5e:	38 f4       	brcc	.+14     	; 0x3a6e <vfprintf+0x384>
    3a60:	b6 01       	movw	r22, r12
    3a62:	80 e3       	ldi	r24, 0x30	; 48
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    3a6a:	9a 94       	dec	r9
    3a6c:	f7 cf       	rjmp	.-18     	; 0x3a5c <vfprintf+0x372>
    3a6e:	8a 94       	dec	r8
    3a70:	f3 01       	movw	r30, r6
    3a72:	e8 0d       	add	r30, r8
    3a74:	f1 1d       	adc	r31, r1
    3a76:	80 81       	ld	r24, Z
    3a78:	b6 01       	movw	r22, r12
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    3a80:	81 10       	cpse	r8, r1
    3a82:	f5 cf       	rjmp	.-22     	; 0x3a6e <vfprintf+0x384>
    3a84:	22 20       	and	r2, r2
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <vfprintf+0x3a0>
    3a88:	42 ce       	rjmp	.-892    	; 0x370e <vfprintf+0x24>
    3a8a:	b6 01       	movw	r22, r12
    3a8c:	80 e2       	ldi	r24, 0x20	; 32
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <fputc>
    3a94:	2a 94       	dec	r2
    3a96:	f6 cf       	rjmp	.-20     	; 0x3a84 <vfprintf+0x39a>
    3a98:	f6 01       	movw	r30, r12
    3a9a:	86 81       	ldd	r24, Z+6	; 0x06
    3a9c:	97 81       	ldd	r25, Z+7	; 0x07
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <vfprintf+0x3ba>
    3aa0:	8f ef       	ldi	r24, 0xFF	; 255
    3aa2:	9f ef       	ldi	r25, 0xFF	; 255
    3aa4:	2b 96       	adiw	r28, 0x0b	; 11
    3aa6:	e2 e1       	ldi	r30, 0x12	; 18
    3aa8:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__epilogue_restores__>

00003aac <strnlen_P>:
    3aac:	fc 01       	movw	r30, r24
    3aae:	05 90       	lpm	r0, Z+
    3ab0:	61 50       	subi	r22, 0x01	; 1
    3ab2:	70 40       	sbci	r23, 0x00	; 0
    3ab4:	01 10       	cpse	r0, r1
    3ab6:	d8 f7       	brcc	.-10     	; 0x3aae <strnlen_P+0x2>
    3ab8:	80 95       	com	r24
    3aba:	90 95       	com	r25
    3abc:	8e 0f       	add	r24, r30
    3abe:	9f 1f       	adc	r25, r31
    3ac0:	08 95       	ret

00003ac2 <strnlen>:
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	61 50       	subi	r22, 0x01	; 1
    3ac6:	70 40       	sbci	r23, 0x00	; 0
    3ac8:	01 90       	ld	r0, Z+
    3aca:	01 10       	cpse	r0, r1
    3acc:	d8 f7       	brcc	.-10     	; 0x3ac4 <strnlen+0x2>
    3ace:	80 95       	com	r24
    3ad0:	90 95       	com	r25
    3ad2:	8e 0f       	add	r24, r30
    3ad4:	9f 1f       	adc	r25, r31
    3ad6:	08 95       	ret

00003ad8 <fputc>:
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	fb 01       	movw	r30, r22
    3ae2:	23 81       	ldd	r18, Z+3	; 0x03
    3ae4:	21 fd       	sbrc	r18, 1
    3ae6:	03 c0       	rjmp	.+6      	; 0x3aee <fputc+0x16>
    3ae8:	8f ef       	ldi	r24, 0xFF	; 255
    3aea:	9f ef       	ldi	r25, 0xFF	; 255
    3aec:	2c c0       	rjmp	.+88     	; 0x3b46 <fputc+0x6e>
    3aee:	22 ff       	sbrs	r18, 2
    3af0:	16 c0       	rjmp	.+44     	; 0x3b1e <fputc+0x46>
    3af2:	46 81       	ldd	r20, Z+6	; 0x06
    3af4:	57 81       	ldd	r21, Z+7	; 0x07
    3af6:	24 81       	ldd	r18, Z+4	; 0x04
    3af8:	35 81       	ldd	r19, Z+5	; 0x05
    3afa:	42 17       	cp	r20, r18
    3afc:	53 07       	cpc	r21, r19
    3afe:	44 f4       	brge	.+16     	; 0x3b10 <fputc+0x38>
    3b00:	a0 81       	ld	r26, Z
    3b02:	b1 81       	ldd	r27, Z+1	; 0x01
    3b04:	9d 01       	movw	r18, r26
    3b06:	2f 5f       	subi	r18, 0xFF	; 255
    3b08:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0a:	31 83       	std	Z+1, r19	; 0x01
    3b0c:	20 83       	st	Z, r18
    3b0e:	8c 93       	st	X, r24
    3b10:	26 81       	ldd	r18, Z+6	; 0x06
    3b12:	37 81       	ldd	r19, Z+7	; 0x07
    3b14:	2f 5f       	subi	r18, 0xFF	; 255
    3b16:	3f 4f       	sbci	r19, 0xFF	; 255
    3b18:	37 83       	std	Z+7, r19	; 0x07
    3b1a:	26 83       	std	Z+6, r18	; 0x06
    3b1c:	14 c0       	rjmp	.+40     	; 0x3b46 <fputc+0x6e>
    3b1e:	8b 01       	movw	r16, r22
    3b20:	ec 01       	movw	r28, r24
    3b22:	fb 01       	movw	r30, r22
    3b24:	00 84       	ldd	r0, Z+8	; 0x08
    3b26:	f1 85       	ldd	r31, Z+9	; 0x09
    3b28:	e0 2d       	mov	r30, r0
    3b2a:	09 95       	icall
    3b2c:	89 2b       	or	r24, r25
    3b2e:	e1 f6       	brne	.-72     	; 0x3ae8 <fputc+0x10>
    3b30:	d8 01       	movw	r26, r16
    3b32:	16 96       	adiw	r26, 0x06	; 6
    3b34:	8d 91       	ld	r24, X+
    3b36:	9c 91       	ld	r25, X
    3b38:	17 97       	sbiw	r26, 0x07	; 7
    3b3a:	01 96       	adiw	r24, 0x01	; 1
    3b3c:	17 96       	adiw	r26, 0x07	; 7
    3b3e:	9c 93       	st	X, r25
    3b40:	8e 93       	st	-X, r24
    3b42:	16 97       	sbiw	r26, 0x06	; 6
    3b44:	ce 01       	movw	r24, r28
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <__ultoa_invert>:
    3b50:	fa 01       	movw	r30, r20
    3b52:	aa 27       	eor	r26, r26
    3b54:	28 30       	cpi	r18, 0x08	; 8
    3b56:	51 f1       	breq	.+84     	; 0x3bac <__ultoa_invert+0x5c>
    3b58:	20 31       	cpi	r18, 0x10	; 16
    3b5a:	81 f1       	breq	.+96     	; 0x3bbc <__ultoa_invert+0x6c>
    3b5c:	e8 94       	clt
    3b5e:	6f 93       	push	r22
    3b60:	6e 7f       	andi	r22, 0xFE	; 254
    3b62:	6e 5f       	subi	r22, 0xFE	; 254
    3b64:	7f 4f       	sbci	r23, 0xFF	; 255
    3b66:	8f 4f       	sbci	r24, 0xFF	; 255
    3b68:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6a:	af 4f       	sbci	r26, 0xFF	; 255
    3b6c:	b1 e0       	ldi	r27, 0x01	; 1
    3b6e:	3e d0       	rcall	.+124    	; 0x3bec <__ultoa_invert+0x9c>
    3b70:	b4 e0       	ldi	r27, 0x04	; 4
    3b72:	3c d0       	rcall	.+120    	; 0x3bec <__ultoa_invert+0x9c>
    3b74:	67 0f       	add	r22, r23
    3b76:	78 1f       	adc	r23, r24
    3b78:	89 1f       	adc	r24, r25
    3b7a:	9a 1f       	adc	r25, r26
    3b7c:	a1 1d       	adc	r26, r1
    3b7e:	68 0f       	add	r22, r24
    3b80:	79 1f       	adc	r23, r25
    3b82:	8a 1f       	adc	r24, r26
    3b84:	91 1d       	adc	r25, r1
    3b86:	a1 1d       	adc	r26, r1
    3b88:	6a 0f       	add	r22, r26
    3b8a:	71 1d       	adc	r23, r1
    3b8c:	81 1d       	adc	r24, r1
    3b8e:	91 1d       	adc	r25, r1
    3b90:	a1 1d       	adc	r26, r1
    3b92:	20 d0       	rcall	.+64     	; 0x3bd4 <__ultoa_invert+0x84>
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <__ultoa_invert+0x48>
    3b96:	68 94       	set
    3b98:	3f 91       	pop	r19
    3b9a:	2a e0       	ldi	r18, 0x0A	; 10
    3b9c:	26 9f       	mul	r18, r22
    3b9e:	11 24       	eor	r1, r1
    3ba0:	30 19       	sub	r19, r0
    3ba2:	30 5d       	subi	r19, 0xD0	; 208
    3ba4:	31 93       	st	Z+, r19
    3ba6:	de f6       	brtc	.-74     	; 0x3b5e <__ultoa_invert+0xe>
    3ba8:	cf 01       	movw	r24, r30
    3baa:	08 95       	ret
    3bac:	46 2f       	mov	r20, r22
    3bae:	47 70       	andi	r20, 0x07	; 7
    3bb0:	40 5d       	subi	r20, 0xD0	; 208
    3bb2:	41 93       	st	Z+, r20
    3bb4:	b3 e0       	ldi	r27, 0x03	; 3
    3bb6:	0f d0       	rcall	.+30     	; 0x3bd6 <__ultoa_invert+0x86>
    3bb8:	c9 f7       	brne	.-14     	; 0x3bac <__ultoa_invert+0x5c>
    3bba:	f6 cf       	rjmp	.-20     	; 0x3ba8 <__ultoa_invert+0x58>
    3bbc:	46 2f       	mov	r20, r22
    3bbe:	4f 70       	andi	r20, 0x0F	; 15
    3bc0:	40 5d       	subi	r20, 0xD0	; 208
    3bc2:	4a 33       	cpi	r20, 0x3A	; 58
    3bc4:	18 f0       	brcs	.+6      	; 0x3bcc <__ultoa_invert+0x7c>
    3bc6:	49 5d       	subi	r20, 0xD9	; 217
    3bc8:	31 fd       	sbrc	r19, 1
    3bca:	40 52       	subi	r20, 0x20	; 32
    3bcc:	41 93       	st	Z+, r20
    3bce:	02 d0       	rcall	.+4      	; 0x3bd4 <__ultoa_invert+0x84>
    3bd0:	a9 f7       	brne	.-22     	; 0x3bbc <__ultoa_invert+0x6c>
    3bd2:	ea cf       	rjmp	.-44     	; 0x3ba8 <__ultoa_invert+0x58>
    3bd4:	b4 e0       	ldi	r27, 0x04	; 4
    3bd6:	a6 95       	lsr	r26
    3bd8:	97 95       	ror	r25
    3bda:	87 95       	ror	r24
    3bdc:	77 95       	ror	r23
    3bde:	67 95       	ror	r22
    3be0:	ba 95       	dec	r27
    3be2:	c9 f7       	brne	.-14     	; 0x3bd6 <__ultoa_invert+0x86>
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	61 05       	cpc	r22, r1
    3be8:	71 05       	cpc	r23, r1
    3bea:	08 95       	ret
    3bec:	9b 01       	movw	r18, r22
    3bee:	ac 01       	movw	r20, r24
    3bf0:	0a 2e       	mov	r0, r26
    3bf2:	06 94       	lsr	r0
    3bf4:	57 95       	ror	r21
    3bf6:	47 95       	ror	r20
    3bf8:	37 95       	ror	r19
    3bfa:	27 95       	ror	r18
    3bfc:	ba 95       	dec	r27
    3bfe:	c9 f7       	brne	.-14     	; 0x3bf2 <__ultoa_invert+0xa2>
    3c00:	62 0f       	add	r22, r18
    3c02:	73 1f       	adc	r23, r19
    3c04:	84 1f       	adc	r24, r20
    3c06:	95 1f       	adc	r25, r21
    3c08:	a0 1d       	adc	r26, r0
    3c0a:	08 95       	ret

00003c0c <__prologue_saves__>:
    3c0c:	2f 92       	push	r2
    3c0e:	3f 92       	push	r3
    3c10:	4f 92       	push	r4
    3c12:	5f 92       	push	r5
    3c14:	6f 92       	push	r6
    3c16:	7f 92       	push	r7
    3c18:	8f 92       	push	r8
    3c1a:	9f 92       	push	r9
    3c1c:	af 92       	push	r10
    3c1e:	bf 92       	push	r11
    3c20:	cf 92       	push	r12
    3c22:	df 92       	push	r13
    3c24:	ef 92       	push	r14
    3c26:	ff 92       	push	r15
    3c28:	0f 93       	push	r16
    3c2a:	1f 93       	push	r17
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	ca 1b       	sub	r28, r26
    3c36:	db 0b       	sbc	r29, r27
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	09 94       	ijmp

00003c44 <__epilogue_restores__>:
    3c44:	2a 88       	ldd	r2, Y+18	; 0x12
    3c46:	39 88       	ldd	r3, Y+17	; 0x11
    3c48:	48 88       	ldd	r4, Y+16	; 0x10
    3c4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c50:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c52:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c54:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c56:	b9 84       	ldd	r11, Y+9	; 0x09
    3c58:	c8 84       	ldd	r12, Y+8	; 0x08
    3c5a:	df 80       	ldd	r13, Y+7	; 0x07
    3c5c:	ee 80       	ldd	r14, Y+6	; 0x06
    3c5e:	fd 80       	ldd	r15, Y+5	; 0x05
    3c60:	0c 81       	ldd	r16, Y+4	; 0x04
    3c62:	1b 81       	ldd	r17, Y+3	; 0x03
    3c64:	aa 81       	ldd	r26, Y+2	; 0x02
    3c66:	b9 81       	ldd	r27, Y+1	; 0x01
    3c68:	ce 0f       	add	r28, r30
    3c6a:	d1 1d       	adc	r29, r1
    3c6c:	0f b6       	in	r0, 0x3f	; 63
    3c6e:	f8 94       	cli
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	ed 01       	movw	r28, r26
    3c78:	08 95       	ret

00003c7a <_exit>:
    3c7a:	f8 94       	cli

00003c7c <__stop_program>:
    3c7c:	ff cf       	rjmp	.-2      	; 0x3c7c <__stop_program>
